!function t(e,n,s){function i(o,a){if(!n[o]){if(!e[o]){var l="function"==typeof require&&require;if(!a&&l)return l(o,!0);if(r)return r(o,!0);var h=new Error("Cannot find module '"+o+"'");throw h.code="MODULE_NOT_FOUND",h}var c=n[o]={exports:{}};e[o][0].call(c.exports,function(t){var n=e[o][1][t];return i(n?n:t)},c,c.exports,t,e,n,s)}return n[o].exports}for(var r="function"==typeof require&&require,o=0;o<s.length;o++)i(s[o]);return i}({1:[function(t,e,n){!function(){"use strict";function t(t,e){if(t){if(e.element_.classList.contains(e.CssClasses_.MDL_JS_RIPPLE_EFFECT)){var n=document.createElement("span");n.classList.add(e.CssClasses_.MDL_RIPPLE_CONTAINER),n.classList.add(e.CssClasses_.MDL_JS_RIPPLE_EFFECT);var s=document.createElement("span");s.classList.add(e.CssClasses_.MDL_RIPPLE),n.appendChild(s),t.appendChild(n)}t.addEventListener("click",function(n){n.preventDefault();var s=t.href.split("#")[1],i=e.element_.querySelector("#"+s);e.resetTabState_(),e.resetPanelState_(),t.classList.add(e.CssClasses_.ACTIVE_CLASS),i.classList.add(e.CssClasses_.ACTIVE_CLASS)})}}function e(t,e,n,s){function i(){var i=t.href.split("#")[1],r=s.content_.querySelector("#"+i);s.resetTabState_(e),s.resetPanelState_(n),t.classList.add(s.CssClasses_.IS_ACTIVE),r.classList.add(s.CssClasses_.IS_ACTIVE)}if(s.tabBar_.classList.contains(s.CssClasses_.JS_RIPPLE_EFFECT)){var r=document.createElement("span");r.classList.add(s.CssClasses_.RIPPLE_CONTAINER),r.classList.add(s.CssClasses_.JS_RIPPLE_EFFECT);var o=document.createElement("span");o.classList.add(s.CssClasses_.RIPPLE),r.appendChild(o),t.appendChild(r)}t.addEventListener("click",function(e){"#"===t.getAttribute("href").charAt(0)&&(e.preventDefault(),i())}),t.show=i}var n={upgradeDom:function(t,e){},upgradeElement:function(t,e){},upgradeElements:function(t){},upgradeAllRegistered:function(){},registerUpgradedCallback:function(t,e){},register:function(t){},downgradeElements:function(t){}};n=function(){function t(t,e){for(var n=0;n<u.length;n++)if(u[n].className===t)return"undefined"!=typeof e&&(u[n]=e),u[n];return!1}function e(t){var e=t.getAttribute("data-upgraded");return null===e?[""]:e.split(",")}function n(t,n){var s=e(t);return-1!==s.indexOf(n)}function s(e,n){if("undefined"==typeof e&&"undefined"==typeof n)for(var r=0;r<u.length;r++)s(u[r].className,u[r].cssClass);else{var o=e;if("undefined"==typeof n){var a=t(o);a&&(n=a.cssClass)}for(var l=document.querySelectorAll("."+n),h=0;h<l.length;h++)i(l[h],o)}}function i(s,i){if(!("object"==typeof s&&s instanceof Element))throw new Error("Invalid argument provided to upgrade MDL element.");var r=e(s),o=[];if(i)n(s,i)||o.push(t(i));else{var a=s.classList;u.forEach(function(t){a.contains(t.cssClass)&&-1===o.indexOf(t)&&!n(s,t.className)&&o.push(t)})}for(var l,h=0,c=o.length;c>h;h++){if(l=o[h],!l)throw new Error("Unable to find a registered component for the given class.");r.push(l.className),s.setAttribute("data-upgraded",r.join(","));var f=new l.classConstructor(s);f[p]=l,d.push(f);for(var _=0,m=l.callbacks.length;m>_;_++)l.callbacks[_](s);l.widget&&(s[l.className]=f);var v;"CustomEvent"in window&&"function"==typeof window.CustomEvent?v=new Event("mdl-componentupgraded",{bubbles:!0,cancelable:!1}):(v=document.createEvent("Events"),v.initEvent("mdl-componentupgraded",!0,!0)),s.dispatchEvent(v)}}function r(t){Array.isArray(t)||(t="function"==typeof t.item?Array.prototype.slice.call(t):[t]);for(var e,n=0,s=t.length;s>n;n++)e=t[n],e instanceof HTMLElement&&(i(e),e.children.length>0&&r(e.children))}function o(e){var n="undefined"==typeof e.widget&&"undefined"==typeof e.widget,s=!0;n||(s=e.widget||e.widget);var i={classConstructor:e.constructor||e.constructor,className:e.classAsString||e.classAsString,cssClass:e.cssClass||e.cssClass,widget:s,callbacks:[]};if(u.forEach(function(t){if(t.cssClass===i.cssClass)throw new Error("The provided cssClass has already been registered: "+t.cssClass);if(t.className===i.className)throw new Error("The provided className has already been registered")}),e.constructor.prototype.hasOwnProperty(p))throw new Error("MDL component classes must not have "+p+" defined as a property.");var r=t(e.classAsString,i);r||u.push(i)}function a(e,n){var s=t(e);s&&s.callbacks.push(n)}function l(){for(var t=0;t<u.length;t++)s(u[t].className)}function h(t){if(t){var e=d.indexOf(t);d.splice(e,1);var n=t.element_.getAttribute("data-upgraded").split(","),s=n.indexOf(t[p].classAsString);n.splice(s,1),t.element_.setAttribute("data-upgraded",n.join(","));var i;"CustomEvent"in window&&"function"==typeof window.CustomEvent?i=new Event("mdl-componentdowngraded",{bubbles:!0,cancelable:!1}):(i=document.createEvent("Events"),i.initEvent("mdl-componentdowngraded",!0,!0))}}function c(t){var e=function(t){d.filter(function(e){return e.element_===t}).forEach(h)};if(t instanceof Array||t instanceof NodeList)for(var n=0;n<t.length;n++)e(t[n]);else{if(!(t instanceof Node))throw new Error("Invalid argument provided to downgrade MDL nodes.");e(t)}}var u=[],d=[],p="mdlComponentConfigInternal_";return{upgradeDom:s,upgradeElement:i,upgradeElements:r,upgradeAllRegistered:l,registerUpgradedCallback:a,register:o,downgradeElements:c}}(),n.ComponentConfigPublic,n.ComponentConfig,n.Component,n.upgradeDom=n.upgradeDom,n.upgradeElement=n.upgradeElement,n.upgradeElements=n.upgradeElements,n.upgradeAllRegistered=n.upgradeAllRegistered,n.registerUpgradedCallback=n.registerUpgradedCallback,n.register=n.register,n.downgradeElements=n.downgradeElements,window.componentHandler=n,window.componentHandler=n,window.addEventListener("load",function(){"classList"in document.createElement("div")&&"querySelector"in document&&"addEventListener"in window&&Array.prototype.forEach?(document.documentElement.classList.add("mdl-js"),n.upgradeAllRegistered()):(n.upgradeElement=function(){},n.register=function(){})}),Date.now||(Date.now=function(){return(new Date).getTime()},Date.now=Date.now);for(var s=["webkit","moz"],i=0;i<s.length&&!window.requestAnimationFrame;++i){var r=s[i];window.requestAnimationFrame=window[r+"RequestAnimationFrame"],window.cancelAnimationFrame=window[r+"CancelAnimationFrame"]||window[r+"CancelRequestAnimationFrame"],window.requestAnimationFrame=window.requestAnimationFrame,window.cancelAnimationFrame=window.cancelAnimationFrame}if(/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent)||!window.requestAnimationFrame||!window.cancelAnimationFrame){var o=0;window.requestAnimationFrame=function(t){var e=Date.now(),n=Math.max(o+16,e);return setTimeout(function(){t(o=n)},n-e)},window.cancelAnimationFrame=clearTimeout,window.requestAnimationFrame=window.requestAnimationFrame,window.cancelAnimationFrame=window.cancelAnimationFrame}var a=function(t){this.element_=t,this.init()};window.MaterialButton=a,a.prototype.Constant_={},a.prototype.CssClasses_={RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_CONTAINER:"mdl-button__ripple-container",RIPPLE:"mdl-ripple"},a.prototype.blurHandler_=function(t){t&&this.element_.blur()},a.prototype.disable=function(){this.element_.disabled=!0},a.prototype.disable=a.prototype.disable,a.prototype.enable=function(){this.element_.disabled=!1},a.prototype.enable=a.prototype.enable,a.prototype.init=function(){if(this.element_){if(this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)){var t=document.createElement("span");t.classList.add(this.CssClasses_.RIPPLE_CONTAINER),this.rippleElement_=document.createElement("span"),this.rippleElement_.classList.add(this.CssClasses_.RIPPLE),t.appendChild(this.rippleElement_),this.boundRippleBlurHandler=this.blurHandler_.bind(this),this.rippleElement_.addEventListener("mouseup",this.boundRippleBlurHandler),this.element_.appendChild(t)}this.boundButtonBlurHandler=this.blurHandler_.bind(this),this.element_.addEventListener("mouseup",this.boundButtonBlurHandler),this.element_.addEventListener("mouseleave",this.boundButtonBlurHandler)}},n.register({constructor:a,classAsString:"MaterialButton",cssClass:"mdl-js-button",widget:!0});var l=function(t){this.element_=t,this.init()};window.MaterialCheckbox=l,l.prototype.Constant_={TINY_TIMEOUT:.001},l.prototype.CssClasses_={INPUT:"mdl-checkbox__input",BOX_OUTLINE:"mdl-checkbox__box-outline",FOCUS_HELPER:"mdl-checkbox__focus-helper",TICK_OUTLINE:"mdl-checkbox__tick-outline",RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",RIPPLE_CONTAINER:"mdl-checkbox__ripple-container",RIPPLE_CENTER:"mdl-ripple--center",RIPPLE:"mdl-ripple",IS_FOCUSED:"is-focused",IS_DISABLED:"is-disabled",IS_CHECKED:"is-checked",IS_UPGRADED:"is-upgraded"},l.prototype.onChange_=function(t){this.updateClasses_()},l.prototype.onFocus_=function(t){this.element_.classList.add(this.CssClasses_.IS_FOCUSED)},l.prototype.onBlur_=function(t){this.element_.classList.remove(this.CssClasses_.IS_FOCUSED)},l.prototype.onMouseUp_=function(t){this.blur_()},l.prototype.updateClasses_=function(){this.checkDisabled(),this.checkToggleState()},l.prototype.blur_=function(){window.setTimeout(function(){this.inputElement_.blur()}.bind(this),this.Constant_.TINY_TIMEOUT)},l.prototype.checkToggleState=function(){this.inputElement_.checked?this.element_.classList.add(this.CssClasses_.IS_CHECKED):this.element_.classList.remove(this.CssClasses_.IS_CHECKED)},l.prototype.checkToggleState=l.prototype.checkToggleState,l.prototype.checkDisabled=function(){this.inputElement_.disabled?this.element_.classList.add(this.CssClasses_.IS_DISABLED):this.element_.classList.remove(this.CssClasses_.IS_DISABLED)},l.prototype.checkDisabled=l.prototype.checkDisabled,l.prototype.disable=function(){this.inputElement_.disabled=!0,this.updateClasses_()},l.prototype.disable=l.prototype.disable,l.prototype.enable=function(){this.inputElement_.disabled=!1,this.updateClasses_()},l.prototype.enable=l.prototype.enable,l.prototype.check=function(){this.inputElement_.checked=!0,this.updateClasses_()},l.prototype.check=l.prototype.check,l.prototype.uncheck=function(){this.inputElement_.checked=!1,this.updateClasses_()},l.prototype.uncheck=l.prototype.uncheck,l.prototype.init=function(){if(this.element_){this.inputElement_=this.element_.querySelector("."+this.CssClasses_.INPUT);var t=document.createElement("span");t.classList.add(this.CssClasses_.BOX_OUTLINE);var e=document.createElement("span");e.classList.add(this.CssClasses_.FOCUS_HELPER);var n=document.createElement("span");if(n.classList.add(this.CssClasses_.TICK_OUTLINE),t.appendChild(n),this.element_.appendChild(e),this.element_.appendChild(t),this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)){this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),this.rippleContainerElement_=document.createElement("span"),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER),this.boundRippleMouseUp=this.onMouseUp_.bind(this),this.rippleContainerElement_.addEventListener("mouseup",this.boundRippleMouseUp);var s=document.createElement("span");s.classList.add(this.CssClasses_.RIPPLE),this.rippleContainerElement_.appendChild(s),this.element_.appendChild(this.rippleContainerElement_)}this.boundInputOnChange=this.onChange_.bind(this),this.boundInputOnFocus=this.onFocus_.bind(this),this.boundInputOnBlur=this.onBlur_.bind(this),this.boundElementMouseUp=this.onMouseUp_.bind(this),this.inputElement_.addEventListener("change",this.boundInputOnChange),this.inputElement_.addEventListener("focus",this.boundInputOnFocus),this.inputElement_.addEventListener("blur",this.boundInputOnBlur),this.element_.addEventListener("mouseup",this.boundElementMouseUp),this.updateClasses_(),this.element_.classList.add(this.CssClasses_.IS_UPGRADED)}},n.register({constructor:l,classAsString:"MaterialCheckbox",cssClass:"mdl-js-checkbox",widget:!0});var h=function(t){this.element_=t,this.init()};window.MaterialIconToggle=h,h.prototype.Constant_={TINY_TIMEOUT:.001},h.prototype.CssClasses_={INPUT:"mdl-icon-toggle__input",JS_RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",RIPPLE_CONTAINER:"mdl-icon-toggle__ripple-container",RIPPLE_CENTER:"mdl-ripple--center",RIPPLE:"mdl-ripple",IS_FOCUSED:"is-focused",IS_DISABLED:"is-disabled",IS_CHECKED:"is-checked"},h.prototype.onChange_=function(t){this.updateClasses_()},h.prototype.onFocus_=function(t){this.element_.classList.add(this.CssClasses_.IS_FOCUSED)},h.prototype.onBlur_=function(t){this.element_.classList.remove(this.CssClasses_.IS_FOCUSED)},h.prototype.onMouseUp_=function(t){this.blur_()},h.prototype.updateClasses_=function(){this.checkDisabled(),this.checkToggleState()},h.prototype.blur_=function(){window.setTimeout(function(){this.inputElement_.blur()}.bind(this),this.Constant_.TINY_TIMEOUT)},h.prototype.checkToggleState=function(){this.inputElement_.checked?this.element_.classList.add(this.CssClasses_.IS_CHECKED):this.element_.classList.remove(this.CssClasses_.IS_CHECKED)},h.prototype.checkToggleState=h.prototype.checkToggleState,h.prototype.checkDisabled=function(){this.inputElement_.disabled?this.element_.classList.add(this.CssClasses_.IS_DISABLED):this.element_.classList.remove(this.CssClasses_.IS_DISABLED)},h.prototype.checkDisabled=h.prototype.checkDisabled,h.prototype.disable=function(){this.inputElement_.disabled=!0,this.updateClasses_()},h.prototype.disable=h.prototype.disable,h.prototype.enable=function(){this.inputElement_.disabled=!1,this.updateClasses_()},h.prototype.enable=h.prototype.enable,h.prototype.check=function(){this.inputElement_.checked=!0,this.updateClasses_()},h.prototype.check=h.prototype.check,h.prototype.uncheck=function(){this.inputElement_.checked=!1,this.updateClasses_()},h.prototype.uncheck=h.prototype.uncheck,h.prototype.init=function(){if(this.element_){if(this.inputElement_=this.element_.querySelector("."+this.CssClasses_.INPUT),this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)){this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),this.rippleContainerElement_=document.createElement("span"),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER),this.rippleContainerElement_.classList.add(this.CssClasses_.JS_RIPPLE_EFFECT),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER),this.boundRippleMouseUp=this.onMouseUp_.bind(this),this.rippleContainerElement_.addEventListener("mouseup",this.boundRippleMouseUp);var t=document.createElement("span");t.classList.add(this.CssClasses_.RIPPLE),this.rippleContainerElement_.appendChild(t),this.element_.appendChild(this.rippleContainerElement_)}this.boundInputOnChange=this.onChange_.bind(this),this.boundInputOnFocus=this.onFocus_.bind(this),this.boundInputOnBlur=this.onBlur_.bind(this),this.boundElementOnMouseUp=this.onMouseUp_.bind(this),this.inputElement_.addEventListener("change",this.boundInputOnChange),this.inputElement_.addEventListener("focus",this.boundInputOnFocus),this.inputElement_.addEventListener("blur",this.boundInputOnBlur),this.element_.addEventListener("mouseup",this.boundElementOnMouseUp),this.updateClasses_(),this.element_.classList.add("is-upgraded")}},n.register({constructor:h,classAsString:"MaterialIconToggle",cssClass:"mdl-js-icon-toggle",widget:!0});var c=function(t){this.element_=t,this.init()};window.MaterialMenu=c,c.prototype.Constant_={TRANSITION_DURATION_SECONDS:.3,TRANSITION_DURATION_FRACTION:.8,CLOSE_TIMEOUT:150},c.prototype.Keycodes_={ENTER:13,ESCAPE:27,SPACE:32,UP_ARROW:38,DOWN_ARROW:40},c.prototype.CssClasses_={CONTAINER:"mdl-menu__container",OUTLINE:"mdl-menu__outline",ITEM:"mdl-menu__item",ITEM_RIPPLE_CONTAINER:"mdl-menu__item-ripple-container",RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",RIPPLE:"mdl-ripple",IS_UPGRADED:"is-upgraded",IS_VISIBLE:"is-visible",IS_ANIMATING:"is-animating",BOTTOM_LEFT:"mdl-menu--bottom-left",BOTTOM_RIGHT:"mdl-menu--bottom-right",TOP_LEFT:"mdl-menu--top-left",TOP_RIGHT:"mdl-menu--top-right",UNALIGNED:"mdl-menu--unaligned"},c.prototype.init=function(){if(this.element_){var t=document.createElement("div");t.classList.add(this.CssClasses_.CONTAINER),this.element_.parentElement.insertBefore(t,this.element_),this.element_.parentElement.removeChild(this.element_),t.appendChild(this.element_),this.container_=t;var e=document.createElement("div");e.classList.add(this.CssClasses_.OUTLINE),this.outline_=e,t.insertBefore(e,this.element_);var n=this.element_.getAttribute("for")||this.element_.getAttribute("data-mdl-for"),s=null;n&&(s=document.getElementById(n),s&&(this.forElement_=s,s.addEventListener("click",this.handleForClick_.bind(this)),s.addEventListener("keydown",this.handleForKeyboardEvent_.bind(this))));var i=this.element_.querySelectorAll("."+this.CssClasses_.ITEM);this.boundItemKeydown_=this.handleItemKeyboardEvent_.bind(this),this.boundItemClick_=this.handleItemClick_.bind(this);for(var r=0;r<i.length;r++)i[r].addEventListener("click",this.boundItemClick_),i[r].tabIndex="-1",i[r].addEventListener("keydown",this.boundItemKeydown_);if(this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT))for(this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),r=0;r<i.length;r++){var o=i[r],a=document.createElement("span");a.classList.add(this.CssClasses_.ITEM_RIPPLE_CONTAINER);var l=document.createElement("span");l.classList.add(this.CssClasses_.RIPPLE),a.appendChild(l),o.appendChild(a),o.classList.add(this.CssClasses_.RIPPLE_EFFECT)}this.element_.classList.contains(this.CssClasses_.BOTTOM_LEFT)&&this.outline_.classList.add(this.CssClasses_.BOTTOM_LEFT),this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)&&this.outline_.classList.add(this.CssClasses_.BOTTOM_RIGHT),this.element_.classList.contains(this.CssClasses_.TOP_LEFT)&&this.outline_.classList.add(this.CssClasses_.TOP_LEFT),this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)&&this.outline_.classList.add(this.CssClasses_.TOP_RIGHT),this.element_.classList.contains(this.CssClasses_.UNALIGNED)&&this.outline_.classList.add(this.CssClasses_.UNALIGNED),t.classList.add(this.CssClasses_.IS_UPGRADED)}},c.prototype.handleForClick_=function(t){if(this.element_&&this.forElement_){var e=this.forElement_.getBoundingClientRect(),n=this.forElement_.parentElement.getBoundingClientRect();this.element_.classList.contains(this.CssClasses_.UNALIGNED)||(this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)?(this.container_.style.right=n.right-e.right+"px",this.container_.style.top=this.forElement_.offsetTop+this.forElement_.offsetHeight+"px"):this.element_.classList.contains(this.CssClasses_.TOP_LEFT)?(this.container_.style.left=this.forElement_.offsetLeft+"px",this.container_.style.bottom=n.bottom-e.top+"px"):this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)?(this.container_.style.right=n.right-e.right+"px",this.container_.style.bottom=n.bottom-e.top+"px"):(this.container_.style.left=this.forElement_.offsetLeft+"px",this.container_.style.top=this.forElement_.offsetTop+this.forElement_.offsetHeight+"px"))}this.toggle(t)},c.prototype.handleForKeyboardEvent_=function(t){if(this.element_&&this.container_&&this.forElement_){var e=this.element_.querySelectorAll("."+this.CssClasses_.ITEM+":not([disabled])");e&&e.length>0&&this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)&&(t.keyCode===this.Keycodes_.UP_ARROW?(t.preventDefault(),e[e.length-1].focus()):t.keyCode===this.Keycodes_.DOWN_ARROW&&(t.preventDefault(),e[0].focus()))}},c.prototype.handleItemKeyboardEvent_=function(t){if(this.element_&&this.container_){var e=this.element_.querySelectorAll("."+this.CssClasses_.ITEM+":not([disabled])");if(e&&e.length>0&&this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)){var n=Array.prototype.slice.call(e).indexOf(t.target);if(t.keyCode===this.Keycodes_.UP_ARROW)t.preventDefault(),n>0?e[n-1].focus():e[e.length-1].focus();else if(t.keyCode===this.Keycodes_.DOWN_ARROW)t.preventDefault(),e.length>n+1?e[n+1].focus():e[0].focus();else if(t.keyCode===this.Keycodes_.SPACE||t.keyCode===this.Keycodes_.ENTER){t.preventDefault();var s=new MouseEvent("mousedown");t.target.dispatchEvent(s),s=new MouseEvent("mouseup"),t.target.dispatchEvent(s),t.target.click()}else t.keyCode===this.Keycodes_.ESCAPE&&(t.preventDefault(),this.hide())}}},c.prototype.handleItemClick_=function(t){t.target.hasAttribute("disabled")?t.stopPropagation():(this.closing_=!0,window.setTimeout(function(t){this.hide(),this.closing_=!1}.bind(this),this.Constant_.CLOSE_TIMEOUT))},c.prototype.applyClip_=function(t,e){this.element_.classList.contains(this.CssClasses_.UNALIGNED)?this.element_.style.clip="":this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)?this.element_.style.clip="rect(0 "+e+"px 0 "+e+"px)":this.element_.classList.contains(this.CssClasses_.TOP_LEFT)?this.element_.style.clip="rect("+t+"px 0 "+t+"px 0)":this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)?this.element_.style.clip="rect("+t+"px "+e+"px "+t+"px "+e+"px)":this.element_.style.clip=""},c.prototype.removeAnimationEndListener_=function(t){t.target.classList.remove(c.prototype.CssClasses_.IS_ANIMATING)},c.prototype.addAnimationEndListener_=function(){this.element_.addEventListener("transitionend",this.removeAnimationEndListener_),this.element_.addEventListener("webkitTransitionEnd",this.removeAnimationEndListener_)},c.prototype.show=function(t){if(this.element_&&this.container_&&this.outline_){var e=this.element_.getBoundingClientRect().height,n=this.element_.getBoundingClientRect().width;this.container_.style.width=n+"px",this.container_.style.height=e+"px",this.outline_.style.width=n+"px",this.outline_.style.height=e+"px";for(var s=this.Constant_.TRANSITION_DURATION_SECONDS*this.Constant_.TRANSITION_DURATION_FRACTION,i=this.element_.querySelectorAll("."+this.CssClasses_.ITEM),r=0;r<i.length;r++){var o=null;o=this.element_.classList.contains(this.CssClasses_.TOP_LEFT)||this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)?(e-i[r].offsetTop-i[r].offsetHeight)/e*s+"s":i[r].offsetTop/e*s+"s",i[r].style.transitionDelay=o}this.applyClip_(e,n),window.requestAnimationFrame(function(){this.element_.classList.add(this.CssClasses_.IS_ANIMATING),this.element_.style.clip="rect(0 "+n+"px "+e+"px 0)",this.container_.classList.add(this.CssClasses_.IS_VISIBLE)}.bind(this)),this.addAnimationEndListener_();var a=function(e){e===t||this.closing_||e.target.parentNode===this.element_||(document.removeEventListener("click",a),this.hide())}.bind(this);document.addEventListener("click",a)}},c.prototype.show=c.prototype.show,c.prototype.hide=function(){if(this.element_&&this.container_&&this.outline_){for(var t=this.element_.querySelectorAll("."+this.CssClasses_.ITEM),e=0;e<t.length;e++)t[e].style.removeProperty("transition-delay");var n=this.element_.getBoundingClientRect(),s=n.height,i=n.width;this.element_.classList.add(this.CssClasses_.IS_ANIMATING),this.applyClip_(s,i),this.container_.classList.remove(this.CssClasses_.IS_VISIBLE),this.addAnimationEndListener_()}},c.prototype.hide=c.prototype.hide,c.prototype.toggle=function(t){this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)?this.hide():this.show(t)},c.prototype.toggle=c.prototype.toggle,n.register({constructor:c,classAsString:"MaterialMenu",cssClass:"mdl-js-menu",widget:!0});var u=function(t){this.element_=t,this.init()};window.MaterialProgress=u,u.prototype.Constant_={},u.prototype.CssClasses_={INDETERMINATE_CLASS:"mdl-progress__indeterminate"},u.prototype.setProgress=function(t){this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)||(this.progressbar_.style.width=t+"%")},u.prototype.setProgress=u.prototype.setProgress,u.prototype.setBuffer=function(t){this.bufferbar_.style.width=t+"%",this.auxbar_.style.width=100-t+"%"},u.prototype.setBuffer=u.prototype.setBuffer,u.prototype.init=function(){if(this.element_){var t=document.createElement("div");t.className="progressbar bar bar1",this.element_.appendChild(t),this.progressbar_=t,t=document.createElement("div"),t.className="bufferbar bar bar2",this.element_.appendChild(t),this.bufferbar_=t,t=document.createElement("div"),t.className="auxbar bar bar3",this.element_.appendChild(t),this.auxbar_=t,this.progressbar_.style.width="0%",this.bufferbar_.style.width="100%",this.auxbar_.style.width="0%",this.element_.classList.add("is-upgraded")}},n.register({constructor:u,classAsString:"MaterialProgress",cssClass:"mdl-js-progress",widget:!0});var d=function(t){this.element_=t,this.init()};window.MaterialRadio=d,d.prototype.Constant_={TINY_TIMEOUT:.001},d.prototype.CssClasses_={IS_FOCUSED:"is-focused",IS_DISABLED:"is-disabled",IS_CHECKED:"is-checked",IS_UPGRADED:"is-upgraded",JS_RADIO:"mdl-js-radio",RADIO_BTN:"mdl-radio__button",RADIO_OUTER_CIRCLE:"mdl-radio__outer-circle",RADIO_INNER_CIRCLE:"mdl-radio__inner-circle",RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",RIPPLE_CONTAINER:"mdl-radio__ripple-container",RIPPLE_CENTER:"mdl-ripple--center",RIPPLE:"mdl-ripple"},d.prototype.onChange_=function(t){for(var e=document.getElementsByClassName(this.CssClasses_.JS_RADIO),n=0;n<e.length;n++){var s=e[n].querySelector("."+this.CssClasses_.RADIO_BTN);s.getAttribute("name")===this.btnElement_.getAttribute("name")&&e[n].MaterialRadio.updateClasses_()}},d.prototype.onFocus_=function(t){this.element_.classList.add(this.CssClasses_.IS_FOCUSED)},d.prototype.onBlur_=function(t){this.element_.classList.remove(this.CssClasses_.IS_FOCUSED)},d.prototype.onMouseup_=function(t){this.blur_()},d.prototype.updateClasses_=function(){this.checkDisabled(),this.checkToggleState()},d.prototype.blur_=function(){window.setTimeout(function(){this.btnElement_.blur()}.bind(this),this.Constant_.TINY_TIMEOUT)},d.prototype.checkDisabled=function(){this.btnElement_.disabled?this.element_.classList.add(this.CssClasses_.IS_DISABLED):this.element_.classList.remove(this.CssClasses_.IS_DISABLED)},d.prototype.checkDisabled=d.prototype.checkDisabled,d.prototype.checkToggleState=function(){this.btnElement_.checked?this.element_.classList.add(this.CssClasses_.IS_CHECKED):this.element_.classList.remove(this.CssClasses_.IS_CHECKED)},d.prototype.checkToggleState=d.prototype.checkToggleState,d.prototype.disable=function(){this.btnElement_.disabled=!0,this.updateClasses_()},d.prototype.disable=d.prototype.disable,d.prototype.enable=function(){this.btnElement_.disabled=!1,this.updateClasses_()},d.prototype.enable=d.prototype.enable,d.prototype.check=function(){this.btnElement_.checked=!0,this.updateClasses_()},d.prototype.check=d.prototype.check,d.prototype.uncheck=function(){this.btnElement_.checked=!1,this.updateClasses_()},d.prototype.uncheck=d.prototype.uncheck,d.prototype.init=function(){if(this.element_){this.btnElement_=this.element_.querySelector("."+this.CssClasses_.RADIO_BTN),this.boundChangeHandler_=this.onChange_.bind(this),this.boundFocusHandler_=this.onChange_.bind(this),this.boundBlurHandler_=this.onBlur_.bind(this),this.boundMouseUpHandler_=this.onMouseup_.bind(this);var t=document.createElement("span");t.classList.add(this.CssClasses_.RADIO_OUTER_CIRCLE);var e=document.createElement("span");e.classList.add(this.CssClasses_.RADIO_INNER_CIRCLE),this.element_.appendChild(t),this.element_.appendChild(e);var n;if(this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)){this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),n=document.createElement("span"),n.classList.add(this.CssClasses_.RIPPLE_CONTAINER),n.classList.add(this.CssClasses_.RIPPLE_EFFECT),n.classList.add(this.CssClasses_.RIPPLE_CENTER),n.addEventListener("mouseup",this.boundMouseUpHandler_);var s=document.createElement("span");s.classList.add(this.CssClasses_.RIPPLE),n.appendChild(s),this.element_.appendChild(n)}this.btnElement_.addEventListener("change",this.boundChangeHandler_),this.btnElement_.addEventListener("focus",this.boundFocusHandler_),this.btnElement_.addEventListener("blur",this.boundBlurHandler_),this.element_.addEventListener("mouseup",this.boundMouseUpHandler_),this.updateClasses_(),this.element_.classList.add(this.CssClasses_.IS_UPGRADED)}},n.register({constructor:d,classAsString:"MaterialRadio",cssClass:"mdl-js-radio",widget:!0});var p=function(t){this.element_=t,this.isIE_=window.navigator.msPointerEnabled,this.init()};window.MaterialSlider=p,p.prototype.Constant_={},p.prototype.CssClasses_={IE_CONTAINER:"mdl-slider__ie-container",SLIDER_CONTAINER:"mdl-slider__container",BACKGROUND_FLEX:"mdl-slider__background-flex",BACKGROUND_LOWER:"mdl-slider__background-lower",BACKGROUND_UPPER:"mdl-slider__background-upper",IS_LOWEST_VALUE:"is-lowest-value",IS_UPGRADED:"is-upgraded"},p.prototype.onInput_=function(t){this.updateValueStyles_()},p.prototype.onChange_=function(t){this.updateValueStyles_()},p.prototype.onMouseUp_=function(t){t.target.blur()},p.prototype.onContainerMouseDown_=function(t){if(t.target===this.element_.parentElement){t.preventDefault();var e=new MouseEvent("mousedown",{target:t.target,buttons:t.buttons,clientX:t.clientX,clientY:this.element_.getBoundingClientRect().y});this.element_.dispatchEvent(e)}},p.prototype.updateValueStyles_=function(){var t=(this.element_.value-this.element_.min)/(this.element_.max-this.element_.min);0===t?this.element_.classList.add(this.CssClasses_.IS_LOWEST_VALUE):this.element_.classList.remove(this.CssClasses_.IS_LOWEST_VALUE),this.isIE_||(this.backgroundLower_.style.flex=t,this.backgroundLower_.style.webkitFlex=t,this.backgroundUpper_.style.flex=1-t,this.backgroundUpper_.style.webkitFlex=1-t)},p.prototype.disable=function(){this.element_.disabled=!0},p.prototype.disable=p.prototype.disable,p.prototype.enable=function(){this.element_.disabled=!1},p.prototype.enable=p.prototype.enable,p.prototype.change=function(t){"undefined"!=typeof t&&(this.element_.value=t),this.updateValueStyles_()},p.prototype.change=p.prototype.change,p.prototype.init=function(){if(this.element_){if(this.isIE_){var t=document.createElement("div");t.classList.add(this.CssClasses_.IE_CONTAINER),this.element_.parentElement.insertBefore(t,this.element_),this.element_.parentElement.removeChild(this.element_),t.appendChild(this.element_)}else{var e=document.createElement("div");e.classList.add(this.CssClasses_.SLIDER_CONTAINER),this.element_.parentElement.insertBefore(e,this.element_),this.element_.parentElement.removeChild(this.element_),e.appendChild(this.element_);var n=document.createElement("div");n.classList.add(this.CssClasses_.BACKGROUND_FLEX),e.appendChild(n),this.backgroundLower_=document.createElement("div"),this.backgroundLower_.classList.add(this.CssClasses_.BACKGROUND_LOWER),n.appendChild(this.backgroundLower_),this.backgroundUpper_=document.createElement("div"),this.backgroundUpper_.classList.add(this.CssClasses_.BACKGROUND_UPPER),n.appendChild(this.backgroundUpper_)}this.boundInputHandler=this.onInput_.bind(this),this.boundChangeHandler=this.onChange_.bind(this),this.boundMouseUpHandler=this.onMouseUp_.bind(this),this.boundContainerMouseDownHandler=this.onContainerMouseDown_.bind(this),this.element_.addEventListener("input",this.boundInputHandler),this.element_.addEventListener("change",this.boundChangeHandler),this.element_.addEventListener("mouseup",this.boundMouseUpHandler),this.element_.parentElement.addEventListener("mousedown",this.boundContainerMouseDownHandler),this.updateValueStyles_(),this.element_.classList.add(this.CssClasses_.IS_UPGRADED)}},n.register({constructor:p,classAsString:"MaterialSlider",cssClass:"mdl-js-slider",widget:!0});var f=function(t){if(this.element_=t,this.textElement_=this.element_.querySelector("."+this.cssClasses_.MESSAGE),this.actionElement_=this.element_.querySelector("."+this.cssClasses_.ACTION),!this.textElement_)throw new Error("There must be a message element for a snackbar.");if(!this.actionElement_)throw new Error("There must be an action element for a snackbar.");this.active=!1,this.actionHandler_=void 0,this.message_=void 0,
this.actionText_=void 0,this.queuedNotifications_=[],this.setActionHidden_(!0)};window.MaterialSnackbar=f,f.prototype.Constant_={ANIMATION_LENGTH:250},f.prototype.cssClasses_={SNACKBAR:"mdl-snackbar",MESSAGE:"mdl-snackbar__text",ACTION:"mdl-snackbar__action",ACTIVE:"mdl-snackbar--active"},f.prototype.displaySnackbar_=function(){this.element_.setAttribute("aria-hidden","true"),this.actionHandler_&&(this.actionElement_.textContent=this.actionText_,this.actionElement_.addEventListener("click",this.actionHandler_),this.setActionHidden_(!1)),this.textElement_.textContent=this.message_,this.element_.classList.add(this.cssClasses_.ACTIVE),this.element_.setAttribute("aria-hidden","false"),setTimeout(this.cleanup_.bind(this),this.timeout_)},f.prototype.showSnackbar=function(t){if(void 0===t)throw new Error("Please provide a data object with at least a message to display.");if(void 0===t.message)throw new Error("Please provide a message to be displayed.");if(t.actionHandler&&!t.actionText)throw new Error("Please provide action text with the handler.");this.active?this.queuedNotifications_.push(t):(this.active=!0,this.message_=t.message,t.timeout?this.timeout_=t.timeout:this.timeout_=2750,t.actionHandler&&(this.actionHandler_=t.actionHandler),t.actionText&&(this.actionText_=t.actionText),this.displaySnackbar_())},f.prototype.showSnackbar=f.prototype.showSnackbar,f.prototype.checkQueue_=function(){this.queuedNotifications_.length>0&&this.showSnackbar(this.queuedNotifications_.shift())},f.prototype.cleanup_=function(){this.element_.classList.remove(this.cssClasses_.ACTIVE),setTimeout(function(){this.element_.setAttribute("aria-hidden","true"),this.textElement_.textContent="",Boolean(this.actionElement_.getAttribute("aria-hidden"))||(this.setActionHidden_(!0),this.actionElement_.textContent="",this.actionElement_.removeEventListener("click",this.actionHandler_)),this.actionHandler_=void 0,this.message_=void 0,this.actionText_=void 0,this.active=!1,this.checkQueue_()}.bind(this),this.Constant_.ANIMATION_LENGTH)},f.prototype.setActionHidden_=function(t){t?this.actionElement_.setAttribute("aria-hidden","true"):this.actionElement_.removeAttribute("aria-hidden")},n.register({constructor:f,classAsString:"MaterialSnackbar",cssClass:"mdl-js-snackbar",widget:!0});var _=function(t){this.element_=t,this.init()};window.MaterialSpinner=_,_.prototype.Constant_={MDL_SPINNER_LAYER_COUNT:4},_.prototype.CssClasses_={MDL_SPINNER_LAYER:"mdl-spinner__layer",MDL_SPINNER_CIRCLE_CLIPPER:"mdl-spinner__circle-clipper",MDL_SPINNER_CIRCLE:"mdl-spinner__circle",MDL_SPINNER_GAP_PATCH:"mdl-spinner__gap-patch",MDL_SPINNER_LEFT:"mdl-spinner__left",MDL_SPINNER_RIGHT:"mdl-spinner__right"},_.prototype.createLayer=function(t){var e=document.createElement("div");e.classList.add(this.CssClasses_.MDL_SPINNER_LAYER),e.classList.add(this.CssClasses_.MDL_SPINNER_LAYER+"-"+t);var n=document.createElement("div");n.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER),n.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);var s=document.createElement("div");s.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);var i=document.createElement("div");i.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER),i.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);for(var r=[n,s,i],o=0;o<r.length;o++){var a=document.createElement("div");a.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE),r[o].appendChild(a)}e.appendChild(n),e.appendChild(s),e.appendChild(i),this.element_.appendChild(e)},_.prototype.createLayer=_.prototype.createLayer,_.prototype.stop=function(){this.element_.classList.remove("is-active")},_.prototype.stop=_.prototype.stop,_.prototype.start=function(){this.element_.classList.add("is-active")},_.prototype.start=_.prototype.start,_.prototype.init=function(){if(this.element_){for(var t=1;t<=this.Constant_.MDL_SPINNER_LAYER_COUNT;t++)this.createLayer(t);this.element_.classList.add("is-upgraded")}},n.register({constructor:_,classAsString:"MaterialSpinner",cssClass:"mdl-js-spinner",widget:!0});var m=function(t){this.element_=t,this.init()};window.MaterialSwitch=m,m.prototype.Constant_={TINY_TIMEOUT:.001},m.prototype.CssClasses_={INPUT:"mdl-switch__input",TRACK:"mdl-switch__track",THUMB:"mdl-switch__thumb",FOCUS_HELPER:"mdl-switch__focus-helper",RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",RIPPLE_CONTAINER:"mdl-switch__ripple-container",RIPPLE_CENTER:"mdl-ripple--center",RIPPLE:"mdl-ripple",IS_FOCUSED:"is-focused",IS_DISABLED:"is-disabled",IS_CHECKED:"is-checked"},m.prototype.onChange_=function(t){this.updateClasses_()},m.prototype.onFocus_=function(t){this.element_.classList.add(this.CssClasses_.IS_FOCUSED)},m.prototype.onBlur_=function(t){this.element_.classList.remove(this.CssClasses_.IS_FOCUSED)},m.prototype.onMouseUp_=function(t){this.blur_()},m.prototype.updateClasses_=function(){this.checkDisabled(),this.checkToggleState()},m.prototype.blur_=function(){window.setTimeout(function(){this.inputElement_.blur()}.bind(this),this.Constant_.TINY_TIMEOUT)},m.prototype.checkDisabled=function(){this.inputElement_.disabled?this.element_.classList.add(this.CssClasses_.IS_DISABLED):this.element_.classList.remove(this.CssClasses_.IS_DISABLED)},m.prototype.checkDisabled=m.prototype.checkDisabled,m.prototype.checkToggleState=function(){this.inputElement_.checked?this.element_.classList.add(this.CssClasses_.IS_CHECKED):this.element_.classList.remove(this.CssClasses_.IS_CHECKED)},m.prototype.checkToggleState=m.prototype.checkToggleState,m.prototype.disable=function(){this.inputElement_.disabled=!0,this.updateClasses_()},m.prototype.disable=m.prototype.disable,m.prototype.enable=function(){this.inputElement_.disabled=!1,this.updateClasses_()},m.prototype.enable=m.prototype.enable,m.prototype.on=function(){this.inputElement_.checked=!0,this.updateClasses_()},m.prototype.on=m.prototype.on,m.prototype.off=function(){this.inputElement_.checked=!1,this.updateClasses_()},m.prototype.off=m.prototype.off,m.prototype.init=function(){if(this.element_){this.inputElement_=this.element_.querySelector("."+this.CssClasses_.INPUT);var t=document.createElement("div");t.classList.add(this.CssClasses_.TRACK);var e=document.createElement("div");e.classList.add(this.CssClasses_.THUMB);var n=document.createElement("span");if(n.classList.add(this.CssClasses_.FOCUS_HELPER),e.appendChild(n),this.element_.appendChild(t),this.element_.appendChild(e),this.boundMouseUpHandler=this.onMouseUp_.bind(this),this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)){this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS),this.rippleContainerElement_=document.createElement("span"),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT),this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER),this.rippleContainerElement_.addEventListener("mouseup",this.boundMouseUpHandler);var s=document.createElement("span");s.classList.add(this.CssClasses_.RIPPLE),this.rippleContainerElement_.appendChild(s),this.element_.appendChild(this.rippleContainerElement_)}this.boundChangeHandler=this.onChange_.bind(this),this.boundFocusHandler=this.onFocus_.bind(this),this.boundBlurHandler=this.onBlur_.bind(this),this.inputElement_.addEventListener("change",this.boundChangeHandler),this.inputElement_.addEventListener("focus",this.boundFocusHandler),this.inputElement_.addEventListener("blur",this.boundBlurHandler),this.element_.addEventListener("mouseup",this.boundMouseUpHandler),this.updateClasses_(),this.element_.classList.add("is-upgraded")}},n.register({constructor:m,classAsString:"MaterialSwitch",cssClass:"mdl-js-switch",widget:!0});var v=function(t){this.element_=t,this.init()};window.MaterialTabs=v,v.prototype.Constant_={},v.prototype.CssClasses_={TAB_CLASS:"mdl-tabs__tab",PANEL_CLASS:"mdl-tabs__panel",ACTIVE_CLASS:"is-active",UPGRADED_CLASS:"is-upgraded",MDL_JS_RIPPLE_EFFECT:"mdl-js-ripple-effect",MDL_RIPPLE_CONTAINER:"mdl-tabs__ripple-container",MDL_RIPPLE:"mdl-ripple",MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events"},v.prototype.initTabs_=function(){this.element_.classList.contains(this.CssClasses_.MDL_JS_RIPPLE_EFFECT)&&this.element_.classList.add(this.CssClasses_.MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS),this.tabs_=this.element_.querySelectorAll("."+this.CssClasses_.TAB_CLASS),this.panels_=this.element_.querySelectorAll("."+this.CssClasses_.PANEL_CLASS);for(var e=0;e<this.tabs_.length;e++)new t(this.tabs_[e],this);this.element_.classList.add(this.CssClasses_.UPGRADED_CLASS)},v.prototype.resetTabState_=function(){for(var t=0;t<this.tabs_.length;t++)this.tabs_[t].classList.remove(this.CssClasses_.ACTIVE_CLASS)},v.prototype.resetPanelState_=function(){for(var t=0;t<this.panels_.length;t++)this.panels_[t].classList.remove(this.CssClasses_.ACTIVE_CLASS)},v.prototype.init=function(){this.element_&&this.initTabs_()},n.register({constructor:v,classAsString:"MaterialTabs",cssClass:"mdl-js-tabs"});var g=function(t){this.element_=t,this.maxRows=this.Constant_.NO_MAX_ROWS,this.init()};window.MaterialTextfield=g,g.prototype.Constant_={NO_MAX_ROWS:-1,MAX_ROWS_ATTRIBUTE:"maxrows"},g.prototype.CssClasses_={LABEL:"mdl-textfield__label",INPUT:"mdl-textfield__input",IS_DIRTY:"is-dirty",IS_FOCUSED:"is-focused",IS_DISABLED:"is-disabled",IS_INVALID:"is-invalid",IS_UPGRADED:"is-upgraded",HAS_PLACEHOLDER:"has-placeholder"},g.prototype.onKeyDown_=function(t){var e=t.target.value.split("\n").length;13===t.keyCode&&e>=this.maxRows&&t.preventDefault()},g.prototype.onFocus_=function(t){this.element_.classList.add(this.CssClasses_.IS_FOCUSED)},g.prototype.onBlur_=function(t){this.element_.classList.remove(this.CssClasses_.IS_FOCUSED)},g.prototype.onReset_=function(t){this.updateClasses_()},g.prototype.updateClasses_=function(){this.checkDisabled(),this.checkValidity(),this.checkDirty(),this.checkFocus()},g.prototype.checkDisabled=function(){this.input_.disabled?this.element_.classList.add(this.CssClasses_.IS_DISABLED):this.element_.classList.remove(this.CssClasses_.IS_DISABLED)},g.prototype.checkDisabled=g.prototype.checkDisabled,g.prototype.checkFocus=function(){Boolean(this.element_.querySelector(":focus"))?this.element_.classList.add(this.CssClasses_.IS_FOCUSED):this.element_.classList.remove(this.CssClasses_.IS_FOCUSED)},g.prototype.checkFocus=g.prototype.checkFocus,g.prototype.checkValidity=function(){this.input_.validity&&(this.input_.validity.valid?this.element_.classList.remove(this.CssClasses_.IS_INVALID):this.element_.classList.add(this.CssClasses_.IS_INVALID))},g.prototype.checkValidity=g.prototype.checkValidity,g.prototype.checkDirty=function(){this.input_.value&&this.input_.value.length>0?this.element_.classList.add(this.CssClasses_.IS_DIRTY):this.element_.classList.remove(this.CssClasses_.IS_DIRTY)},g.prototype.checkDirty=g.prototype.checkDirty,g.prototype.disable=function(){this.input_.disabled=!0,this.updateClasses_()},g.prototype.disable=g.prototype.disable,g.prototype.enable=function(){this.input_.disabled=!1,this.updateClasses_()},g.prototype.enable=g.prototype.enable,g.prototype.change=function(t){this.input_.value=t||"",this.updateClasses_()},g.prototype.change=g.prototype.change,g.prototype.init=function(){if(this.element_&&(this.label_=this.element_.querySelector("."+this.CssClasses_.LABEL),this.input_=this.element_.querySelector("."+this.CssClasses_.INPUT),this.input_)){this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE)&&(this.maxRows=parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE),10),isNaN(this.maxRows)&&(this.maxRows=this.Constant_.NO_MAX_ROWS)),this.input_.hasAttribute("placeholder")&&this.element_.classList.add(this.CssClasses_.HAS_PLACEHOLDER),this.boundUpdateClassesHandler=this.updateClasses_.bind(this),this.boundFocusHandler=this.onFocus_.bind(this),this.boundBlurHandler=this.onBlur_.bind(this),this.boundResetHandler=this.onReset_.bind(this),this.input_.addEventListener("input",this.boundUpdateClassesHandler),this.input_.addEventListener("focus",this.boundFocusHandler),this.input_.addEventListener("blur",this.boundBlurHandler),this.input_.addEventListener("reset",this.boundResetHandler),this.maxRows!==this.Constant_.NO_MAX_ROWS&&(this.boundKeyDownHandler=this.onKeyDown_.bind(this),this.input_.addEventListener("keydown",this.boundKeyDownHandler));var t=this.element_.classList.contains(this.CssClasses_.IS_INVALID);this.updateClasses_(),this.element_.classList.add(this.CssClasses_.IS_UPGRADED),t&&this.element_.classList.add(this.CssClasses_.IS_INVALID),this.input_.hasAttribute("autofocus")&&(this.element_.focus(),this.checkFocus())}},n.register({constructor:g,classAsString:"MaterialTextfield",cssClass:"mdl-js-textfield",widget:!0});var y=function(t){this.element_=t,this.init()};window.MaterialTooltip=y,y.prototype.Constant_={},y.prototype.CssClasses_={IS_ACTIVE:"is-active",BOTTOM:"mdl-tooltip--bottom",LEFT:"mdl-tooltip--left",RIGHT:"mdl-tooltip--right",TOP:"mdl-tooltip--top"},y.prototype.handleMouseEnter_=function(t){var e=t.target.getBoundingClientRect(),n=e.left+e.width/2,s=e.top+e.height/2,i=-1*(this.element_.offsetWidth/2),r=-1*(this.element_.offsetHeight/2);this.element_.classList.contains(this.CssClasses_.LEFT)||this.element_.classList.contains(this.CssClasses_.RIGHT)?(n=e.width/2,0>s+r?(this.element_.style.top=0,this.element_.style.marginTop=0):(this.element_.style.top=s+"px",this.element_.style.marginTop=r+"px")):0>n+i?(this.element_.style.left=0,this.element_.style.marginLeft=0):(this.element_.style.left=n+"px",this.element_.style.marginLeft=i+"px"),this.element_.classList.contains(this.CssClasses_.TOP)?this.element_.style.top=e.top-this.element_.offsetHeight-10+"px":this.element_.classList.contains(this.CssClasses_.RIGHT)?this.element_.style.left=e.left+e.width+10+"px":this.element_.classList.contains(this.CssClasses_.LEFT)?this.element_.style.left=e.left-this.element_.offsetWidth-10+"px":this.element_.style.top=e.top+e.height+10+"px",this.element_.classList.add(this.CssClasses_.IS_ACTIVE)},y.prototype.handleMouseLeave_=function(){this.element_.classList.remove(this.CssClasses_.IS_ACTIVE)},y.prototype.init=function(){if(this.element_){var t=this.element_.getAttribute("for");t&&(this.forElement_=document.getElementById(t)),this.forElement_&&(this.forElement_.hasAttribute("tabindex")||this.forElement_.setAttribute("tabindex","0"),this.boundMouseEnterHandler=this.handleMouseEnter_.bind(this),this.boundMouseLeaveHandler=this.handleMouseLeave_.bind(this),this.forElement_.addEventListener("mouseenter",this.boundMouseEnterHandler,!1),this.forElement_.addEventListener("touchend",this.boundMouseEnterHandler,!1),this.forElement_.addEventListener("mouseleave",this.boundMouseLeaveHandler,!1),window.addEventListener("touchstart",this.boundMouseLeaveHandler))}},n.register({constructor:y,classAsString:"MaterialTooltip",cssClass:"mdl-tooltip"});var C=function(t){this.element_=t,this.init()};window.MaterialLayout=C,C.prototype.Constant_={MAX_WIDTH:"(max-width: 1024px)",TAB_SCROLL_PIXELS:100,RESIZE_TIMEOUT:100,MENU_ICON:"&#xE5D2;",CHEVRON_LEFT:"chevron_left",CHEVRON_RIGHT:"chevron_right"},C.prototype.Keycodes_={ENTER:13,ESCAPE:27,SPACE:32},C.prototype.Mode_={STANDARD:0,SEAMED:1,WATERFALL:2,SCROLL:3},C.prototype.CssClasses_={CONTAINER:"mdl-layout__container",HEADER:"mdl-layout__header",DRAWER:"mdl-layout__drawer",CONTENT:"mdl-layout__content",DRAWER_BTN:"mdl-layout__drawer-button",ICON:"material-icons",JS_RIPPLE_EFFECT:"mdl-js-ripple-effect",RIPPLE_CONTAINER:"mdl-layout__tab-ripple-container",RIPPLE:"mdl-ripple",RIPPLE_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",HEADER_SEAMED:"mdl-layout__header--seamed",HEADER_WATERFALL:"mdl-layout__header--waterfall",HEADER_SCROLL:"mdl-layout__header--scroll",FIXED_HEADER:"mdl-layout--fixed-header",OBFUSCATOR:"mdl-layout__obfuscator",TAB_BAR:"mdl-layout__tab-bar",TAB_CONTAINER:"mdl-layout__tab-bar-container",TAB:"mdl-layout__tab",TAB_BAR_BUTTON:"mdl-layout__tab-bar-button",TAB_BAR_LEFT_BUTTON:"mdl-layout__tab-bar-left-button",TAB_BAR_RIGHT_BUTTON:"mdl-layout__tab-bar-right-button",PANEL:"mdl-layout__tab-panel",HAS_DRAWER:"has-drawer",HAS_TABS:"has-tabs",HAS_SCROLLING_HEADER:"has-scrolling-header",CASTING_SHADOW:"is-casting-shadow",IS_COMPACT:"is-compact",IS_SMALL_SCREEN:"is-small-screen",IS_DRAWER_OPEN:"is-visible",IS_ACTIVE:"is-active",IS_UPGRADED:"is-upgraded",IS_ANIMATING:"is-animating",ON_LARGE_SCREEN:"mdl-layout--large-screen-only",ON_SMALL_SCREEN:"mdl-layout--small-screen-only"},C.prototype.contentScrollHandler_=function(){if(!this.header_.classList.contains(this.CssClasses_.IS_ANIMATING)){var t=!this.element_.classList.contains(this.CssClasses_.IS_SMALL_SCREEN)||this.element_.classList.contains(this.CssClasses_.FIXED_HEADER);this.content_.scrollTop>0&&!this.header_.classList.contains(this.CssClasses_.IS_COMPACT)?(this.header_.classList.add(this.CssClasses_.CASTING_SHADOW),this.header_.classList.add(this.CssClasses_.IS_COMPACT),t&&this.header_.classList.add(this.CssClasses_.IS_ANIMATING)):this.content_.scrollTop<=0&&this.header_.classList.contains(this.CssClasses_.IS_COMPACT)&&(this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW),this.header_.classList.remove(this.CssClasses_.IS_COMPACT),t&&this.header_.classList.add(this.CssClasses_.IS_ANIMATING))}},C.prototype.keyboardEventHandler_=function(t){t.keyCode===this.Keycodes_.ESCAPE&&this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)&&this.toggleDrawer()},C.prototype.screenSizeHandler_=function(){this.screenSizeMediaQuery_.matches?this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN):(this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN),this.drawer_&&(this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN),this.obfuscator_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN)))},C.prototype.drawerToggleHandler_=function(t){if(t&&"keydown"===t.type){if(t.keyCode!==this.Keycodes_.SPACE&&t.keyCode!==this.Keycodes_.ENTER)return;t.preventDefault()}this.toggleDrawer()},C.prototype.headerTransitionEndHandler_=function(){this.header_.classList.remove(this.CssClasses_.IS_ANIMATING)},C.prototype.headerClickHandler_=function(){this.header_.classList.contains(this.CssClasses_.IS_COMPACT)&&(this.header_.classList.remove(this.CssClasses_.IS_COMPACT),this.header_.classList.add(this.CssClasses_.IS_ANIMATING))},C.prototype.resetTabState_=function(t){for(var e=0;e<t.length;e++)t[e].classList.remove(this.CssClasses_.IS_ACTIVE)},C.prototype.resetPanelState_=function(t){for(var e=0;e<t.length;e++)t[e].classList.remove(this.CssClasses_.IS_ACTIVE)},C.prototype.toggleDrawer=function(){var t=this.element_.querySelector("."+this.CssClasses_.DRAWER_BTN);this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN),this.obfuscator_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN),this.drawer_.classList.contains(this.CssClasses_.IS_DRAWER_OPEN)?(this.drawer_.setAttribute("aria-hidden","false"),t.setAttribute("aria-expanded","true")):(this.drawer_.setAttribute("aria-hidden","true"),t.setAttribute("aria-expanded","false"))},C.prototype.toggleDrawer=C.prototype.toggleDrawer,C.prototype.init=function(){if(this.element_){var t=document.createElement("div");t.classList.add(this.CssClasses_.CONTAINER);var n=this.element_.querySelector(":focus");this.element_.parentElement.insertBefore(t,this.element_),this.element_.parentElement.removeChild(this.element_),t.appendChild(this.element_),n&&n.focus();for(var s=this.element_.childNodes,i=s.length,r=0;i>r;r++){var o=s[r];o.classList&&o.classList.contains(this.CssClasses_.HEADER)&&(this.header_=o),o.classList&&o.classList.contains(this.CssClasses_.DRAWER)&&(this.drawer_=o),o.classList&&o.classList.contains(this.CssClasses_.CONTENT)&&(this.content_=o)}window.addEventListener("pageshow",function(t){t.persisted&&(this.element_.style.overflowY="hidden",requestAnimationFrame(function(){this.element_.style.overflowY=""}.bind(this)))}.bind(this),!1),this.header_&&(this.tabBar_=this.header_.querySelector("."+this.CssClasses_.TAB_BAR));var a=this.Mode_.STANDARD;if(this.header_&&(this.header_.classList.contains(this.CssClasses_.HEADER_SEAMED)?a=this.Mode_.SEAMED:this.header_.classList.contains(this.CssClasses_.HEADER_WATERFALL)?(a=this.Mode_.WATERFALL,this.header_.addEventListener("transitionend",this.headerTransitionEndHandler_.bind(this)),this.header_.addEventListener("click",this.headerClickHandler_.bind(this))):this.header_.classList.contains(this.CssClasses_.HEADER_SCROLL)&&(a=this.Mode_.SCROLL,t.classList.add(this.CssClasses_.HAS_SCROLLING_HEADER)),a===this.Mode_.STANDARD?(this.header_.classList.add(this.CssClasses_.CASTING_SHADOW),this.tabBar_&&this.tabBar_.classList.add(this.CssClasses_.CASTING_SHADOW)):a===this.Mode_.SEAMED||a===this.Mode_.SCROLL?(this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW),this.tabBar_&&this.tabBar_.classList.remove(this.CssClasses_.CASTING_SHADOW)):a===this.Mode_.WATERFALL&&(this.content_.addEventListener("scroll",this.contentScrollHandler_.bind(this)),this.contentScrollHandler_())),this.drawer_){var l=this.element_.querySelector("."+this.CssClasses_.DRAWER_BTN);if(!l){l=document.createElement("div"),l.setAttribute("aria-expanded","false"),l.setAttribute("role","button"),l.setAttribute("tabindex","0"),l.classList.add(this.CssClasses_.DRAWER_BTN);var h=document.createElement("i");h.classList.add(this.CssClasses_.ICON),h.innerHTML=this.Constant_.MENU_ICON,l.appendChild(h)}this.drawer_.classList.contains(this.CssClasses_.ON_LARGE_SCREEN)?l.classList.add(this.CssClasses_.ON_LARGE_SCREEN):this.drawer_.classList.contains(this.CssClasses_.ON_SMALL_SCREEN)&&l.classList.add(this.CssClasses_.ON_SMALL_SCREEN),l.addEventListener("click",this.drawerToggleHandler_.bind(this)),l.addEventListener("keydown",this.drawerToggleHandler_.bind(this)),this.element_.classList.add(this.CssClasses_.HAS_DRAWER),this.element_.classList.contains(this.CssClasses_.FIXED_HEADER)?this.header_.insertBefore(l,this.header_.firstChild):this.element_.insertBefore(l,this.content_);var c=document.createElement("div");c.classList.add(this.CssClasses_.OBFUSCATOR),this.element_.appendChild(c),c.addEventListener("click",this.drawerToggleHandler_.bind(this)),this.obfuscator_=c,this.drawer_.addEventListener("keydown",this.keyboardEventHandler_.bind(this)),this.drawer_.setAttribute("aria-hidden","true")}if(this.screenSizeMediaQuery_=window.matchMedia(this.Constant_.MAX_WIDTH),this.screenSizeMediaQuery_.addListener(this.screenSizeHandler_.bind(this)),this.screenSizeHandler_(),this.header_&&this.tabBar_){this.element_.classList.add(this.CssClasses_.HAS_TABS);var u=document.createElement("div");u.classList.add(this.CssClasses_.TAB_CONTAINER),this.header_.insertBefore(u,this.tabBar_),this.header_.removeChild(this.tabBar_);var d=document.createElement("div");d.classList.add(this.CssClasses_.TAB_BAR_BUTTON),d.classList.add(this.CssClasses_.TAB_BAR_LEFT_BUTTON);var p=document.createElement("i");p.classList.add(this.CssClasses_.ICON),p.textContent=this.Constant_.CHEVRON_LEFT,d.appendChild(p),d.addEventListener("click",function(){this.tabBar_.scrollLeft-=this.Constant_.TAB_SCROLL_PIXELS}.bind(this));var f=document.createElement("div");f.classList.add(this.CssClasses_.TAB_BAR_BUTTON),f.classList.add(this.CssClasses_.TAB_BAR_RIGHT_BUTTON);var _=document.createElement("i");_.classList.add(this.CssClasses_.ICON),_.textContent=this.Constant_.CHEVRON_RIGHT,f.appendChild(_),f.addEventListener("click",function(){this.tabBar_.scrollLeft+=this.Constant_.TAB_SCROLL_PIXELS}.bind(this)),u.appendChild(d),u.appendChild(this.tabBar_),u.appendChild(f);var m=function(){this.tabBar_.scrollLeft>0?d.classList.add(this.CssClasses_.IS_ACTIVE):d.classList.remove(this.CssClasses_.IS_ACTIVE),this.tabBar_.scrollLeft<this.tabBar_.scrollWidth-this.tabBar_.offsetWidth?f.classList.add(this.CssClasses_.IS_ACTIVE):f.classList.remove(this.CssClasses_.IS_ACTIVE)}.bind(this);this.tabBar_.addEventListener("scroll",m),m();var v=function(){this.resizeTimeoutId_&&clearTimeout(this.resizeTimeoutId_),this.resizeTimeoutId_=setTimeout(function(){m(),this.resizeTimeoutId_=null}.bind(this),this.Constant_.RESIZE_TIMEOUT)}.bind(this);window.addEventListener("resize",v),this.tabBar_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)&&this.tabBar_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);for(var g=this.tabBar_.querySelectorAll("."+this.CssClasses_.TAB),y=this.content_.querySelectorAll("."+this.CssClasses_.PANEL),C=0;C<g.length;C++)new e(g[C],g,y,this)}this.element_.classList.add(this.CssClasses_.IS_UPGRADED)}},window.MaterialLayoutTab=e,n.register({constructor:C,classAsString:"MaterialLayout",cssClass:"mdl-js-layout"});var b=function(t){this.element_=t,this.init()};window.MaterialDataTable=b,b.prototype.Constant_={},b.prototype.CssClasses_={DATA_TABLE:"mdl-data-table",SELECTABLE:"mdl-data-table--selectable",SELECT_ELEMENT:"mdl-data-table__select",IS_SELECTED:"is-selected",IS_UPGRADED:"is-upgraded"},b.prototype.selectRow_=function(t,e,n){return e?function(){t.checked?e.classList.add(this.CssClasses_.IS_SELECTED):e.classList.remove(this.CssClasses_.IS_SELECTED)}.bind(this):n?function(){var e,s;if(t.checked)for(e=0;e<n.length;e++)s=n[e].querySelector("td").querySelector(".mdl-checkbox"),s.MaterialCheckbox.check(),n[e].classList.add(this.CssClasses_.IS_SELECTED);else for(e=0;e<n.length;e++)s=n[e].querySelector("td").querySelector(".mdl-checkbox"),s.MaterialCheckbox.uncheck(),n[e].classList.remove(this.CssClasses_.IS_SELECTED)}.bind(this):void 0},b.prototype.createCheckbox_=function(t,e){var s=document.createElement("label"),i=["mdl-checkbox","mdl-js-checkbox","mdl-js-ripple-effect",this.CssClasses_.SELECT_ELEMENT];s.className=i.join(" ");var r=document.createElement("input");return r.type="checkbox",r.classList.add("mdl-checkbox__input"),t?(r.checked=t.classList.contains(this.CssClasses_.IS_SELECTED),r.addEventListener("change",this.selectRow_(r,t))):e&&r.addEventListener("change",this.selectRow_(r,null,e)),s.appendChild(r),n.upgradeElement(s,"MaterialCheckbox"),s},b.prototype.init=function(){if(this.element_){var t=this.element_.querySelector("th"),e=Array.prototype.slice.call(this.element_.querySelectorAll("tbody tr")),n=Array.prototype.slice.call(this.element_.querySelectorAll("tfoot tr")),s=e.concat(n);if(this.element_.classList.contains(this.CssClasses_.SELECTABLE)){var i=document.createElement("th"),r=this.createCheckbox_(null,s);i.appendChild(r),t.parentElement.insertBefore(i,t);for(var o=0;o<s.length;o++){var a=s[o].querySelector("td");if(a){var l=document.createElement("td");if("TBODY"===s[o].parentNode.nodeName.toUpperCase()){var h=this.createCheckbox_(s[o]);l.appendChild(h)}s[o].insertBefore(l,a)}}this.element_.classList.add(this.CssClasses_.IS_UPGRADED)}}},n.register({constructor:b,classAsString:"MaterialDataTable",cssClass:"mdl-js-data-table"});var E=function(t){this.element_=t,this.init()};window.MaterialRipple=E,E.prototype.Constant_={INITIAL_SCALE:"scale(0.0001, 0.0001)",INITIAL_SIZE:"1px",INITIAL_OPACITY:"0.4",FINAL_OPACITY:"0",FINAL_SCALE:""},E.prototype.CssClasses_={RIPPLE_CENTER:"mdl-ripple--center",RIPPLE_EFFECT_IGNORE_EVENTS:"mdl-js-ripple-effect--ignore-events",RIPPLE:"mdl-ripple",IS_ANIMATING:"is-animating",IS_VISIBLE:"is-visible"},E.prototype.downHandler_=function(t){if(!this.rippleElement_.style.width&&!this.rippleElement_.style.height){var e=this.element_.getBoundingClientRect();this.boundHeight=e.height,this.boundWidth=e.width,this.rippleSize_=2*Math.sqrt(e.width*e.width+e.height*e.height)+2,this.rippleElement_.style.width=this.rippleSize_+"px",this.rippleElement_.style.height=this.rippleSize_+"px"}if(this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE),"mousedown"===t.type&&this.ignoringMouseDown_)this.ignoringMouseDown_=!1;else{"touchstart"===t.type&&(this.ignoringMouseDown_=!0);var n=this.getFrameCount();if(n>0)return;this.setFrameCount(1);var s,i,r=t.currentTarget.getBoundingClientRect();if(0===t.clientX&&0===t.clientY)s=Math.round(r.width/2),i=Math.round(r.height/2);else{var o=t.clientX?t.clientX:t.touches[0].clientX,a=t.clientY?t.clientY:t.touches[0].clientY;s=Math.round(o-r.left),i=Math.round(a-r.top)}this.setRippleXY(s,i),this.setRippleStyles(!0),window.requestAnimationFrame(this.animFrameHandler.bind(this))}},E.prototype.upHandler_=function(t){t&&2!==t.detail&&window.setTimeout(function(){this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE)}.bind(this),0)},E.prototype.init=function(){if(this.element_){var t=this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER);this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS)||(this.rippleElement_=this.element_.querySelector("."+this.CssClasses_.RIPPLE),this.frameCount_=0,this.rippleSize_=0,this.x_=0,this.y_=0,this.ignoringMouseDown_=!1,this.boundDownHandler=this.downHandler_.bind(this),this.element_.addEventListener("mousedown",this.boundDownHandler),this.element_.addEventListener("touchstart",this.boundDownHandler),this.boundUpHandler=this.upHandler_.bind(this),this.element_.addEventListener("mouseup",this.boundUpHandler),this.element_.addEventListener("mouseleave",this.boundUpHandler),this.element_.addEventListener("touchend",this.boundUpHandler),this.element_.addEventListener("blur",this.boundUpHandler),this.getFrameCount=function(){return this.frameCount_},this.setFrameCount=function(t){this.frameCount_=t},this.getRippleElement=function(){return this.rippleElement_},this.setRippleXY=function(t,e){this.x_=t,this.y_=e},this.setRippleStyles=function(e){if(null!==this.rippleElement_){var n,s,i,r="translate("+this.x_+"px, "+this.y_+"px)";e?(s=this.Constant_.INITIAL_SCALE,i=this.Constant_.INITIAL_SIZE):(s=this.Constant_.FINAL_SCALE,i=this.rippleSize_+"px",t&&(r="translate("+this.boundWidth/2+"px, "+this.boundHeight/2+"px)")),n="translate(-50%, -50%) "+r+s,this.rippleElement_.style.webkitTransform=n,this.rippleElement_.style.msTransform=n,this.rippleElement_.style.transform=n,e?this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING):this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING)}},this.animFrameHandler=function(){this.frameCount_-- >0?window.requestAnimationFrame(this.animFrameHandler.bind(this)):this.setRippleStyles(!1)})}},n.register({constructor:E,classAsString:"MaterialRipple",cssClass:"mdl-js-ripple-effect",widget:!1})}()},{}],2:[function(t,e,n){!function(s,i){"function"==typeof define&&define.amd?define(["moment"],function(t){return s.DateRange=i(t)}):"object"==typeof n?e.exports=i(t("moment")):s.DateRange=i(moment)}(this,function(t){function e(e,n){var s,i=e,r=n;1!==arguments.length&&void 0!==n||("object"==typeof e&&2===e.length?(i=e[0],r=e[1]):"string"==typeof e&&(s=e.split("/"),i=s[0],r=s[1])),this.start=t(null===i?-864e13:i),this.end=t(null===r?864e13:r)}function n(e,n,s){for(var i=t(this.start);this.contains(i,s);)n.call(this,i.clone()),i.add(1,e)}function s(e,n,s){var i=this/e,r=Math.floor(i);if(r!==1/0){r===i&&s&&r--;for(var o=0;o<=r;o++)n.call(this,t(this.start.valueOf()+e.valueOf()*o))}}var i={year:!0,month:!0,week:!0,day:!0,hour:!0,minute:!0,second:!0};return e.prototype.constructor=e,e.prototype.clone=function(){return t().range(this.start,this.end)},e.prototype.contains=function(t,n){var s=this.start,i=this.end;return t instanceof e?s<=t.start&&(i>t.end||i.isSame(t.end)&&!n):s<=t&&(i>t||i.isSame(t)&&!n)},e.prototype.overlaps=function(t){return null!==this.intersect(t)},e.prototype.intersect=function(t){var n=this.start,s=this.end;return n<=t.start&&t.start<s&&s<t.end?new e(t.start,s):t.start<n&&n<t.end&&t.end<=s?new e(n,t.end):t.start<n&&n<=s&&s<t.end?this:n<=t.start&&t.start<=t.end&&t.end<=s?t:null},e.prototype.add=function(n){return this.overlaps(n)?new e(t.min(this.start,n.start),t.max(this.end,n.end)):null},e.prototype.subtract=function(t){var n=this.start,s=this.end;return null===this.intersect(t)?[this]:t.start<=n&&n<s&&s<=t.end?[]:t.start<=n&&n<t.end&&t.end<s?[new e(t.end,s)]:n<t.start&&t.start<s&&s<=t.end?[new e(n,t.start)]:n<t.start&&t.start<t.end&&t.end<s?[new e(n,t.start),new e(t.end,s)]:n<t.start&&t.start<s&&t.end<s?[new e(n,t.start),new e(t.start,s)]:void 0;
},e.prototype.toArray=function(t,e){var n=[];return this.by(t,function(t){n.push(t)},e),n},e.prototype.by=function(t,e,i){return"string"==typeof t?n.call(this,t,e,i):s.call(this,t,e,i),this},e.prototype.toString=function(){return this.start.format()+"/"+this.end.format()},e.prototype.valueOf=function(){return this.end-this.start},e.prototype.center=function(){var e=this.start+this.diff()/2;return t(e)},e.prototype.toDate=function(){return[this.start.toDate(),this.end.toDate()]},e.prototype.isSame=function(t){return this.start.isSame(t.start)&&this.end.isSame(t.end)},e.prototype.diff=function(t){return this.end.diff(this.start,t)},t.range=function(n,s){return n in i?new e(t(this).startOf(n),t(this).endOf(n)):new e(n,s)},t.range.constructor=e,t.fn.range=t.range,t.fn.within=function(t){return t.contains(this._d)},e})},{moment:3}],3:[function(t,e,n){!function(t,s){"object"==typeof n&&"undefined"!=typeof e?e.exports=s():"function"==typeof define&&define.amd?define(s):t.moment=s()}(this,function(){"use strict";function n(){return ls.apply(null,arguments)}function s(t){ls=t}function i(t){return t instanceof Array||"[object Array]"===Object.prototype.toString.call(t)}function r(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function o(t,e){var n,s=[];for(n=0;n<t.length;++n)s.push(e(t[n],n));return s}function a(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function l(t,e){for(var n in e)a(e,n)&&(t[n]=e[n]);return a(e,"toString")&&(t.toString=e.toString),a(e,"valueOf")&&(t.valueOf=e.valueOf),t}function h(t,e,n,s){return Ht(t,e,n,s,!0).utc()}function c(){return{empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null}}function u(t){return null==t._pf&&(t._pf=c()),t._pf}function d(t){if(null==t._isValid){var e=u(t),n=hs.call(e.parsedDateParts,function(t){return null!=t});t._isValid=!isNaN(t._d.getTime())&&e.overflow<0&&!e.empty&&!e.invalidMonth&&!e.invalidWeekday&&!e.nullInput&&!e.invalidFormat&&!e.userInvalidated&&(!e.meridiem||e.meridiem&&n),t._strict&&(t._isValid=t._isValid&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour)}return t._isValid}function p(t){var e=h(NaN);return null!=t?l(u(e),t):u(e).userInvalidated=!0,e}function f(t){return void 0===t}function _(t,e){var n,s,i;if(f(e._isAMomentObject)||(t._isAMomentObject=e._isAMomentObject),f(e._i)||(t._i=e._i),f(e._f)||(t._f=e._f),f(e._l)||(t._l=e._l),f(e._strict)||(t._strict=e._strict),f(e._tzm)||(t._tzm=e._tzm),f(e._isUTC)||(t._isUTC=e._isUTC),f(e._offset)||(t._offset=e._offset),f(e._pf)||(t._pf=u(e)),f(e._locale)||(t._locale=e._locale),cs.length>0)for(n in cs)s=cs[n],i=e[s],f(i)||(t[s]=i);return t}function m(t){_(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),us===!1&&(us=!0,n.updateOffset(this),us=!1)}function v(t){return t instanceof m||null!=t&&null!=t._isAMomentObject}function g(t){return t<0?Math.ceil(t):Math.floor(t)}function y(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=g(e)),n}function C(t,e,n){var s,i=Math.min(t.length,e.length),r=Math.abs(t.length-e.length),o=0;for(s=0;s<i;s++)(n&&t[s]!==e[s]||!n&&y(t[s])!==y(e[s]))&&o++;return o+r}function b(t){n.suppressDeprecationWarnings===!1&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function E(t,e){var s=!0;return l(function(){return null!=n.deprecationHandler&&n.deprecationHandler(null,t),s&&(b(t+"\nArguments: "+Array.prototype.slice.call(arguments).join(", ")+"\n"+(new Error).stack),s=!1),e.apply(this,arguments)},e)}function w(t,e){null!=n.deprecationHandler&&n.deprecationHandler(t,e),ds[t]||(b(e),ds[t]=!0)}function S(t){return t instanceof Function||"[object Function]"===Object.prototype.toString.call(t)}function L(t){return"[object Object]"===Object.prototype.toString.call(t)}function T(t){var e,n;for(n in t)e=t[n],S(e)?this[n]=e:this["_"+n]=e;this._config=t,this._ordinalParseLenient=new RegExp(this._ordinalParse.source+"|"+/\d{1,2}/.source)}function A(t,e){var n,s=l({},t);for(n in e)a(e,n)&&(L(t[n])&&L(e[n])?(s[n]={},l(s[n],t[n]),l(s[n],e[n])):null!=e[n]?s[n]=e[n]:delete s[n]);return s}function I(t){null!=t&&this.set(t)}function k(t){return t?t.toLowerCase().replace("_","-"):t}function O(t){for(var e,n,s,i,r=0;r<t.length;){for(i=k(t[r]).split("-"),e=i.length,n=k(t[r+1]),n=n?n.split("-"):null;e>0;){if(s=D(i.slice(0,e).join("-")))return s;if(n&&n.length>=e&&C(i,n,!0)>=e-1)break;e--}r++}return null}function D(n){var s=null;if(!ms[n]&&"undefined"!=typeof e&&e&&e.exports)try{s=fs._abbr,t("./locale/"+n),N(s)}catch(i){}return ms[n]}function N(t,e){var n;return t&&(n=f(e)?M(t):R(t,e),n&&(fs=n)),fs._abbr}function R(t,e){return null!==e?(e.abbr=t,null!=ms[t]?(w("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale"),e=A(ms[t]._config,e)):null!=e.parentLocale&&(null!=ms[e.parentLocale]?e=A(ms[e.parentLocale]._config,e):w("parentLocaleUndefined","specified parentLocale is not defined yet")),ms[t]=new I(e),N(t),ms[t]):(delete ms[t],null)}function x(t,e){if(null!=e){var n;null!=ms[t]&&(e=A(ms[t]._config,e)),n=new I(e),n.parentLocale=ms[t],ms[t]=n,N(t)}else null!=ms[t]&&(null!=ms[t].parentLocale?ms[t]=ms[t].parentLocale:null!=ms[t]&&delete ms[t]);return ms[t]}function M(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return fs;if(!i(t)){if(e=D(t))return e;t=[t]}return O(t)}function P(){return ps(ms)}function H(t,e){var n=t.toLowerCase();vs[n]=vs[n+"s"]=vs[e]=t}function $(t){return"string"==typeof t?vs[t]||vs[t.toLowerCase()]:void 0}function F(t){var e,n,s={};for(n in t)a(t,n)&&(e=$(n),e&&(s[e]=t[n]));return s}function U(t,e){return function(s){return null!=s?(j(this,t,s),n.updateOffset(this,e),this):V(this,t)}}function V(t,e){return t.isValid()?t._d["get"+(t._isUTC?"UTC":"")+e]():NaN}function j(t,e,n){t.isValid()&&t._d["set"+(t._isUTC?"UTC":"")+e](n)}function B(t,e){var n;if("object"==typeof t)for(n in t)this.set(n,t[n]);else if(t=$(t),S(this[t]))return this[t](e);return this}function Y(t,e,n){var s=""+Math.abs(t),i=e-s.length,r=t>=0;return(r?n?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+s}function W(t,e,n,s){var i=s;"string"==typeof s&&(i=function(){return this[s]()}),t&&(bs[t]=i),e&&(bs[e[0]]=function(){return Y(i.apply(this,arguments),e[1],e[2])}),n&&(bs[n]=function(){return this.localeData().ordinal(i.apply(this,arguments),t)})}function G(t){return t.match(/\[[\s\S]/)?t.replace(/^\[|\]$/g,""):t.replace(/\\/g,"")}function q(t){var e,n,s=t.match(gs);for(e=0,n=s.length;e<n;e++)bs[s[e]]?s[e]=bs[s[e]]:s[e]=G(s[e]);return function(e){var i,r="";for(i=0;i<n;i++)r+=s[i]instanceof Function?s[i].call(e,t):s[i];return r}}function z(t,e){return t.isValid()?(e=K(e,t.localeData()),Cs[e]=Cs[e]||q(e),Cs[e](t)):t.localeData().invalidDate()}function K(t,e){function n(t){return e.longDateFormat(t)||t}var s=5;for(ys.lastIndex=0;s>=0&&ys.test(t);)t=t.replace(ys,n),ys.lastIndex=0,s-=1;return t}function J(t,e,n){Fs[t]=S(e)?e:function(t,s){return t&&n?n:e}}function X(t,e){return a(Fs,t)?Fs[t](e._strict,e._locale):new RegExp(Z(t))}function Z(t){return Q(t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,s,i){return e||n||s||i}))}function Q(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function tt(t,e){var n,s=e;for("string"==typeof t&&(t=[t]),"number"==typeof e&&(s=function(t,n){n[e]=y(t)}),n=0;n<t.length;n++)Us[t[n]]=s}function et(t,e){tt(t,function(t,n,s,i){s._w=s._w||{},e(t,s._w,s,i)})}function nt(t,e,n){null!=e&&a(Us,t)&&Us[t](e,n._a,n,t)}function st(t,e){return new Date(Date.UTC(t,e+1,0)).getUTCDate()}function it(t,e){return i(this._months)?this._months[t.month()]:this._months[Js.test(e)?"format":"standalone"][t.month()]}function rt(t,e){return i(this._monthsShort)?this._monthsShort[t.month()]:this._monthsShort[Js.test(e)?"format":"standalone"][t.month()]}function ot(t,e,n){var s,i,r,o=t.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],s=0;s<12;++s)r=h([2e3,s]),this._shortMonthsParse[s]=this.monthsShort(r,"").toLocaleLowerCase(),this._longMonthsParse[s]=this.months(r,"").toLocaleLowerCase();return n?"MMM"===e?(i=_s.call(this._shortMonthsParse,o),i!==-1?i:null):(i=_s.call(this._longMonthsParse,o),i!==-1?i:null):"MMM"===e?(i=_s.call(this._shortMonthsParse,o),i!==-1?i:(i=_s.call(this._longMonthsParse,o),i!==-1?i:null)):(i=_s.call(this._longMonthsParse,o),i!==-1?i:(i=_s.call(this._shortMonthsParse,o),i!==-1?i:null))}function at(t,e,n){var s,i,r;if(this._monthsParseExact)return ot.call(this,t,e,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),s=0;s<12;s++){if(i=h([2e3,s]),n&&!this._longMonthsParse[s]&&(this._longMonthsParse[s]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[s]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[s]||(r="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[s]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[s].test(t))return s;if(n&&"MMM"===e&&this._shortMonthsParse[s].test(t))return s;if(!n&&this._monthsParse[s].test(t))return s}}function lt(t,e){var n;if(!t.isValid())return t;if("string"==typeof e)if(/^\d+$/.test(e))e=y(e);else if(e=t.localeData().monthsParse(e),"number"!=typeof e)return t;return n=Math.min(t.date(),st(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t}function ht(t){return null!=t?(lt(this,t),n.updateOffset(this,!0),this):V(this,"Month")}function ct(){return st(this.year(),this.month())}function ut(t){return this._monthsParseExact?(a(this,"_monthsRegex")||pt.call(this),t?this._monthsShortStrictRegex:this._monthsShortRegex):this._monthsShortStrictRegex&&t?this._monthsShortStrictRegex:this._monthsShortRegex}function dt(t){return this._monthsParseExact?(a(this,"_monthsRegex")||pt.call(this),t?this._monthsStrictRegex:this._monthsRegex):this._monthsStrictRegex&&t?this._monthsStrictRegex:this._monthsRegex}function pt(){function t(t,e){return e.length-t.length}var e,n,s=[],i=[],r=[];for(e=0;e<12;e++)n=h([2e3,e]),s.push(this.monthsShort(n,"")),i.push(this.months(n,"")),r.push(this.months(n,"")),r.push(this.monthsShort(n,""));for(s.sort(t),i.sort(t),r.sort(t),e=0;e<12;e++)s[e]=Q(s[e]),i[e]=Q(i[e]),r[e]=Q(r[e]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+s.join("|")+")","i")}function ft(t){var e,n=t._a;return n&&u(t).overflow===-2&&(e=n[js]<0||n[js]>11?js:n[Bs]<1||n[Bs]>st(n[Vs],n[js])?Bs:n[Ys]<0||n[Ys]>24||24===n[Ys]&&(0!==n[Ws]||0!==n[Gs]||0!==n[qs])?Ys:n[Ws]<0||n[Ws]>59?Ws:n[Gs]<0||n[Gs]>59?Gs:n[qs]<0||n[qs]>999?qs:-1,u(t)._overflowDayOfYear&&(e<Vs||e>Bs)&&(e=Bs),u(t)._overflowWeeks&&e===-1&&(e=zs),u(t)._overflowWeekday&&e===-1&&(e=Ks),u(t).overflow=e),t}function _t(t){var e,n,s,i,r,o,a=t._i,l=ei.exec(a)||ni.exec(a);if(l){for(u(t).iso=!0,e=0,n=ii.length;e<n;e++)if(ii[e][1].exec(l[1])){i=ii[e][0],s=ii[e][2]!==!1;break}if(null==i)return void(t._isValid=!1);if(l[3]){for(e=0,n=ri.length;e<n;e++)if(ri[e][1].exec(l[3])){r=(l[2]||" ")+ri[e][0];break}if(null==r)return void(t._isValid=!1)}if(!s&&null!=r)return void(t._isValid=!1);if(l[4]){if(!si.exec(l[4]))return void(t._isValid=!1);o="Z"}t._f=i+(r||"")+(o||""),Ot(t)}else t._isValid=!1}function mt(t){var e=oi.exec(t._i);return null!==e?void(t._d=new Date((+e[1]))):(_t(t),void(t._isValid===!1&&(delete t._isValid,n.createFromInputFallback(t))))}function vt(t,e,n,s,i,r,o){var a=new Date(t,e,n,s,i,r,o);return t<100&&t>=0&&isFinite(a.getFullYear())&&a.setFullYear(t),a}function gt(t){var e=new Date(Date.UTC.apply(null,arguments));return t<100&&t>=0&&isFinite(e.getUTCFullYear())&&e.setUTCFullYear(t),e}function yt(t){return Ct(t)?366:365}function Ct(t){return t%4===0&&t%100!==0||t%400===0}function bt(){return Ct(this.year())}function Et(t,e,n){var s=7+e-n,i=(7+gt(t,0,s).getUTCDay()-e)%7;return-i+s-1}function wt(t,e,n,s,i){var r,o,a=(7+n-s)%7,l=Et(t,s,i),h=1+7*(e-1)+a+l;return h<=0?(r=t-1,o=yt(r)+h):h>yt(t)?(r=t+1,o=h-yt(t)):(r=t,o=h),{year:r,dayOfYear:o}}function St(t,e,n){var s,i,r=Et(t.year(),e,n),o=Math.floor((t.dayOfYear()-r-1)/7)+1;return o<1?(i=t.year()-1,s=o+Lt(i,e,n)):o>Lt(t.year(),e,n)?(s=o-Lt(t.year(),e,n),i=t.year()+1):(i=t.year(),s=o),{week:s,year:i}}function Lt(t,e,n){var s=Et(t,e,n),i=Et(t+1,e,n);return(yt(t)-s+i)/7}function Tt(t,e,n){return null!=t?t:null!=e?e:n}function At(t){var e=new Date(n.now());return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}function It(t){var e,n,s,i,r=[];if(!t._d){for(s=At(t),t._w&&null==t._a[Bs]&&null==t._a[js]&&kt(t),t._dayOfYear&&(i=Tt(t._a[Vs],s[Vs]),t._dayOfYear>yt(i)&&(u(t)._overflowDayOfYear=!0),n=gt(i,0,t._dayOfYear),t._a[js]=n.getUTCMonth(),t._a[Bs]=n.getUTCDate()),e=0;e<3&&null==t._a[e];++e)t._a[e]=r[e]=s[e];for(;e<7;e++)t._a[e]=r[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[Ys]&&0===t._a[Ws]&&0===t._a[Gs]&&0===t._a[qs]&&(t._nextDay=!0,t._a[Ys]=0),t._d=(t._useUTC?gt:vt).apply(null,r),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[Ys]=24)}}function kt(t){var e,n,s,i,r,o,a,l;e=t._w,null!=e.GG||null!=e.W||null!=e.E?(r=1,o=4,n=Tt(e.GG,t._a[Vs],St($t(),1,4).year),s=Tt(e.W,1),i=Tt(e.E,1),(i<1||i>7)&&(l=!0)):(r=t._locale._week.dow,o=t._locale._week.doy,n=Tt(e.gg,t._a[Vs],St($t(),r,o).year),s=Tt(e.w,1),null!=e.d?(i=e.d,(i<0||i>6)&&(l=!0)):null!=e.e?(i=e.e+r,(e.e<0||e.e>6)&&(l=!0)):i=r),s<1||s>Lt(n,r,o)?u(t)._overflowWeeks=!0:null!=l?u(t)._overflowWeekday=!0:(a=wt(n,s,i,r,o),t._a[Vs]=a.year,t._dayOfYear=a.dayOfYear)}function Ot(t){if(t._f===n.ISO_8601)return void _t(t);t._a=[],u(t).empty=!0;var e,s,i,r,o,a=""+t._i,l=a.length,h=0;for(i=K(t._f,t._locale).match(gs)||[],e=0;e<i.length;e++)r=i[e],s=(a.match(X(r,t))||[])[0],s&&(o=a.substr(0,a.indexOf(s)),o.length>0&&u(t).unusedInput.push(o),a=a.slice(a.indexOf(s)+s.length),h+=s.length),bs[r]?(s?u(t).empty=!1:u(t).unusedTokens.push(r),nt(r,s,t)):t._strict&&!s&&u(t).unusedTokens.push(r);u(t).charsLeftOver=l-h,a.length>0&&u(t).unusedInput.push(a),u(t).bigHour===!0&&t._a[Ys]<=12&&t._a[Ys]>0&&(u(t).bigHour=void 0),u(t).parsedDateParts=t._a.slice(0),u(t).meridiem=t._meridiem,t._a[Ys]=Dt(t._locale,t._a[Ys],t._meridiem),It(t),ft(t)}function Dt(t,e,n){var s;return null==n?e:null!=t.meridiemHour?t.meridiemHour(e,n):null!=t.isPM?(s=t.isPM(n),s&&e<12&&(e+=12),s||12!==e||(e=0),e):e}function Nt(t){var e,n,s,i,r;if(0===t._f.length)return u(t).invalidFormat=!0,void(t._d=new Date(NaN));for(i=0;i<t._f.length;i++)r=0,e=_({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[i],Ot(e),d(e)&&(r+=u(e).charsLeftOver,r+=10*u(e).unusedTokens.length,u(e).score=r,(null==s||r<s)&&(s=r,n=e));l(t,n||e)}function Rt(t){if(!t._d){var e=F(t._i);t._a=o([e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],function(t){return t&&parseInt(t,10)}),It(t)}}function xt(t){var e=new m(ft(Mt(t)));return e._nextDay&&(e.add(1,"d"),e._nextDay=void 0),e}function Mt(t){var e=t._i,n=t._f;return t._locale=t._locale||M(t._l),null===e||void 0===n&&""===e?p({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),v(e)?new m(ft(e)):(i(n)?Nt(t):n?Ot(t):r(e)?t._d=e:Pt(t),d(t)||(t._d=null),t))}function Pt(t){var e=t._i;void 0===e?t._d=new Date(n.now()):r(e)?t._d=new Date(e.valueOf()):"string"==typeof e?mt(t):i(e)?(t._a=o(e.slice(0),function(t){return parseInt(t,10)}),It(t)):"object"==typeof e?Rt(t):"number"==typeof e?t._d=new Date(e):n.createFromInputFallback(t)}function Ht(t,e,n,s,i){var r={};return"boolean"==typeof n&&(s=n,n=void 0),r._isAMomentObject=!0,r._useUTC=r._isUTC=i,r._l=n,r._i=t,r._f=e,r._strict=s,xt(r)}function $t(t,e,n,s){return Ht(t,e,n,s,!1)}function Ft(t,e){var n,s;if(1===e.length&&i(e[0])&&(e=e[0]),!e.length)return $t();for(n=e[0],s=1;s<e.length;++s)e[s].isValid()&&!e[s][t](n)||(n=e[s]);return n}function Ut(){var t=[].slice.call(arguments,0);return Ft("isBefore",t)}function Vt(){var t=[].slice.call(arguments,0);return Ft("isAfter",t)}function jt(t){var e=F(t),n=e.year||0,s=e.quarter||0,i=e.month||0,r=e.week||0,o=e.day||0,a=e.hour||0,l=e.minute||0,h=e.second||0,c=e.millisecond||0;this._milliseconds=+c+1e3*h+6e4*l+1e3*a*60*60,this._days=+o+7*r,this._months=+i+3*s+12*n,this._data={},this._locale=M(),this._bubble()}function Bt(t){return t instanceof jt}function Yt(t,e){W(t,0,0,function(){var t=this.utcOffset(),n="+";return t<0&&(t=-t,n="-"),n+Y(~~(t/60),2)+e+Y(~~t%60,2)})}function Wt(t,e){var n=(e||"").match(t)||[],s=n[n.length-1]||[],i=(s+"").match(ui)||["-",0,0],r=+(60*i[1])+y(i[2]);return"+"===i[0]?r:-r}function Gt(t,e){var s,i;return e._isUTC?(s=e.clone(),i=(v(t)||r(t)?t.valueOf():$t(t).valueOf())-s.valueOf(),s._d.setTime(s._d.valueOf()+i),n.updateOffset(s,!1),s):$t(t).local()}function qt(t){return 15*-Math.round(t._d.getTimezoneOffset()/15)}function zt(t,e){var s,i=this._offset||0;return this.isValid()?null!=t?("string"==typeof t?t=Wt(Ps,t):Math.abs(t)<16&&(t=60*t),!this._isUTC&&e&&(s=qt(this)),this._offset=t,this._isUTC=!0,null!=s&&this.add(s,"m"),i!==t&&(!e||this._changeInProgress?ue(this,re(t-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,n.updateOffset(this,!0),this._changeInProgress=null)),this):this._isUTC?i:qt(this):null!=t?this:NaN}function Kt(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}function Jt(t){return this.utcOffset(0,t)}function Xt(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(qt(this),"m")),this}function Zt(){return this._tzm?this.utcOffset(this._tzm):"string"==typeof this._i&&this.utcOffset(Wt(Ms,this._i)),this}function Qt(t){return!!this.isValid()&&(t=t?$t(t).utcOffset():0,(this.utcOffset()-t)%60===0)}function te(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()}function ee(){if(!f(this._isDSTShifted))return this._isDSTShifted;var t={};if(_(t,this),t=Mt(t),t._a){var e=t._isUTC?h(t._a):$t(t._a);this._isDSTShifted=this.isValid()&&C(t._a,e.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted}function ne(){return!!this.isValid()&&!this._isUTC}function se(){return!!this.isValid()&&this._isUTC}function ie(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}function re(t,e){var n,s,i,r=t,o=null;return Bt(t)?r={ms:t._milliseconds,d:t._days,M:t._months}:"number"==typeof t?(r={},e?r[e]=t:r.milliseconds=t):(o=di.exec(t))?(n="-"===o[1]?-1:1,r={y:0,d:y(o[Bs])*n,h:y(o[Ys])*n,m:y(o[Ws])*n,s:y(o[Gs])*n,ms:y(o[qs])*n}):(o=pi.exec(t))?(n="-"===o[1]?-1:1,r={y:oe(o[2],n),M:oe(o[3],n),w:oe(o[4],n),d:oe(o[5],n),h:oe(o[6],n),m:oe(o[7],n),s:oe(o[8],n)}):null==r?r={}:"object"==typeof r&&("from"in r||"to"in r)&&(i=le($t(r.from),$t(r.to)),r={},r.ms=i.milliseconds,r.M=i.months),s=new jt(r),Bt(t)&&a(t,"_locale")&&(s._locale=t._locale),s}function oe(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function ae(t,e){var n={milliseconds:0,months:0};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function le(t,e){var n;return t.isValid()&&e.isValid()?(e=Gt(e,t),t.isBefore(e)?n=ae(t,e):(n=ae(e,t),n.milliseconds=-n.milliseconds,n.months=-n.months),n):{milliseconds:0,months:0}}function he(t){return t<0?Math.round(-1*t)*-1:Math.round(t)}function ce(t,e){return function(n,s){var i,r;return null===s||isNaN(+s)||(w(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period)."),r=n,n=s,s=r),n="string"==typeof n?+n:n,i=re(n,s),ue(this,i,t),this}}function ue(t,e,s,i){var r=e._milliseconds,o=he(e._days),a=he(e._months);t.isValid()&&(i=null==i||i,r&&t._d.setTime(t._d.valueOf()+r*s),o&&j(t,"Date",V(t,"Date")+o*s),a&&lt(t,V(t,"Month")+a*s),i&&n.updateOffset(t,o||a))}function de(t,e){var n=t||$t(),s=Gt(n,this).startOf("day"),i=this.diff(s,"days",!0),r=i<-6?"sameElse":i<-1?"lastWeek":i<0?"lastDay":i<1?"sameDay":i<2?"nextDay":i<7?"nextWeek":"sameElse",o=e&&(S(e[r])?e[r]():e[r]);return this.format(o||this.localeData().calendar(r,this,$t(n)))}function pe(){return new m(this)}function fe(t,e){var n=v(t)?t:$t(t);return!(!this.isValid()||!n.isValid())&&(e=$(f(e)?"millisecond":e),"millisecond"===e?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(e).valueOf())}function _e(t,e){var n=v(t)?t:$t(t);return!(!this.isValid()||!n.isValid())&&(e=$(f(e)?"millisecond":e),"millisecond"===e?this.valueOf()<n.valueOf():this.clone().endOf(e).valueOf()<n.valueOf())}function me(t,e,n,s){return s=s||"()",("("===s[0]?this.isAfter(t,n):!this.isBefore(t,n))&&(")"===s[1]?this.isBefore(e,n):!this.isAfter(e,n))}function ve(t,e){var n,s=v(t)?t:$t(t);return!(!this.isValid()||!s.isValid())&&(e=$(e||"millisecond"),"millisecond"===e?this.valueOf()===s.valueOf():(n=s.valueOf(),this.clone().startOf(e).valueOf()<=n&&n<=this.clone().endOf(e).valueOf()))}function ge(t,e){return this.isSame(t,e)||this.isAfter(t,e)}function ye(t,e){return this.isSame(t,e)||this.isBefore(t,e)}function Ce(t,e,n){var s,i,r,o;return this.isValid()?(s=Gt(t,this),s.isValid()?(i=6e4*(s.utcOffset()-this.utcOffset()),e=$(e),"year"===e||"month"===e||"quarter"===e?(o=be(this,s),"quarter"===e?o/=3:"year"===e&&(o/=12)):(r=this-s,o="second"===e?r/1e3:"minute"===e?r/6e4:"hour"===e?r/36e5:"day"===e?(r-i)/864e5:"week"===e?(r-i)/6048e5:r),n?o:g(o)):NaN):NaN}function be(t,e){var n,s,i=12*(e.year()-t.year())+(e.month()-t.month()),r=t.clone().add(i,"months");return e-r<0?(n=t.clone().add(i-1,"months"),s=(e-r)/(r-n)):(n=t.clone().add(i+1,"months"),s=(e-r)/(n-r)),-(i+s)||0}function Ee(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")}function we(){var t=this.clone().utc();return 0<t.year()&&t.year()<=9999?S(Date.prototype.toISOString)?this.toDate().toISOString():z(t,"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]"):z(t,"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]")}function Se(t){t||(t=this.isUtc()?n.defaultFormatUtc:n.defaultFormat);var e=z(this,t);return this.localeData().postformat(e)}function Le(t,e){return this.isValid()&&(v(t)&&t.isValid()||$t(t).isValid())?re({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function Te(t){return this.from($t(),t)}function Ae(t,e){return this.isValid()&&(v(t)&&t.isValid()||$t(t).isValid())?re({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()}function Ie(t){return this.to($t(),t)}function ke(t){var e;return void 0===t?this._locale._abbr:(e=M(t),null!=e&&(this._locale=e),this)}function Oe(){return this._locale}function De(t){switch(t=$(t)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===t&&this.weekday(0),"isoWeek"===t&&this.isoWeekday(1),"quarter"===t&&this.month(3*Math.floor(this.month()/3)),this}function Ne(t){return t=$(t),void 0===t||"millisecond"===t?this:("date"===t&&(t="day"),this.startOf(t).add(1,"isoWeek"===t?"week":t).subtract(1,"ms"))}function Re(){return this._d.valueOf()-6e4*(this._offset||0)}function xe(){return Math.floor(this.valueOf()/1e3)}function Me(){return this._offset?new Date(this.valueOf()):this._d}function Pe(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]}function He(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}}function $e(){return this.isValid()?this.toISOString():null}function Fe(){return d(this)}function Ue(){return l({},u(this))}function Ve(){return u(this).overflow}function je(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}}function Be(t,e){W(0,[t,t.length],0,e)}function Ye(t){return ze.call(this,t,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)}function We(t){return ze.call(this,t,this.isoWeek(),this.isoWeekday(),1,4)}function Ge(){return Lt(this.year(),1,4)}function qe(){var t=this.localeData()._week;return Lt(this.year(),t.dow,t.doy)}function ze(t,e,n,s,i){var r;return null==t?St(this,s,i).year:(r=Lt(t,s,i),e>r&&(e=r),Ke.call(this,t,e,n,s,i))}function Ke(t,e,n,s,i){var r=wt(t,e,n,s,i),o=gt(r.year,0,r.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}function Je(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)}function Xe(t){return St(t,this._week.dow,this._week.doy).week}function Ze(){return this._week.dow}function Qe(){return this._week.doy}function tn(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")}function en(t){var e=St(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")}function nn(t,e){return"string"!=typeof t?t:isNaN(t)?(t=e.weekdaysParse(t),"number"==typeof t?t:null):parseInt(t,10)}function sn(t,e){return i(this._weekdays)?this._weekdays[t.day()]:this._weekdays[this._weekdays.isFormat.test(e)?"format":"standalone"][t.day()]}function rn(t){return this._weekdaysShort[t.day()]}function on(t){return this._weekdaysMin[t.day()]}function an(t,e,n){var s,i,r,o=t.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],s=0;s<7;++s)r=h([2e3,1]).day(s),this._minWeekdaysParse[s]=this.weekdaysMin(r,"").toLocaleLowerCase(),this._shortWeekdaysParse[s]=this.weekdaysShort(r,"").toLocaleLowerCase(),this._weekdaysParse[s]=this.weekdays(r,"").toLocaleLowerCase();return n?"dddd"===e?(i=_s.call(this._weekdaysParse,o),i!==-1?i:null):"ddd"===e?(i=_s.call(this._shortWeekdaysParse,o),i!==-1?i:null):(i=_s.call(this._minWeekdaysParse,o),i!==-1?i:null):"dddd"===e?(i=_s.call(this._weekdaysParse,o),i!==-1?i:(i=_s.call(this._shortWeekdaysParse,o),i!==-1?i:(i=_s.call(this._minWeekdaysParse,o),i!==-1?i:null))):"ddd"===e?(i=_s.call(this._shortWeekdaysParse,o),i!==-1?i:(i=_s.call(this._weekdaysParse,o),i!==-1?i:(i=_s.call(this._minWeekdaysParse,o),i!==-1?i:null))):(i=_s.call(this._minWeekdaysParse,o),i!==-1?i:(i=_s.call(this._weekdaysParse,o),i!==-1?i:(i=_s.call(this._shortWeekdaysParse,o),i!==-1?i:null)))}function ln(t,e,n){var s,i,r;if(this._weekdaysParseExact)return an.call(this,t,e,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),s=0;s<7;s++){if(i=h([2e3,1]).day(s),n&&!this._fullWeekdaysParse[s]&&(this._fullWeekdaysParse[s]=new RegExp("^"+this.weekdays(i,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[s]=new RegExp("^"+this.weekdaysShort(i,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[s]=new RegExp("^"+this.weekdaysMin(i,"").replace(".",".?")+"$","i")),this._weekdaysParse[s]||(r="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[s]=new RegExp(r.replace(".",""),"i")),n&&"dddd"===e&&this._fullWeekdaysParse[s].test(t))return s;if(n&&"ddd"===e&&this._shortWeekdaysParse[s].test(t))return s;if(n&&"dd"===e&&this._minWeekdaysParse[s].test(t))return s;if(!n&&this._weekdaysParse[s].test(t))return s}}function hn(t){if(!this.isValid())return null!=t?this:NaN;var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=nn(t,this.localeData()),this.add(t-e,"d")):e}function cn(t){if(!this.isValid())return null!=t?this:NaN;var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")}function un(t){return this.isValid()?null==t?this.day()||7:this.day(this.day()%7?t:t-7):null!=t?this:NaN}function dn(t){return this._weekdaysParseExact?(a(this,"_weekdaysRegex")||_n.call(this),t?this._weekdaysStrictRegex:this._weekdaysRegex):this._weekdaysStrictRegex&&t?this._weekdaysStrictRegex:this._weekdaysRegex}function pn(t){return this._weekdaysParseExact?(a(this,"_weekdaysRegex")||_n.call(this),t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):this._weekdaysShortStrictRegex&&t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex}function fn(t){return this._weekdaysParseExact?(a(this,"_weekdaysRegex")||_n.call(this),t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):this._weekdaysMinStrictRegex&&t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex}function _n(){function t(t,e){return e.length-t.length}var e,n,s,i,r,o=[],a=[],l=[],c=[];for(e=0;e<7;e++)n=h([2e3,1]).day(e),s=this.weekdaysMin(n,""),i=this.weekdaysShort(n,""),r=this.weekdays(n,""),o.push(s),a.push(i),l.push(r),c.push(s),c.push(i),c.push(r);for(o.sort(t),a.sort(t),l.sort(t),c.sort(t),e=0;e<7;e++)a[e]=Q(a[e]),l[e]=Q(l[e]),c[e]=Q(c[e]);this._weekdaysRegex=new RegExp("^("+c.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function mn(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")}function vn(){return this.hours()%12||12}function gn(){return this.hours()||24}function yn(t,e){W(t,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)})}function Cn(t,e){return e._meridiemParse}function bn(t){return"p"===(t+"").toLowerCase().charAt(0)}function En(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"}function wn(t,e){e[qs]=y(1e3*("0."+t))}function Sn(){return this._isUTC?"UTC":""}function Ln(){return this._isUTC?"Coordinated Universal Time":""}function Tn(t){return $t(1e3*t)}function An(){return $t.apply(null,arguments).parseZone()}function In(t,e,n){var s=this._calendar[t];return S(s)?s.call(e,n):s}function kn(t){var e=this._longDateFormat[t],n=this._longDateFormat[t.toUpperCase()];return e||!n?e:(this._longDateFormat[t]=n.replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t])}function On(){return this._invalidDate}function Dn(t){return this._ordinal.replace("%d",t)}function Nn(t){return t}function Rn(t,e,n,s){var i=this._relativeTime[n];return S(i)?i(t,e,n,s):i.replace(/%d/i,t)}function xn(t,e){var n=this._relativeTime[t>0?"future":"past"];return S(n)?n(e):n.replace(/%s/i,e)}function Mn(t,e,n,s){var i=M(),r=h().set(s,e);return i[n](r,t)}function Pn(t,e,n){if("number"==typeof t&&(e=t,t=void 0),t=t||"",null!=e)return Mn(t,e,n,"month");var s,i=[];for(s=0;s<12;s++)i[s]=Mn(t,s,n,"month");return i}function Hn(t,e,n,s){"boolean"==typeof t?("number"==typeof e&&(n=e,e=void 0),e=e||""):(e=t,n=e,t=!1,"number"==typeof e&&(n=e,e=void 0),e=e||"");var i=M(),r=t?i._week.dow:0;if(null!=n)return Mn(e,(n+r)%7,s,"day");var o,a=[];for(o=0;o<7;o++)a[o]=Mn(e,(o+r)%7,s,"day");return a}function $n(t,e){return Pn(t,e,"months")}function Fn(t,e){return Pn(t,e,"monthsShort")}function Un(t,e,n){return Hn(t,e,n,"weekdays")}function Vn(t,e,n){return Hn(t,e,n,"weekdaysShort")}function jn(t,e,n){return Hn(t,e,n,"weekdaysMin")}function Bn(){var t=this._data;return this._milliseconds=Ui(this._milliseconds),this._days=Ui(this._days),this._months=Ui(this._months),t.milliseconds=Ui(t.milliseconds),t.seconds=Ui(t.seconds),t.minutes=Ui(t.minutes),t.hours=Ui(t.hours),t.months=Ui(t.months),t.years=Ui(t.years),this}function Yn(t,e,n,s){var i=re(e,n);return t._milliseconds+=s*i._milliseconds,t._days+=s*i._days,t._months+=s*i._months,t._bubble()}function Wn(t,e){return Yn(this,t,e,1)}function Gn(t,e){return Yn(this,t,e,-1)}function qn(t){return t<0?Math.floor(t):Math.ceil(t)}function zn(){var t,e,n,s,i,r=this._milliseconds,o=this._days,a=this._months,l=this._data;return r>=0&&o>=0&&a>=0||r<=0&&o<=0&&a<=0||(r+=864e5*qn(Jn(a)+o),o=0,a=0),l.milliseconds=r%1e3,t=g(r/1e3),l.seconds=t%60,
e=g(t/60),l.minutes=e%60,n=g(e/60),l.hours=n%24,o+=g(n/24),i=g(Kn(o)),a+=i,o-=qn(Jn(i)),s=g(a/12),a%=12,l.days=o,l.months=a,l.years=s,this}function Kn(t){return 4800*t/146097}function Jn(t){return 146097*t/4800}function Xn(t){var e,n,s=this._milliseconds;if(t=$(t),"month"===t||"year"===t)return e=this._days+s/864e5,n=this._months+Kn(e),"month"===t?n:n/12;switch(e=this._days+Math.round(Jn(this._months)),t){case"week":return e/7+s/6048e5;case"day":return e+s/864e5;case"hour":return 24*e+s/36e5;case"minute":return 1440*e+s/6e4;case"second":return 86400*e+s/1e3;case"millisecond":return Math.floor(864e5*e)+s;default:throw new Error("Unknown unit "+t)}}function Zn(){return this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*y(this._months/12)}function Qn(t){return function(){return this.as(t)}}function ts(t){return t=$(t),this[t+"s"]()}function es(t){return function(){return this._data[t]}}function ns(){return g(this.days()/7)}function ss(t,e,n,s,i){return i.relativeTime(e||1,!!n,t,s)}function is(t,e,n){var s=re(t).abs(),i=nr(s.as("s")),r=nr(s.as("m")),o=nr(s.as("h")),a=nr(s.as("d")),l=nr(s.as("M")),h=nr(s.as("y")),c=i<sr.s&&["s",i]||r<=1&&["m"]||r<sr.m&&["mm",r]||o<=1&&["h"]||o<sr.h&&["hh",o]||a<=1&&["d"]||a<sr.d&&["dd",a]||l<=1&&["M"]||l<sr.M&&["MM",l]||h<=1&&["y"]||["yy",h];return c[2]=e,c[3]=+t>0,c[4]=n,ss.apply(null,c)}function rs(t,e){return void 0!==sr[t]&&(void 0===e?sr[t]:(sr[t]=e,!0))}function os(t){var e=this.localeData(),n=is(this,!t,e);return t&&(n=e.pastFuture(+this,n)),e.postformat(n)}function as(){var t,e,n,s=ir(this._milliseconds)/1e3,i=ir(this._days),r=ir(this._months);t=g(s/60),e=g(t/60),s%=60,t%=60,n=g(r/12),r%=12;var o=n,a=r,l=i,h=e,c=t,u=s,d=this.asSeconds();return d?(d<0?"-":"")+"P"+(o?o+"Y":"")+(a?a+"M":"")+(l?l+"D":"")+(h||c||u?"T":"")+(h?h+"H":"")+(c?c+"M":"")+(u?u+"S":""):"P0D"}var ls,hs;hs=Array.prototype.some?Array.prototype.some:function(t){for(var e=Object(this),n=e.length>>>0,s=0;s<n;s++)if(s in e&&t.call(this,e[s],s,e))return!0;return!1};var cs=n.momentProperties=[],us=!1,ds={};n.suppressDeprecationWarnings=!1,n.deprecationHandler=null;var ps;ps=Object.keys?Object.keys:function(t){var e,n=[];for(e in t)a(t,e)&&n.push(e);return n};var fs,_s,ms={},vs={},gs=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,ys=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Cs={},bs={},Es=/\d/,ws=/\d\d/,Ss=/\d{3}/,Ls=/\d{4}/,Ts=/[+-]?\d{6}/,As=/\d\d?/,Is=/\d\d\d\d?/,ks=/\d\d\d\d\d\d?/,Os=/\d{1,3}/,Ds=/\d{1,4}/,Ns=/[+-]?\d{1,6}/,Rs=/\d+/,xs=/[+-]?\d+/,Ms=/Z|[+-]\d\d:?\d\d/gi,Ps=/Z|[+-]\d\d(?::?\d\d)?/gi,Hs=/[+-]?\d+(\.\d{1,3})?/,$s=/[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,Fs={},Us={},Vs=0,js=1,Bs=2,Ys=3,Ws=4,Gs=5,qs=6,zs=7,Ks=8;_s=Array.prototype.indexOf?Array.prototype.indexOf:function(t){var e;for(e=0;e<this.length;++e)if(this[e]===t)return e;return-1},W("M",["MM",2],"Mo",function(){return this.month()+1}),W("MMM",0,0,function(t){return this.localeData().monthsShort(this,t)}),W("MMMM",0,0,function(t){return this.localeData().months(this,t)}),H("month","M"),J("M",As),J("MM",As,ws),J("MMM",function(t,e){return e.monthsShortRegex(t)}),J("MMMM",function(t,e){return e.monthsRegex(t)}),tt(["M","MM"],function(t,e){e[js]=y(t)-1}),tt(["MMM","MMMM"],function(t,e,n,s){var i=n._locale.monthsParse(t,s,n._strict);null!=i?e[js]=i:u(n).invalidMonth=t});var Js=/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/,Xs="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Zs="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Qs=$s,ti=$s,ei=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,ni=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,si=/Z|[+-]\d\d(?::?\d\d)?/,ii=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],ri=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],oi=/^\/?Date\((\-?\d+)/i;n.createFromInputFallback=E("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),W("Y",0,0,function(){var t=this.year();return t<=9999?""+t:"+"+t}),W(0,["YY",2],0,function(){return this.year()%100}),W(0,["YYYY",4],0,"year"),W(0,["YYYYY",5],0,"year"),W(0,["YYYYYY",6,!0],0,"year"),H("year","y"),J("Y",xs),J("YY",As,ws),J("YYYY",Ds,Ls),J("YYYYY",Ns,Ts),J("YYYYYY",Ns,Ts),tt(["YYYYY","YYYYYY"],Vs),tt("YYYY",function(t,e){e[Vs]=2===t.length?n.parseTwoDigitYear(t):y(t)}),tt("YY",function(t,e){e[Vs]=n.parseTwoDigitYear(t)}),tt("Y",function(t,e){e[Vs]=parseInt(t,10)}),n.parseTwoDigitYear=function(t){return y(t)+(y(t)>68?1900:2e3)};var ai=U("FullYear",!0);n.ISO_8601=function(){};var li=E("moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",function(){var t=$t.apply(null,arguments);return this.isValid()&&t.isValid()?t<this?this:t:p()}),hi=E("moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",function(){var t=$t.apply(null,arguments);return this.isValid()&&t.isValid()?t>this?this:t:p()}),ci=function(){return Date.now?Date.now():+new Date};Yt("Z",":"),Yt("ZZ",""),J("Z",Ps),J("ZZ",Ps),tt(["Z","ZZ"],function(t,e,n){n._useUTC=!0,n._tzm=Wt(Ps,t)});var ui=/([\+\-]|\d\d)/gi;n.updateOffset=function(){};var di=/^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/,pi=/^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;re.fn=jt.prototype;var fi=ce(1,"add"),_i=ce(-1,"subtract");n.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",n.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var mi=E("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return void 0===t?this.localeData():this.locale(t)});W(0,["gg",2],0,function(){return this.weekYear()%100}),W(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Be("gggg","weekYear"),Be("ggggg","weekYear"),Be("GGGG","isoWeekYear"),Be("GGGGG","isoWeekYear"),H("weekYear","gg"),H("isoWeekYear","GG"),J("G",xs),J("g",xs),J("GG",As,ws),J("gg",As,ws),J("GGGG",Ds,Ls),J("gggg",Ds,Ls),J("GGGGG",Ns,Ts),J("ggggg",Ns,Ts),et(["gggg","ggggg","GGGG","GGGGG"],function(t,e,n,s){e[s.substr(0,2)]=y(t)}),et(["gg","GG"],function(t,e,s,i){e[i]=n.parseTwoDigitYear(t)}),W("Q",0,"Qo","quarter"),H("quarter","Q"),J("Q",Es),tt("Q",function(t,e){e[js]=3*(y(t)-1)}),W("w",["ww",2],"wo","week"),W("W",["WW",2],"Wo","isoWeek"),H("week","w"),H("isoWeek","W"),J("w",As),J("ww",As,ws),J("W",As),J("WW",As,ws),et(["w","ww","W","WW"],function(t,e,n,s){e[s.substr(0,1)]=y(t)});var vi={dow:0,doy:6};W("D",["DD",2],"Do","date"),H("date","D"),J("D",As),J("DD",As,ws),J("Do",function(t,e){return t?e._ordinalParse:e._ordinalParseLenient}),tt(["D","DD"],Bs),tt("Do",function(t,e){e[Bs]=y(t.match(As)[0],10)});var gi=U("Date",!0);W("d",0,"do","day"),W("dd",0,0,function(t){return this.localeData().weekdaysMin(this,t)}),W("ddd",0,0,function(t){return this.localeData().weekdaysShort(this,t)}),W("dddd",0,0,function(t){return this.localeData().weekdays(this,t)}),W("e",0,0,"weekday"),W("E",0,0,"isoWeekday"),H("day","d"),H("weekday","e"),H("isoWeekday","E"),J("d",As),J("e",As),J("E",As),J("dd",function(t,e){return e.weekdaysMinRegex(t)}),J("ddd",function(t,e){return e.weekdaysShortRegex(t)}),J("dddd",function(t,e){return e.weekdaysRegex(t)}),et(["dd","ddd","dddd"],function(t,e,n,s){var i=n._locale.weekdaysParse(t,s,n._strict);null!=i?e.d=i:u(n).invalidWeekday=t}),et(["d","e","E"],function(t,e,n,s){e[s]=y(t)});var yi="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Ci="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),bi="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ei=$s,wi=$s,Si=$s;W("DDD",["DDDD",3],"DDDo","dayOfYear"),H("dayOfYear","DDD"),J("DDD",Os),J("DDDD",Ss),tt(["DDD","DDDD"],function(t,e,n){n._dayOfYear=y(t)}),W("H",["HH",2],0,"hour"),W("h",["hh",2],0,vn),W("k",["kk",2],0,gn),W("hmm",0,0,function(){return""+vn.apply(this)+Y(this.minutes(),2)}),W("hmmss",0,0,function(){return""+vn.apply(this)+Y(this.minutes(),2)+Y(this.seconds(),2)}),W("Hmm",0,0,function(){return""+this.hours()+Y(this.minutes(),2)}),W("Hmmss",0,0,function(){return""+this.hours()+Y(this.minutes(),2)+Y(this.seconds(),2)}),yn("a",!0),yn("A",!1),H("hour","h"),J("a",Cn),J("A",Cn),J("H",As),J("h",As),J("HH",As,ws),J("hh",As,ws),J("hmm",Is),J("hmmss",ks),J("Hmm",Is),J("Hmmss",ks),tt(["H","HH"],Ys),tt(["a","A"],function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t}),tt(["h","hh"],function(t,e,n){e[Ys]=y(t),u(n).bigHour=!0}),tt("hmm",function(t,e,n){var s=t.length-2;e[Ys]=y(t.substr(0,s)),e[Ws]=y(t.substr(s)),u(n).bigHour=!0}),tt("hmmss",function(t,e,n){var s=t.length-4,i=t.length-2;e[Ys]=y(t.substr(0,s)),e[Ws]=y(t.substr(s,2)),e[Gs]=y(t.substr(i)),u(n).bigHour=!0}),tt("Hmm",function(t,e,n){var s=t.length-2;e[Ys]=y(t.substr(0,s)),e[Ws]=y(t.substr(s))}),tt("Hmmss",function(t,e,n){var s=t.length-4,i=t.length-2;e[Ys]=y(t.substr(0,s)),e[Ws]=y(t.substr(s,2)),e[Gs]=y(t.substr(i))});var Li=/[ap]\.?m?\.?/i,Ti=U("Hours",!0);W("m",["mm",2],0,"minute"),H("minute","m"),J("m",As),J("mm",As,ws),tt(["m","mm"],Ws);var Ai=U("Minutes",!1);W("s",["ss",2],0,"second"),H("second","s"),J("s",As),J("ss",As,ws),tt(["s","ss"],Gs);var Ii=U("Seconds",!1);W("S",0,0,function(){return~~(this.millisecond()/100)}),W(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),W(0,["SSS",3],0,"millisecond"),W(0,["SSSS",4],0,function(){return 10*this.millisecond()}),W(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),W(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),W(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),W(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),W(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),H("millisecond","ms"),J("S",Os,Es),J("SS",Os,ws),J("SSS",Os,Ss);var ki;for(ki="SSSS";ki.length<=9;ki+="S")J(ki,Rs);for(ki="S";ki.length<=9;ki+="S")tt(ki,wn);var Oi=U("Milliseconds",!1);W("z",0,0,"zoneAbbr"),W("zz",0,0,"zoneName");var Di=m.prototype;Di.add=fi,Di.calendar=de,Di.clone=pe,Di.diff=Ce,Di.endOf=Ne,Di.format=Se,Di.from=Le,Di.fromNow=Te,Di.to=Ae,Di.toNow=Ie,Di.get=B,Di.invalidAt=Ve,Di.isAfter=fe,Di.isBefore=_e,Di.isBetween=me,Di.isSame=ve,Di.isSameOrAfter=ge,Di.isSameOrBefore=ye,Di.isValid=Fe,Di.lang=mi,Di.locale=ke,Di.localeData=Oe,Di.max=hi,Di.min=li,Di.parsingFlags=Ue,Di.set=B,Di.startOf=De,Di.subtract=_i,Di.toArray=Pe,Di.toObject=He,Di.toDate=Me,Di.toISOString=we,Di.toJSON=$e,Di.toString=Ee,Di.unix=xe,Di.valueOf=Re,Di.creationData=je,Di.year=ai,Di.isLeapYear=bt,Di.weekYear=Ye,Di.isoWeekYear=We,Di.quarter=Di.quarters=Je,Di.month=ht,Di.daysInMonth=ct,Di.week=Di.weeks=tn,Di.isoWeek=Di.isoWeeks=en,Di.weeksInYear=qe,Di.isoWeeksInYear=Ge,Di.date=gi,Di.day=Di.days=hn,Di.weekday=cn,Di.isoWeekday=un,Di.dayOfYear=mn,Di.hour=Di.hours=Ti,Di.minute=Di.minutes=Ai,Di.second=Di.seconds=Ii,Di.millisecond=Di.milliseconds=Oi,Di.utcOffset=zt,Di.utc=Jt,Di.local=Xt,Di.parseZone=Zt,Di.hasAlignedHourOffset=Qt,Di.isDST=te,Di.isDSTShifted=ee,Di.isLocal=ne,Di.isUtcOffset=se,Di.isUtc=ie,Di.isUTC=ie,Di.zoneAbbr=Sn,Di.zoneName=Ln,Di.dates=E("dates accessor is deprecated. Use date instead.",gi),Di.months=E("months accessor is deprecated. Use month instead",ht),Di.years=E("years accessor is deprecated. Use year instead",ai),Di.zone=E("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779",Kt);var Ni=Di,Ri={sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},xi={LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},Mi="Invalid date",Pi="%d",Hi=/\d{1,2}/,$i={future:"in %s",past:"%s ago",s:"a few seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},Fi=I.prototype;Fi._calendar=Ri,Fi.calendar=In,Fi._longDateFormat=xi,Fi.longDateFormat=kn,Fi._invalidDate=Mi,Fi.invalidDate=On,Fi._ordinal=Pi,Fi.ordinal=Dn,Fi._ordinalParse=Hi,Fi.preparse=Nn,Fi.postformat=Nn,Fi._relativeTime=$i,Fi.relativeTime=Rn,Fi.pastFuture=xn,Fi.set=T,Fi.months=it,Fi._months=Xs,Fi.monthsShort=rt,Fi._monthsShort=Zs,Fi.monthsParse=at,Fi._monthsRegex=ti,Fi.monthsRegex=dt,Fi._monthsShortRegex=Qs,Fi.monthsShortRegex=ut,Fi.week=Xe,Fi._week=vi,Fi.firstDayOfYear=Qe,Fi.firstDayOfWeek=Ze,Fi.weekdays=sn,Fi._weekdays=yi,Fi.weekdaysMin=on,Fi._weekdaysMin=bi,Fi.weekdaysShort=rn,Fi._weekdaysShort=Ci,Fi.weekdaysParse=ln,Fi._weekdaysRegex=Ei,Fi.weekdaysRegex=dn,Fi._weekdaysShortRegex=wi,Fi.weekdaysShortRegex=pn,Fi._weekdaysMinRegex=Si,Fi.weekdaysMinRegex=fn,Fi.isPM=bn,Fi._meridiemParse=Li,Fi.meridiem=En,N("en",{ordinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,n=1===y(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),n.lang=E("moment.lang is deprecated. Use moment.locale instead.",N),n.langData=E("moment.langData is deprecated. Use moment.localeData instead.",M);var Ui=Math.abs,Vi=Qn("ms"),ji=Qn("s"),Bi=Qn("m"),Yi=Qn("h"),Wi=Qn("d"),Gi=Qn("w"),qi=Qn("M"),zi=Qn("y"),Ki=es("milliseconds"),Ji=es("seconds"),Xi=es("minutes"),Zi=es("hours"),Qi=es("days"),tr=es("months"),er=es("years"),nr=Math.round,sr={s:45,m:45,h:22,d:26,M:11},ir=Math.abs,rr=jt.prototype;rr.abs=Bn,rr.add=Wn,rr.subtract=Gn,rr.as=Xn,rr.asMilliseconds=Vi,rr.asSeconds=ji,rr.asMinutes=Bi,rr.asHours=Yi,rr.asDays=Wi,rr.asWeeks=Gi,rr.asMonths=qi,rr.asYears=zi,rr.valueOf=Zn,rr._bubble=zn,rr.get=ts,rr.milliseconds=Ki,rr.seconds=Ji,rr.minutes=Xi,rr.hours=Zi,rr.days=Qi,rr.weeks=ns,rr.months=tr,rr.years=er,rr.humanize=os,rr.toISOString=as,rr.toString=as,rr.toJSON=as,rr.locale=ke,rr.localeData=Oe,rr.toIsoString=E("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",as),rr.lang=mi,W("X",0,0,"unix"),W("x",0,0,"valueOf"),J("x",xs),J("X",Hs),tt("X",function(t,e,n){n._d=new Date(1e3*parseFloat(t,10))}),tt("x",function(t,e,n){n._d=new Date(y(t))}),n.version="2.13.0",s($t),n.fn=Ni,n.min=Ut,n.max=Vt,n.now=ci,n.utc=h,n.unix=Tn,n.months=$n,n.isDate=r,n.locale=N,n.invalid=p,n.duration=re,n.isMoment=v,n.weekdays=Un,n.parseZone=An,n.localeData=M,n.isDuration=Bt,n.monthsShort=Fn,n.weekdaysMin=jn,n.defineLocale=R,n.updateLocale=x,n.locales=P,n.weekdaysShort=Vn,n.normalizeUnits=$,n.relativeTimeThreshold=rs,n.prototype=Ni;var or=n;return or})},{}],4:[function(t,e,n){function s(){d&&c&&(d=!1,c.length?u=c.concat(u):p=-1,u.length&&i())}function i(){if(!d){var t=a(s);d=!0;for(var e=u.length;e;){for(c=u,u=[];++p<e;)c&&c[p].run();p=-1,e=u.length}c=null,d=!1,l(t)}}function r(t,e){this.fun=t,this.array=e}function o(){}var a,l,h=e.exports={};!function(){try{a=setTimeout}catch(t){a=function(){throw new Error("setTimeout is not defined")}}try{l=clearTimeout}catch(t){l=function(){throw new Error("clearTimeout is not defined")}}}();var c,u=[],d=!1,p=-1;h.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];u.push(new r(t,e)),1!==u.length||d||a(i,0)},r.prototype.run=function(){this.fun.apply(null,this.array)},h.title="browser",h.browser=!0,h.env={},h.argv=[],h.version="",h.versions={},h.on=o,h.addListener=o,h.once=o,h.off=o,h.removeListener=o,h.removeAllListeners=o,h.emit=o,h.binding=function(t){throw new Error("process.binding is not supported")},h.cwd=function(){return"/"},h.chdir=function(t){throw new Error("process.chdir is not supported")},h.umask=function(){return 0}},{}],5:[function(t,e,n){function s(t){var e=t.unbuild;t.unbuild=function(t){if(!this.hotUpdating){var n=this.childVM&&this.childVM.constructor;r(n,this),t&&i(this.Component,this)}return e.call(this,t)}}function i(t,e){var n=t&&t.options.hotID;n&&(p[n]||(p[n]={Component:t,views:[],instances:[]}),p[n].views.push(e))}function r(t,e){var n=t&&t.options.hotID;n&&p[n].views.$remove(e)}function o(t,e){e.hotID=t,a(e,"created",function(){var e=p[t];e.Component||(e.Component=this.constructor),e.instances.push(this)}),a(e,"beforeDestroy",function(){p[t].instances.$remove(this)})}function a(t,e,n){var s=t[e];t[e]=s?Array.isArray(s)?s.concat(n):[s,n]:[n]}function l(t,e){if(t._bound){t.Component=e,t.hotUpdating=!0,t.vm._isCompiled=!1;var n=h(t.childVM),s=t.keepAlive;t.keepAlive=!1,t.mountComponent(),t.keepAlive=s,c(t.childVM,n,!0),t.vm._isCompiled=!0,t.hotUpdating=!1}}function h(t){return{cid:t.constructor.cid,data:t.$data,children:t.$children.map(h)}}function c(t,e,n){var s;n&&(s=d.config.async,d.config.async=!1),n||!t._props?t.$data=e.data:Object.keys(e.data).forEach(function(n){t._props[n]||(t.$data[n]=e.data[n])});var i=t.$children.every(function(t,n){return e.children[n]&&e.children[n].cid===t.constructor.cid});i&&t.$children.forEach(function(t,n){c(t,e.children[n])}),n&&(d.config.async=s)}function u(t){var e=t.match(/[^\/]+\.vue$/);return e?e[0]:t}var d,p=Object.create(null),f=!1,_=!1;n.install=function(t,e){if(!f){if(f=!0,d=t,_=e,n.compatible=!!d.internalDirectives,!n.compatible)return void console.warn("[HMR] vue-loader hot reload is only compatible with Vue.js 1.0.0+.");s(d.internalDirectives.component),console.log("[HMR] Vue component hot reload shim applied.");var i=d.elementDirective("router-view");i&&(s(i),console.log("[HMR] vue-router <router-view> hot reload shim applied."))}},n.createRecord=function(t,e){"function"==typeof e&&(e=e.options),"string"!=typeof e.el&&"object"!=typeof e.data&&(o(t,e),p[t]={Component:null,views:[],instances:[]})},n.update=function(t,e,n){var s=p[t];if(!s||s.instances.length&&!s.views.length){if(console.log("[HMR] Root or manually-mounted instance modified. Full reload may be required."),_)return;window.location.reload()}_||console.log("[HMR] Updating component: "+u(t));var i=s.Component;e&&(i=s.Component="function"==typeof e?e:d.extend(e),o(t,i.options)),n&&(i.options.template=n),i.options.name&&(i.options.components[i.options.name]=i),i.linker=null,s.views.forEach(function(t){l(t,i)}),window.__VUE_DEVTOOLS_GLOBAL_HOOK__&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__.emit("flush")}},{}],6:[function(t,e,n){"use strict";function s(t){this.state=nt,this.value=void 0,this.deferred=[];var e=this;try{t(function(t){e.resolve(t)},function(t){e.reject(t)})}catch(n){e.reject(n)}}function i(t,e){t instanceof it?this.promise=t:this.promise=new it(t.bind(e)),this.context=e}function r(t){at=t.util,ot=t.config.debug||!t.config.silent}function o(t){"undefined"!=typeof console&&ot&&console.warn("[VueResource warn]: "+t)}function a(t){"undefined"!=typeof console&&console.error(t)}function l(t,e){return at.nextTick(t,e)}function h(t){return t.replace(/^\s*|\s*$/g,"")}function c(t){return"string"==typeof t}function u(t){return t===!0||t===!1}function d(t){return"function"==typeof t}function p(t){return null!==t&&"object"==typeof t}function f(t){return p(t)&&Object.getPrototypeOf(t)==Object.prototype}function _(t){return"undefined"!=typeof FormData&&t instanceof FormData}function m(t,e,n){var s=i.resolve(t);return arguments.length<2?s:s.then(e,n)}function v(t,e,n){return n=n||{},d(n)&&(n=n.call(e)),y(t.bind({$vm:e,$options:n}),t,{$options:n})}function g(t,e){var n,s;if("number"==typeof t.length)for(n=0;n<t.length;n++)e.call(t[n],t[n],n);else if(p(t))for(s in t)t.hasOwnProperty(s)&&e.call(t[s],t[s],s);return t}function y(t){var e=lt.slice.call(arguments,1);return e.forEach(function(e){E(t,e,!0)}),t}function C(t){var e=lt.slice.call(arguments,1);return e.forEach(function(e){for(var n in e)void 0===t[n]&&(t[n]=e[n])}),t}function b(t){var e=lt.slice.call(arguments,1);return e.forEach(function(e){E(t,e)}),t}function E(t,e,n){for(var s in e)n&&(f(e[s])||ht(e[s]))?(f(e[s])&&!f(t[s])&&(t[s]={}),ht(e[s])&&!ht(t[s])&&(t[s]=[]),E(t[s],e[s],n)):void 0!==e[s]&&(t[s]=e[s])}function w(t,e){var n=e(t);return c(t.root)&&!n.match(/^(https?:)?\//)&&(n=t.root+"/"+n),n}function S(t,e){var n=Object.keys(R.options.params),s={},i=e(t);return g(t.params,function(t,e){n.indexOf(e)===-1&&(s[e]=t)}),s=R.params(s),s&&(i+=(i.indexOf("?")==-1?"?":"&")+s),i}function L(t,e,n){var s=T(t),i=s.expand(e);return n&&n.push.apply(n,s.vars),i}function T(t){var e=["+","#",".","/",";","?","&"],n=[];return{vars:n,expand:function(s){return t.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g,function(t,i,r){if(i){var o=null,a=[];if(e.indexOf(i.charAt(0))!==-1&&(o=i.charAt(0),i=i.substr(1)),i.split(/,/g).forEach(function(t){var e=/([^:\*]*)(?::(\d+)|(\*))?/.exec(t);a.push.apply(a,A(s,o,e[1],e[2]||e[3])),n.push(e[1])}),o&&"+"!==o){var l=",";return"?"===o?l="&":"#"!==o&&(l=o),(0!==a.length?o:"")+a.join(l)}return a.join(",")}return D(r)})}}}function A(t,e,n,s){var i=t[n],r=[];if(I(i)&&""!==i)if("string"==typeof i||"number"==typeof i||"boolean"==typeof i)i=i.toString(),s&&"*"!==s&&(i=i.substring(0,parseInt(s,10))),r.push(O(e,i,k(e)?n:null));else if("*"===s)Array.isArray(i)?i.filter(I).forEach(function(t){r.push(O(e,t,k(e)?n:null))}):Object.keys(i).forEach(function(t){I(i[t])&&r.push(O(e,i[t],t))});else{var o=[];Array.isArray(i)?i.filter(I).forEach(function(t){o.push(O(e,t))}):Object.keys(i).forEach(function(t){I(i[t])&&(o.push(encodeURIComponent(t)),o.push(O(e,i[t].toString())))}),k(e)?r.push(encodeURIComponent(n)+"="+o.join(",")):0!==o.length&&r.push(o.join(","))}else";"===e?r.push(encodeURIComponent(n)):""!==i||"&"!==e&&"?"!==e?""===i&&r.push(""):r.push(encodeURIComponent(n)+"=");return r}function I(t){return void 0!==t&&null!==t}function k(t){return";"===t||"&"===t||"?"===t}function O(t,e,n){return e="+"===t||"#"===t?D(e):encodeURIComponent(e),n?encodeURIComponent(n)+"="+e:e}function D(t){return t.split(/(%[0-9A-Fa-f]{2})/g).map(function(t){return/%[0-9A-Fa-f]/.test(t)||(t=encodeURI(t)),t}).join("")}function N(t){var e=[],n=L(t.url,t.params,e);return e.forEach(function(e){delete t.params[e]}),n}function R(t,e){var n,s=this||{},i=t;return c(t)&&(i={url:t,params:e}),i=y({},R.options,s.$options,i),R.transforms.forEach(function(t){n=x(t,n,s.$vm)}),n(i)}function x(t,e,n){return function(s){return t.call(n,s,e)}}function M(t,e,n){var s,i=ht(e),r=f(e);g(e,function(e,o){s=p(e)||ht(e),n&&(o=n+"["+(r||s?o:"")+"]"),!n&&i?t.add(e.name,e.value):s?M(t,e,o):t.add(o,e)})}function P(t){return new i(function(e){var n=new XDomainRequest,s=function(s){var i=t.respondWith(n.responseText,{status:n.status,statusText:n.statusText});e(i)};t.abort=function(){return n.abort()},n.open(t.method,t.getUrl(),!0),n.timeout=0,n.onload=s,n.onerror=s,n.ontimeout=function(){},n.onprogress=function(){},n.send(t.getBody())})}function H(t,e){!u(t.crossOrigin)&&$(t)&&(t.crossOrigin=!0),t.crossOrigin&&(ft||(t.client=P),delete t.emulateHTTP),e()}function $(t){var e=R.parse(R(t));return e.protocol!==pt.protocol||e.host!==pt.host}function F(t,e){t.emulateJSON&&f(t.body)&&(t.body=R.params(t.body),t.headers["Content-Type"]="application/x-www-form-urlencoded"),_(t.body)&&delete t.headers["Content-Type"],f(t.body)&&(t.body=JSON.stringify(t.body)),e(function(t){var e=t.headers["Content-Type"];if(c(e)&&0===e.indexOf("application/json"))try{t.data=t.json()}catch(n){t.data=null}else t.data=t.text()})}function U(t){return new i(function(e){var n,s,i=t.jsonp||"callback",r="_jsonp"+Math.random().toString(36).substr(2),o=null;n=function(n){var i=0;"load"===n.type&&null!==o?i=200:"error"===n.type&&(i=404),e(t.respondWith(o,{status:i})),delete window[r],document.body.removeChild(s)},t.params[i]=r,window[r]=function(t){o=JSON.stringify(t)},s=document.createElement("script"),s.src=t.getUrl(),s.type="text/javascript",s.async=!0,s.onload=n,s.onerror=n,document.body.appendChild(s)})}function V(t,e){"JSONP"==t.method&&(t.client=U),e(function(e){"JSONP"==t.method&&(e.data=e.json())})}function j(t,e){d(t.before)&&t.before.call(this,t),e()}function B(t,e){t.emulateHTTP&&/^(PUT|PATCH|DELETE)$/i.test(t.method)&&(t.headers["X-HTTP-Method-Override"]=t.method,t.method="POST"),e()}function Y(t,e){t.method=t.method.toUpperCase(),t.headers=ct({},J.headers.common,t.crossOrigin?{}:J.headers.custom,J.headers[t.method.toLowerCase()],t.headers),e()}function W(t,e){var n;t.timeout&&(n=setTimeout(function(){t.abort()},t.timeout)),e(function(t){clearTimeout(n)})}function G(t){return new i(function(e){var n=new XMLHttpRequest,s=function(s){var i=t.respondWith("response"in n?n.response:n.responseText,{status:1223===n.status?204:n.status,statusText:1223===n.status?"No Content":h(n.statusText),headers:q(n.getAllResponseHeaders())});e(i)};t.abort=function(){return n.abort()},n.open(t.method,t.getUrl(),!0),n.timeout=0,n.onload=s,n.onerror=s,t.progress&&("GET"===t.method?n.addEventListener("progress",t.progress):/^(POST|PUT)$/i.test(t.method)&&n.upload.addEventListener("progress",t.progress)),t.credentials===!0&&(n.withCredentials=!0),g(t.headers||{},function(t,e){n.setRequestHeader(e,t)}),n.send(t.getBody())})}function q(t){var e,n,s,i={};return g(h(t).split("\n"),function(t){s=t.indexOf(":"),n=h(t.slice(0,s)),e=h(t.slice(s+1)),i[n]?ht(i[n])?i[n].push(e):i[n]=[i[n],e]:i[n]=e}),i}function z(t){function e(e){return new i(function(i){function a(){n=s.pop(),d(n)?n.call(t,e,l):(o("Invalid interceptor of type "+typeof n+", must be a function"),l())}function l(e){if(d(e))r.unshift(e);else if(p(e))return r.forEach(function(n){e=m(e,function(e){return n.call(t,e)||e})}),void m(e,i);a()}a()},t)}var n,s=[K],r=[];return p(t)||(t=null),e.use=function(t){s.push(t)},e}function K(t,e){var n=t.client||G;e(n(t))}function J(t){var e=this||{},n=z(e.$vm);return C(t||{},e.$options,J.options),J.interceptors.forEach(function(t){n.use(t)}),n(new vt(t)).then(function(t){return t.ok?t:i.reject(t)},function(t){return t instanceof Error&&a(t),i.reject(t)})}function X(t,e,n,s){var i=this||{},r={};return n=ct({},X.actions,n),g(n,function(n,o){n=y({url:t,params:e||{}},s,n),r[o]=function(){return(i.$http||J)(Z(n,arguments))}}),r}function Z(t,e){var n,s=ct({},t),i={};switch(e.length){case 2:i=e[0],n=e[1];break;case 1:/^(POST|PUT|PATCH)$/i.test(s.method)?n=e[0]:i=e[0];break;case 0:break;default:throw"Expected up to 4 arguments [params, body], got "+e.length+" arguments"}return s.body=n,s.params=ct({},s.params,i),s}function Q(t){Q.installed||(r(t),t.url=R,t.http=J,t.resource=X,t.Promise=i,Object.defineProperties(t.prototype,{$url:{get:function(){return v(t.url,this,this.$options.url)}},$http:{get:function(){return v(t.http,this,this.$options.http)}},$resource:{get:function(){return t.resource.bind(this)}},$promise:{get:function(){var e=this;return function(n){return new t.Promise(n,e)}}}}))}var tt=0,et=1,nt=2;s.reject=function(t){return new s(function(e,n){n(t)})},s.resolve=function(t){return new s(function(e,n){e(t)})},s.all=function(t){return new s(function(e,n){function i(n){return function(s){o[n]=s,r+=1,r===t.length&&e(o)}}var r=0,o=[];0===t.length&&e(o);for(var a=0;a<t.length;a+=1)s.resolve(t[a]).then(i(a),n)})},s.race=function(t){return new s(function(e,n){for(var i=0;i<t.length;i+=1)s.resolve(t[i]).then(e,n)})};var st=s.prototype;st.resolve=function(t){var e=this;if(e.state===nt){if(t===e)throw new TypeError("Promise settled with itself.");var n=!1;try{var s=t&&t.then;if(null!==t&&"object"==typeof t&&"function"==typeof s)return void s.call(t,function(t){n||e.resolve(t),n=!0},function(t){n||e.reject(t),n=!0})}catch(i){return void(n||e.reject(i))}e.state=tt,e.value=t,e.notify()}},st.reject=function(t){var e=this;if(e.state===nt){if(t===e)throw new TypeError("Promise settled with itself.");e.state=et,e.value=t,e.notify()}},st.notify=function(){var t=this;l(function(){if(t.state!==nt)for(;t.deferred.length;){var e=t.deferred.shift(),n=e[0],s=e[1],i=e[2],r=e[3];try{t.state===tt?i("function"==typeof n?n.call(void 0,t.value):t.value):t.state===et&&("function"==typeof s?i(s.call(void 0,t.value)):r(t.value))}catch(o){r(o)}}})},st.then=function(t,e){var n=this;return new s(function(s,i){n.deferred.push([t,e,s,i]),n.notify()})},st["catch"]=function(t){return this.then(void 0,t)};var it=window.Promise||s;i.all=function(t,e){return new i(it.all(t),e)},i.resolve=function(t,e){return new i(it.resolve(t),e)},i.reject=function(t,e){return new i(it.reject(t),e)},i.race=function(t,e){return new i(it.race(t),e)};var rt=i.prototype;rt.bind=function(t){return this.context=t,this},rt.then=function(t,e){return t&&t.bind&&this.context&&(t=t.bind(this.context)),e&&e.bind&&this.context&&(e=e.bind(this.context)),new i(this.promise.then(t,e),this.context)},rt["catch"]=function(t){return t&&t.bind&&this.context&&(t=t.bind(this.context)),new i(this.promise["catch"](t),this.context)},rt["finally"]=function(t){return this.then(function(e){return t.call(this),e},function(e){return t.call(this),it.reject(e)})};var ot=!1,at={},lt=[],ht=Array.isArray,ct=Object.assign||b,ut=document.documentMode,dt=document.createElement("a");R.options={url:"",root:null,params:{}},R.transforms=[N,S,w],R.params=function(t){var e=[],n=encodeURIComponent;return e.add=function(t,e){d(e)&&(e=e()),null===e&&(e=""),this.push(n(t)+"="+n(e))},M(e,t),e.join("&").replace(/%20/g,"+")},R.parse=function(t){return ut&&(dt.href=t,t=dt.href),dt.href=t,{href:dt.href,protocol:dt.protocol?dt.protocol.replace(/:$/,""):"",port:dt.port,host:dt.host,hostname:dt.hostname,pathname:"/"===dt.pathname.charAt(0)?dt.pathname:"/"+dt.pathname,search:dt.search?dt.search.replace(/^\?/,""):"",hash:dt.hash?dt.hash.replace(/^#/,""):""}};var pt=R.parse(location.href),ft="withCredentials"in new XMLHttpRequest,_t=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},mt=function(){function t(e,n){var s=n.url,i=n.headers,r=n.status,o=n.statusText;_t(this,t),this.url=s,this.body=e,this.headers=i||{},this.status=r||0,this.statusText=o||"",this.ok=r>=200&&r<300}return t.prototype.text=function(){return this.body},t.prototype.blob=function(){return new Blob([this.body])},t.prototype.json=function(){return JSON.parse(this.body)},t}(),vt=function(){function t(e){_t(this,t),this.method="GET",this.body=null,this.params={},this.headers={},ct(this,e)}return t.prototype.getUrl=function(){return R(this)},t.prototype.getBody=function(){return this.body},t.prototype.respondWith=function(t,e){return new mt(t,ct(e||{},{url:this.getUrl()}))},t}(),gt={"X-Requested-With":"XMLHttpRequest"},yt={Accept:"application/json, text/plain, */*"},Ct={"Content-Type":"application/json;charset=utf-8"};J.options={},J.headers={put:Ct,post:Ct,patch:Ct,"delete":Ct,custom:gt,common:yt},J.interceptors=[j,W,B,F,V,Y,H],["get","delete","head","jsonp"].forEach(function(t){J[t]=function(e,n){return this(ct(n||{},{url:e,method:t}))}}),["post","put","patch"].forEach(function(t){J[t]=function(e,n,s){return this(ct(s||{},{url:e,method:t,body:n}))}}),X.actions={get:{method:"GET"},save:{method:"POST"},query:{method:"GET"},update:{method:"PUT"},remove:{method:"DELETE"},"delete":{method:"DELETE"}},"undefined"!=typeof window&&window.Vue&&window.Vue.use(Q),e.exports=Q},{}],7:[function(t,e,n){!function(t,s){"object"==typeof n&&"undefined"!=typeof e?e.exports=s():"function"==typeof define&&define.amd?define(s):t.VueRouter=s()}(this,function(){"use strict";function t(t,e,n){this.path=t,this.matcher=e,this.delegate=n}
function e(t){this.routes={},this.children={},this.target=t}function n(e,s,i){return function(r,o){var a=e+r;return o?void o(n(a,s,i)):new t(e+r,s,i)}}function s(t,e,n){for(var s=0,i=0,r=t.length;i<r;i++)s+=t[i].path.length;e=e.substr(s);var o={path:e,handler:n};t.push(o)}function i(t,e,n,r){var o=e.routes;for(var a in o)if(o.hasOwnProperty(a)){var l=t.slice();s(l,a,o[a]),e.children[a]?i(l,e.children[a],n,r):n.call(r,l)}}function r(t,s){var r=new e;t(n("",r,this.delegate)),i([],r,function(t){s?s(this,t):this.add(t)},this)}function o(t){W||"undefined"==typeof console||console.error("[vue-router] "+t)}function a(t,e){try{return e?decodeURIComponent(t):decodeURI(t)}catch(n){o("malformed URI"+(e?" component: ":": ")+t)}}function l(t){return"[object Array]"===Object.prototype.toString.call(t)}function h(t){this.string=t}function c(t){this.name=t}function u(t){this.name=t}function d(){}function p(t,e,n){"/"===t.charAt(0)&&(t=t.substr(1));var s=t.split("/"),i=[];n.val="";for(var r=0,o=s.length;r<o;r++){var a,l=s[r];(a=l.match(/^:([^\/]+)$/))?(i.push(new c(a[1])),e.push(a[1]),n.val+="3"):(a=l.match(/^\*([^\/]+)$/))?(i.push(new u(a[1])),n.val+="2",e.push(a[1])):""===l?(i.push(new d),n.val+="1"):(i.push(new h(l)),n.val+="4")}return n.val=+n.val,i}function f(t){this.charSpec=t,this.nextStates=[]}function _(t){return t.sort(function(t,e){return e.specificity.val-t.specificity.val})}function m(t,e){for(var n=[],s=0,i=t.length;s<i;s++){var r=t[s];n=n.concat(r.match(e))}return n}function v(t){this.queryParams=t||{}}function g(t,e,n){for(var s=t.handlers,i=t.regex,r=e.match(i),o=1,a=new v(n),l=0,h=s.length;l<h;l++){for(var c=s[l],u=c.names,d={},p=0,f=u.length;p<f;p++)d[u[p]]=r[o++];a.push({handler:c.handler,params:d,isDynamic:!!u.length})}return a}function y(t,e){return e.eachChar(function(e){t=t.put(e)}),t}function C(t){return t=t.replace(/\+/gm,"%20"),a(t,!0)}function b(t){"undefined"!=typeof console&&console.error("[vue-router] "+t)}function E(t,e,n){var s=t.match(/(\?.*)$/);if(s&&(s=s[1],t=t.slice(0,-s.length)),"?"===e.charAt(0))return t+e;var i=t.split("/");n&&i[i.length-1]||i.pop();for(var r=e.replace(/^\//,"").split("/"),o=0;o<r.length;o++){var a=r[o];"."!==a&&(".."===a?i.pop():i.push(a))}return""!==i[0]&&i.unshift(""),i.join("/")}function w(t){return t&&"function"==typeof t.then}function S(t,e){var n=t&&(t.$options||t.options);return n&&n.route&&n.route[e]}function L(t,e){J?J.$options.components._=t.component:J={resolve:K.Vue.prototype._resolveComponent,$options:{components:{_:t.component}}},J.resolve("_",function(n){t.component=n,e(n)})}function T(t,e,n){return void 0===e&&(e={}),t=t.replace(/:([^\/]+)/g,function(n,s){var i=e[s];return i||b('param "'+s+'" not found when generating path for "'+t+'" with params '+JSON.stringify(e)),i||""}),n&&(t+=z(n)),t}function A(t,e,n){var s=t.childVM;if(!s||!e)return!1;if(t.Component!==e.component)return!1;var i=S(s,"canReuse");return"boolean"==typeof i?i:!i||i.call(s,{to:n.to,from:n.from})}function I(t,e,n){var s=t.childVM,i=S(s,"canDeactivate");i?e.callHook(i,s,n,{expectBoolean:!0}):n()}function k(t,e,n){L(t,function(t){if(!e.aborted){var s=S(t,"canActivate");s?e.callHook(s,null,n,{expectBoolean:!0}):n()}})}function O(t,e,n){var s=t.childVM,i=S(s,"deactivate");i?e.callHooks(i,s,n):n()}function D(t,e,n,s,i){var r=e.activateQueue[n];if(!r)return x(t),t._bound&&t.setComponent(null),void(s&&s());var o=t.Component=r.component,a=S(o,"activate"),l=S(o,"data"),h=S(o,"waitForData");t.depth=n,t.activated=!1;var c=void 0,u=!(!l||h);if(i=i&&t.childVM&&t.childVM.constructor===o)c=t.childVM,c.$loadingRouteData=u;else if(x(t),t.unbuild(!0),c=t.build({_meta:{$loadingRouteData:u},created:function(){this._routerView=t}}),t.keepAlive){c.$loadingRouteData=u;var d=c._keepAliveRouterView;d&&(t.childView=d,c._keepAliveRouterView=null)}var p=function(){c.$destroy()},f=function(){if(i)return void(s&&s());var n=e.router;n._rendered||n._transitionOnLoad?t.transition(c):(t.setCurrent?t.setCurrent(c):t.childVM=c,c.$before(t.anchor,null,!1)),s&&s()},_=function(){t.childView&&D(t.childView,e,n+1,null,i||t.keepAlive),f()},m=function(){t.activated=!0,l&&h?R(c,e,l,_,p):(l&&R(c,e,l),_())};a?e.callHooks(a,c,m,{cleanup:p,postActivate:!0}):m()}function N(t,e){var n=t.childVM,s=S(n,"data");s&&R(n,e,s)}function R(t,e,n,s,i){t.$loadingRouteData=!0,e.callHooks(n,t,function(){t.$loadingRouteData=!1,t.$emit("route-data-loaded",t),s&&s()},{cleanup:i,postActivate:!0,processData:function(e){var n=[];if(M(e)&&Object.keys(e).forEach(function(s){var i=e[s];w(i)?n.push(i.then(function(e){t.$set(s,e)})):t.$set(s,i)}),n.length)return n[0].constructor.all(n)}})}function x(t){t.keepAlive&&t.childVM&&t.childView&&(t.childVM._keepAliveRouterView=t.childView),t.childView=null}function M(t){return"[object Object]"===Object.prototype.toString.call(t)}function P(t){return"[object Object]"===Object.prototype.toString.call(t)}function H(t){return t?Array.prototype.slice.call(t):[]}function $(t){var e=t.util,n=e.extend,s=e.isArray,i=e.defineReactive,r=t.prototype._init;t.prototype._init=function(t){t=t||{};var e=t._parent||t.parent||this,n=e.$router,s=e.$route;n&&(this.$router=n,n._children.push(this),this._defineMeta?this._defineMeta("$route",s):i(this,"$route",s)),r.call(this,t)};var o=t.prototype._destroy;t.prototype._destroy=function(){!this._isBeingDestroyed&&this.$router&&this.$router._children.$remove(this),o.apply(this,arguments)};var a=t.config.optionMergeStrategies,l=/^(data|activate|deactivate)$/;a&&(a.route=function(t,e){if(!e)return t;if(!t)return e;var i={};n(i,t);for(var r in e){var o=i[r],a=e[r];o&&l.test(r)?i[r]=(s(o)?o:[o]).concat(a):i[r]=a}return i})}function F(t){var e=t.util,n=t.directive("_component")||t.internalDirectives.component,s=e.extend({},n);e.extend(s,{_isRouterView:!0,bind:function(){var t=this.vm.$route;if(!t)return void b("<router-view> can only be used inside a router-enabled app.");this._isDynamicLiteral=!0,n.bind.call(this);for(var e=void 0,s=this.vm;s;){if(s._routerView){e=s._routerView;break}s=s.$parent}if(e)this.parentView=e,e.childView=this;else{var i=t.router;i._rootView=this}var r=t.router._currentTransition;if(!e&&r.done||e&&e.activated){var o=e?e.depth+1:0;D(this,r,o)}},unbind:function(){this.parentView&&(this.parentView.childView=null),n.unbind.call(this)}}),t.elementDirective("router-view",s)}function U(t){function e(t){return t.protocol===location.protocol&&t.hostname===location.hostname&&t.port===location.port}function n(t,e,n){if(e=e.trim(),e.indexOf(" ")===-1)return void n(t,e);for(var s=e.split(/\s+/),i=0,r=s.length;i<r;i++)n(t,s[i])}var s=t.util,i=s.bind,r=s.isObject,o=s.addClass,a=s.removeClass,l=t.directive("on").priority,h="__vue-router-link-update__",c=0;t.directive("link-active",{priority:9999,bind:function(){for(var t=this,e=String(c++),n=this.el.querySelectorAll("[v-link]"),s=0,i=n.length;s<i;s++){var r=n[s],o=r.getAttribute(h),a=o?o+","+e:e;r.setAttribute(h,a)}this.vm.$on(h,this.cb=function(n,s){n.activeIds.indexOf(e)>-1&&n.updateClasses(s,t.el)})},unbind:function(){this.vm.$off(h,this.cb)}}),t.directive("link",{priority:l-2,bind:function(){var t=this.vm;if(!t.$route)return void b("v-link can only be used inside a router-enabled app.");this.router=t.$route.router,this.unwatch=t.$watch("$route",i(this.onRouteUpdate,this));var e=this.el.getAttribute(h);e&&(this.el.removeAttribute(h),this.activeIds=e.split(",")),"A"===this.el.tagName&&"_blank"===this.el.getAttribute("target")||(this.handler=i(this.onClick,this),this.el.addEventListener("click",this.handler))},update:function(t){this.target=t,r(t)&&(this.append=t.append,this.exact=t.exact,this.prevActiveClass=this.activeClass,this.activeClass=t.activeClass),this.onRouteUpdate(this.vm.$route)},onClick:function(t){if(!(t.metaKey||t.ctrlKey||t.shiftKey||t.defaultPrevented||0!==t.button)){var n=this.target;if(n)t.preventDefault(),this.router.go(n);else{for(var s=t.target;"A"!==s.tagName&&s!==this.el;)s=s.parentNode;if("A"===s.tagName&&e(s)){t.preventDefault();var i=s.pathname;this.router.history.root&&(i=i.replace(this.router.history.rootRE,"")),this.router.go({path:i,replace:n&&n.replace,append:n&&n.append})}}}},onRouteUpdate:function(t){var e=this.router.stringifyPath(this.target);this.path!==e&&(this.path=e,this.updateActiveMatch(),this.updateHref()),this.activeIds?this.vm.$emit(h,this,t.path):this.updateClasses(t.path,this.el)},updateActiveMatch:function(){this.activeRE=this.path&&!this.exact?new RegExp("^"+this.path.replace(/\/$/,"").replace(ot,"").replace(rt,"\\$&")+"(\\/|$)"):null},updateHref:function(){if("A"===this.el.tagName){var t=this.path,e=this.router,n="/"===t.charAt(0),s=t&&("hash"===e.mode||n)?e.history.formatPath(t,this.append):t;s?this.el.href=s:this.el.removeAttribute("href")}},updateClasses:function(t,e){var s=this.activeClass||this.router._linkActiveClass;this.prevActiveClass&&this.prevActiveClass!==s&&n(e,this.prevActiveClass,a);var i=this.path.replace(ot,"");t=t.replace(ot,""),this.exact?i===t||"/"!==i.charAt(i.length-1)&&i===t.replace(it,"")?n(e,s,o):n(e,s,a):this.activeRE&&this.activeRE.test(t)?n(e,s,o):n(e,s,a)},unbind:function(){this.el.removeEventListener("click",this.handler),this.unwatch&&this.unwatch()}})}function V(t,e){var n=e.component;lt.util.isPlainObject(n)&&(n=e.component=lt.extend(n)),"function"!=typeof n&&(e.component=null,b('invalid component for route "'+t+'".'))}var j={};j.classCallCheck=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},t.prototype={to:function(t,e){var n=this.delegate;if(n&&n.willAddRoute&&(t=n.willAddRoute(this.matcher.target,t)),this.matcher.add(this.path,t),e){if(0===e.length)throw new Error("You must have an argument in the function passed to `to`");this.matcher.addChild(this.path,t,e,this.delegate)}return this}},e.prototype={add:function(t,e){this.routes[t]=e},addChild:function(t,s,i,r){var o=new e(s);this.children[t]=o;var a=n(t,o,r);r&&r.contextEntered&&r.contextEntered(s,a),i(a)}};var B=["/",".","*","+","?","|","(",")","[","]","{","}","\\"],Y=new RegExp("(\\"+B.join("|\\")+")","g"),W=!1;h.prototype={eachChar:function(t){for(var e,n=this.string,s=0,i=n.length;s<i;s++)e=n.charAt(s),t({validChars:e})},regex:function(){return this.string.replace(Y,"\\$1")},generate:function(){return this.string}},c.prototype={eachChar:function(t){t({invalidChars:"/",repeat:!0})},regex:function(){return"([^/]+)"},generate:function(t){var e=t[this.name];return null==e?":"+this.name:e}},u.prototype={eachChar:function(t){t({invalidChars:"",repeat:!0})},regex:function(){return"(.+)"},generate:function(t){var e=t[this.name];return null==e?":"+this.name:e}},d.prototype={eachChar:function(){},regex:function(){return""},generate:function(){return""}},f.prototype={get:function(t){for(var e=this.nextStates,n=0,s=e.length;n<s;n++){var i=e[n],r=i.charSpec.validChars===t.validChars;if(r=r&&i.charSpec.invalidChars===t.invalidChars)return i}},put:function(t){var e;return(e=this.get(t))?e:(e=new f(t),this.nextStates.push(e),t.repeat&&e.nextStates.push(e),e)},match:function(t){for(var e,n,s,i=this.nextStates,r=[],o=0,a=i.length;o<a;o++)e=i[o],n=e.charSpec,"undefined"!=typeof(s=n.validChars)?s.indexOf(t)!==-1&&r.push(e):"undefined"!=typeof(s=n.invalidChars)&&s.indexOf(t)===-1&&r.push(e);return r}};var G=Object.create||function(t){function e(){}return e.prototype=t,new e};v.prototype=G({splice:Array.prototype.splice,slice:Array.prototype.slice,push:Array.prototype.push,length:0,queryParams:null});var q=function(){this.rootState=new f,this.names={}};q.prototype={add:function(t,e){for(var n,s=this.rootState,i="^",r={},o=[],a=[],l=!0,h=0,c=t.length;h<c;h++){var u=t[h],f=[],_=p(u.path,f,r);a=a.concat(_);for(var m=0,v=_.length;m<v;m++){var g=_[m];g instanceof d||(l=!1,s=s.put({validChars:"/"}),i+="/",s=y(s,g),i+=g.regex())}var C={handler:u.handler,names:f};o.push(C)}l&&(s=s.put({validChars:"/"}),i+="/"),s.handlers=o,s.regex=new RegExp(i+"$"),s.specificity=r,(n=e&&e.as)&&(this.names[n]={segments:a,handlers:o})},handlersFor:function(t){var e=this.names[t],n=[];if(!e)throw new Error("There is no route named "+t);for(var s=0,i=e.handlers.length;s<i;s++)n.push(e.handlers[s]);return n},hasRoute:function(t){return!!this.names[t]},generate:function(t,e){var n=this.names[t],s="";if(!n)throw new Error("There is no route named "+t);for(var i=n.segments,r=0,o=i.length;r<o;r++){var a=i[r];a instanceof d||(s+="/",s+=a.generate(e))}return"/"!==s.charAt(0)&&(s="/"+s),e&&e.queryParams&&(s+=this.generateQueryString(e.queryParams)),s},generateQueryString:function(t){var e=[],n=[];for(var s in t)t.hasOwnProperty(s)&&n.push(s);n.sort();for(var i=0,r=n.length;i<r;i++){s=n[i];var o=t[s];if(null!=o){var a=encodeURIComponent(s);if(l(o))for(var h=0,c=o.length;h<c;h++){var u=s+"[]="+encodeURIComponent(o[h]);e.push(u)}else a+="="+encodeURIComponent(o),e.push(a)}}return 0===e.length?"":"?"+e.join("&")},parseQueryString:function(t){for(var e=t.split("&"),n={},s=0;s<e.length;s++){var i,r=e[s].split("="),o=C(r[0]),a=o.length,l=!1;1===r.length?i="true":(a>2&&"[]"===o.slice(a-2)&&(l=!0,o=o.slice(0,a-2),n[o]||(n[o]=[])),i=r[1]?C(r[1]):""),l?n[o].push(i):n[o]=i}return n},recognize:function(t,e){W=e;var n,s,i,r,o=[this.rootState],l={},h=!1;if(r=t.indexOf("?"),r!==-1){var c=t.substr(r+1,t.length);t=t.substr(0,r),c&&(l=this.parseQueryString(c))}if(t=a(t)){for("/"!==t.charAt(0)&&(t="/"+t),n=t.length,n>1&&"/"===t.charAt(n-1)&&(t=t.substr(0,n-1),h=!0),s=0,i=t.length;s<i&&(o=m(o,t.charAt(s)),o.length);s++);var u=[];for(s=0,i=o.length;s<i;s++)o[s].handlers&&u.push(o[s]);o=_(u);var d=u[0];return d&&d.handlers?(h&&"(.+)$"===d.regex.source.slice(-5)&&(t+="/"),g(d,t,l)):void 0}}},q.prototype.map=r;var z=q.prototype.generateQueryString,K={},J=void 0,X=/#.*$/,Z=function(){function t(e){var n=e.root,s=e.onChange;j.classCallCheck(this,t),n&&"/"!==n?("/"!==n.charAt(0)&&(n="/"+n),this.root=n.replace(/\/$/,""),this.rootRE=new RegExp("^\\"+this.root)):this.root=null,this.onChange=s;var i=document.querySelector("base");this.base=i&&i.getAttribute("href")}return t.prototype.start=function(){var t=this;this.listener=function(e){var n=location.pathname+location.search;t.root&&(n=n.replace(t.rootRE,"")),t.onChange(n,e&&e.state,location.hash)},window.addEventListener("popstate",this.listener),this.listener()},t.prototype.stop=function(){window.removeEventListener("popstate",this.listener)},t.prototype.go=function(t,e,n){var s=this.formatPath(t,n);e?history.replaceState({},"",s):(history.replaceState({pos:{x:window.pageXOffset,y:window.pageYOffset}},"",location.href),history.pushState({},"",s));var i=t.match(X),r=i&&i[0];t=s.replace(X,"").replace(this.rootRE,""),this.onChange(t,null,r)},t.prototype.formatPath=function(t,e){return"/"===t.charAt(0)?this.root?this.root+"/"+t.replace(/^\//,""):t:E(this.base||location.pathname,t,e)},t}(),Q=function(){function t(e){var n=e.hashbang,s=e.onChange;j.classCallCheck(this,t),this.hashbang=n,this.onChange=s}return t.prototype.start=function(){var t=this;this.listener=function(){var e=location.hash,n=e.replace(/^#!?/,"");"/"!==n.charAt(0)&&(n="/"+n);var s=t.formatPath(n);if(s!==e)return void location.replace(s);var i=location.search&&e.indexOf("?")>-1?"&"+location.search.slice(1):location.search;t.onChange(e.replace(/^#!?/,"")+i)},window.addEventListener("hashchange",this.listener),this.listener()},t.prototype.stop=function(){window.removeEventListener("hashchange",this.listener)},t.prototype.go=function(t,e,n){t=this.formatPath(t,n),e?location.replace(t):location.hash=t},t.prototype.formatPath=function(t,e){var n="/"===t.charAt(0),s="#"+(this.hashbang?"!":"");return n?s+t:s+E(location.hash.replace(/^#!?/,""),t,e)},t}(),tt=function(){function t(e){var n=e.onChange;j.classCallCheck(this,t),this.onChange=n,this.currentPath="/"}return t.prototype.start=function(){this.onChange("/")},t.prototype.stop=function(){},t.prototype.go=function(t,e,n){t=this.currentPath=this.formatPath(t,n),this.onChange(t)},t.prototype.formatPath=function(t,e){return"/"===t.charAt(0)?t:E(this.currentPath,t,e)},t}(),et=function(){function t(e,n,s){j.classCallCheck(this,t),this.router=e,this.to=n,this.from=s,this.next=null,this.aborted=!1,this.done=!1}return t.prototype.abort=function(){if(!this.aborted){this.aborted=!0;var t=!this.from.path&&"/"===this.to.path;t||this.router.replace(this.from.path||"/")}},t.prototype.redirect=function(t){this.aborted||(this.aborted=!0,"string"==typeof t?t=T(t,this.to.params,this.to.query):(t.params=t.params||this.to.params,t.query=t.query||this.to.query),this.router.replace(t))},t.prototype.start=function(t){for(var e=this,n=[],s=this.router._rootView;s;)n.unshift(s),s=s.childView;var i=n.slice().reverse(),r=this.activateQueue=H(this.to.matched).map(function(t){return t.handler}),o=void 0,a=void 0;for(o=0;o<i.length&&A(i[o],r[o],e);o++);o>0&&(a=i.slice(0,o),n=i.slice(o).reverse(),r=r.slice(o)),e.runQueue(n,I,function(){e.runQueue(r,k,function(){e.runQueue(n,O,function(){if(e.router._onTransitionValidated(e),a&&a.forEach(function(t){return N(t,e)}),n.length){var s=n[n.length-1],i=a?a.length:0;D(s,e,i,t)}else t()})})})},t.prototype.runQueue=function(t,e,n){function s(r){r>=t.length?n():e(t[r],i,function(){s(r+1)})}var i=this;s(0)},t.prototype.callHook=function(t,e,n){var s=arguments.length<=3||void 0===arguments[3]?{}:arguments[3],i=s.expectBoolean,r=void 0!==i&&i,o=s.postActivate,a=void 0!==o&&o,l=s.processData,h=s.cleanup,c=this,u=!1,d=function(){h&&h(),c.abort()},p=function(t){if(a?_():d(),t&&!c.router._suppress)throw b("Uncaught error during transition: "),t instanceof Error?t:new Error(t)},f=function(t){try{p(t)}catch(e){setTimeout(function(){throw e},0)}},_=function(){return u?void b("transition.next() should be called only once."):(u=!0,c.aborted?void(h&&h()):void(n&&n()))},m=function(e){"boolean"==typeof e?e?_():d():w(e)?e.then(function(t){t?_():d()},f):t.length||_()},v=function(t){var e=void 0;try{e=l(t)}catch(n){return p(n)}w(e)?e.then(_,f):_()},g={to:c.to,from:c.from,abort:d,next:l?v:_,redirect:function(){c.redirect.apply(c,arguments)}},y=void 0;try{y=t.call(e,g)}catch(C){return p(C)}r?m(y):w(y)?l?y.then(v,f):y.then(_,f):l&&P(y)?v(y):t.length||_()},t.prototype.callHooks=function(t,e,n,s){var i=this;Array.isArray(t)?this.runQueue(t,function(t,n,r){i.aborted||i.callHook(t,e,r,s)},n):this.callHook(t,e,n,s)},t}(),nt=/^(component|subRoutes|fullPath)$/,st=function ct(t,e){var n=this;j.classCallCheck(this,ct);var s=e._recognizer.recognize(t);s&&([].forEach.call(s,function(t){for(var e in t.handler)nt.test(e)||(n[e]=t.handler[e])}),this.query=s.queryParams,this.params=[].reduce.call(s,function(t,e){if(e.params)for(var n in e.params)t[n]=e.params[n];return t},{})),this.path=t,this.matched=s||e._notFoundHandler,Object.defineProperty(this,"router",{enumerable:!1,value:e}),Object.freeze(this)},it=/\/$/,rt=/[-.*+?^${}()|[\]\/\\]/g,ot=/\?.*$/,at={"abstract":tt,hash:Q,html5:Z},lt=void 0,ht=function(){function t(){var e=this,n=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],s=n.hashbang,i=void 0===s||s,r=n["abstract"],o=void 0!==r&&r,a=n.history,l=void 0!==a&&a,h=n.saveScrollPosition,c=void 0!==h&&h,u=n.transitionOnLoad,d=void 0!==u&&u,p=n.suppressTransitionError,f=void 0!==p&&p,_=n.root,m=void 0===_?null:_,v=n.linkActiveClass,g=void 0===v?"v-link-active":v;if(j.classCallCheck(this,t),!t.installed)throw new Error("Please install the Router with Vue.use() before creating an instance.");this.app=null,this._children=[],this._recognizer=new q,this._guardRecognizer=new q,this._started=!1,this._startCb=null,this._currentRoute={},this._currentTransition=null,this._previousTransition=null,this._notFoundHandler=null,this._notFoundRedirect=null,this._beforeEachHooks=[],this._afterEachHooks=[],this._rendered=!1,this._transitionOnLoad=d,this._root=m,this._abstract=o,this._hashbang=i;var y="undefined"!=typeof window&&window.history&&window.history.pushState;this._history=l&&y,this._historyFallback=l&&!y;var C=lt.util.inBrowser;this.mode=!C||this._abstract?"abstract":this._history?"html5":"hash";var b=at[this.mode];this.history=new b({root:m,hashbang:this._hashbang,onChange:function(t,n,s){e._match(t,n,s)}}),this._saveScrollPosition=c,this._linkActiveClass=g,this._suppress=f}return t.prototype.map=function(t){for(var e in t)this.on(e,t[e]);return this},t.prototype.on=function(t,e){return"*"===t?this._notFound(e):this._addRoute(t,e,[]),this},t.prototype.redirect=function(t){for(var e in t)this._addRedirect(e,t[e]);return this},t.prototype.alias=function(t){for(var e in t)this._addAlias(e,t[e]);return this},t.prototype.beforeEach=function(t){return this._beforeEachHooks.push(t),this},t.prototype.afterEach=function(t){return this._afterEachHooks.push(t),this},t.prototype.go=function(t){var e=!1,n=!1;lt.util.isObject(t)&&(e=t.replace,n=t.append),t=this.stringifyPath(t),t&&this.history.go(t,e,n)},t.prototype.replace=function(t){"string"==typeof t&&(t={path:t}),t.replace=!0,this.go(t)},t.prototype.start=function(t,e,n){if(this._started)return void b("already started.");if(this._started=!0,this._startCb=n,!this.app){if(!t||!e)throw new Error("Must start vue-router with a component and a root container.");if(t instanceof lt)throw new Error("Must start vue-router with a component, not a Vue instance.");this._appContainer=e;var s=this._appConstructor="function"==typeof t?t:lt.extend(t);s.options.name=s.options.name||"RouterApp"}if(this._historyFallback){var i=window.location,r=new Z({root:this._root}),o=r.root?i.pathname.replace(r.rootRE,""):i.pathname;if(o&&"/"!==o)return void i.assign((r.root||"")+"/"+this.history.formatPath(o)+i.search)}this.history.start()},t.prototype.stop=function(){this.history.stop(),this._started=!1},t.prototype.stringifyPath=function(t){var e="";if(t&&"object"==typeof t){if(t.name){var n=lt.util.extend,s=this._currentTransition&&this._currentTransition.to.params,i=t.params||{},r=s?n(n({},s),i):i;e=encodeURI(this._recognizer.generate(t.name,r))}else t.path&&(e=encodeURI(t.path));if(t.query){var o=this._recognizer.generateQueryString(t.query);e+=e.indexOf("?")>-1?"&"+o.slice(1):o}}else e=encodeURI(t?t+"":"");return e},t.prototype._addRoute=function(t,e,n){if(V(t,e),e.path=t,e.fullPath=(n.reduce(function(t,e){return t+e.path},"")+t).replace("//","/"),n.push({path:t,handler:e}),this._recognizer.add(n,{as:e.name}),e.subRoutes)for(var s in e.subRoutes)this._addRoute(s,e.subRoutes[s],n.slice())},t.prototype._notFound=function(t){V("*",t),this._notFoundHandler=[{handler:t}]},t.prototype._addRedirect=function(t,e){"*"===t?this._notFoundRedirect=e:this._addGuard(t,e,this.replace)},t.prototype._addAlias=function(t,e){this._addGuard(t,e,this._match)},t.prototype._addGuard=function(t,e,n){var s=this;this._guardRecognizer.add([{path:t,handler:function(t,i){var r=T(e,t.params,i);n.call(s,r)}}])},t.prototype._checkGuard=function(t){var e=this._guardRecognizer.recognize(t,!0);return e?(e[0].handler(e[0],e.queryParams),!0):this._notFoundRedirect&&(e=this._recognizer.recognize(t),!e)?(this.replace(this._notFoundRedirect),!0):void 0},t.prototype._match=function(t,e,n){var s=this;if(!this._checkGuard(t)){var i=this._currentRoute,r=this._currentTransition;if(r){if(r.to.path===t)return;if(i.path===t)return r.aborted=!0,void(this._currentTransition=this._prevTransition);r.aborted=!0}var o=new st(t,this),a=new et(this,o,i);this._prevTransition=r,this._currentTransition=a,this.app||!function(){var t=s;s.app=new s._appConstructor({el:s._appContainer,created:function(){this.$router=t},_meta:{$route:o}})}();var l=this._beforeEachHooks,h=function(){a.start(function(){s._postTransition(o,e,n)})};l.length?a.runQueue(l,function(t,e,n){a===s._currentTransition&&a.callHook(t,null,n,{expectBoolean:!0})},h):h(),!this._rendered&&this._startCb&&this._startCb.call(null),this._rendered=!0}},t.prototype._onTransitionValidated=function(t){var e=this._currentRoute=t.to;this.app.$route!==e&&(this.app.$route=e,this._children.forEach(function(t){t.$route=e})),this._afterEachHooks.length&&this._afterEachHooks.forEach(function(e){return e.call(null,{to:t.to,from:t.from})}),this._currentTransition.done=!0},t.prototype._postTransition=function(t,e,n){var s=e&&e.pos;s&&this._saveScrollPosition?lt.nextTick(function(){window.scrollTo(s.x,s.y)}):n&&lt.nextTick(function(){var t=document.getElementById(n.slice(1));t&&window.scrollTo(window.scrollX,t.offsetTop)})},t}();return ht.installed=!1,ht.install=function(t){return ht.installed?void b("already installed."):(lt=t,$(lt),F(lt),U(lt),K.Vue=lt,void(ht.installed=!0))},"undefined"!=typeof window&&window.Vue&&window.Vue.use(ht),ht})},{}],8:[function(t,e,n){(function(t,n){"use strict";function s(t,e,n){if(r(t,e))return void(t[e]=n);if(t._isVue)return void s(t._data,e,n);var i=t.__ob__;if(!i)return void(t[e]=n);if(i.convert(e,n),i.dep.notify(),i.vms)for(var o=i.vms.length;o--;){var a=i.vms[o];a._proxy(e),a._digest()}return n}function i(t,e){if(r(t,e)){delete t[e];var n=t.__ob__;if(!n)return void(t._isVue&&(delete t._data[e],t._digest()));if(n.dep.notify(),n.vms)for(var s=n.vms.length;s--;){var i=n.vms[s];i._unproxy(e),i._digest()}}}function r(t,e){return Rn.call(t,e)}function o(t){return xn.test(t)}function a(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function l(t){return null==t?"":t.toString()}function h(t){if("string"!=typeof t)return t;var e=Number(t);return isNaN(e)?t:e}function c(t){return"true"===t||"false"!==t&&t}function u(t){var e=t.charCodeAt(0),n=t.charCodeAt(t.length-1);return e!==n||34!==e&&39!==e?t:t.slice(1,-1)}function d(t){return t.replace(Mn,p)}function p(t,e){return e?e.toUpperCase():""}function f(t){return t.replace(Pn,"$1-$2").toLowerCase()}function _(t){return t.replace(Hn,p)}function m(t,e){return function(n){var s=arguments.length;return s?s>1?t.apply(e,arguments):t.call(e,n):t.call(e)}}function v(t,e){e=e||0;for(var n=t.length-e,s=new Array(n);n--;)s[n]=t[n+e];return s}function g(t,e){for(var n=Object.keys(e),s=n.length;s--;)t[n[s]]=e[n[s]];return t}function y(t){return null!==t&&"object"==typeof t}function C(t){return $n.call(t)===Fn}function b(t,e,n,s){Object.defineProperty(t,e,{value:n,enumerable:!!s,writable:!0,configurable:!0})}function E(t,e){var n,s,i,r,o,a=function l(){var a=Date.now()-r;a<e&&a>=0?n=setTimeout(l,e-a):(n=null,o=t.apply(i,s),n||(i=s=null))};return function(){return i=this,s=arguments,r=Date.now(),n||(n=setTimeout(a,e)),o}}function w(t,e){for(var n=t.length;n--;)if(t[n]===e)return n;return-1}function S(t){var e=function n(){if(!n.cancelled)return t.apply(this,arguments)};return e.cancel=function(){e.cancelled=!0},e}function L(t,e){return t==e||!(!y(t)||!y(e))&&JSON.stringify(t)===JSON.stringify(e)}function T(t){this.size=0,this.limit=t,this.head=this.tail=void 0,this._keymap=Object.create(null)}function A(){var t,e=as.slice(ps,us).trim();if(e){t={};var n=e.match(Cs);t.name=n[0],n.length>1&&(t.args=n.slice(1).map(I))}t&&(ls.filters=ls.filters||[]).push(t),ps=us+1}function I(t){if(bs.test(t))return{value:h(t),dynamic:!1};var e=u(t),n=e===t;return{value:n?t:e,dynamic:n}}function k(t){var e=ys.get(t);if(e)return e;for(as=t,fs=_s=!1,ms=vs=gs=0,ps=0,ls={},us=0,ds=as.length;us<ds;us++)if(cs=hs,hs=as.charCodeAt(us),fs)39===hs&&92!==cs&&(fs=!fs);else if(_s)34===hs&&92!==cs&&(_s=!_s);else if(124===hs&&124!==as.charCodeAt(us+1)&&124!==as.charCodeAt(us-1))null==ls.expression?(ps=us+1,ls.expression=as.slice(0,us).trim()):A();else switch(hs){case 34:_s=!0;break;case 39:fs=!0;break;case 40:gs++;break;case 41:gs--;break;case 91:vs++;break;case 93:vs--;break;case 123:ms++;break;case 125:ms--}return null==ls.expression?ls.expression=as.slice(0,us).trim():0!==ps&&A(),ys.put(t,ls),ls}function O(t){return t.replace(ws,"\\$&")}function D(){var t=O(Ds.delimiters[0]),e=O(Ds.delimiters[1]),n=O(Ds.unsafeDelimiters[0]),s=O(Ds.unsafeDelimiters[1]);Ls=new RegExp(n+"((?:.|\\n)+?)"+s+"|"+t+"((?:.|\\n)+?)"+e,"g"),Ts=new RegExp("^"+n+"((?:.|\\n)+?)"+s+"$"),Ss=new T(1e3)}function N(t){Ss||D();var e=Ss.get(t);if(e)return e;if(!Ls.test(t))return null;for(var n,s,i,r,o,a,l=[],h=Ls.lastIndex=0;n=Ls.exec(t);)s=n.index,s>h&&l.push({value:t.slice(h,s)}),i=Ts.test(n[0]),r=i?n[1]:n[2],o=r.charCodeAt(0),a=42===o,r=a?r.slice(1):r,l.push({tag:!0,value:r.trim(),html:i,oneTime:a}),h=s+n[0].length;return h<t.length&&l.push({value:t.slice(h)}),Ss.put(t,l),l}function R(t,e){return t.length>1?t.map(function(t){return x(t,e)}).join("+"):x(t[0],e,!0)}function x(t,e,n){return t.tag?t.oneTime&&e?'"'+e.$eval(t.value)+'"':M(t.value,n):'"'+t.value+'"'}function M(t,e){if(As.test(t)){var n=k(t);return n.filters?"this._applyFilters("+n.expression+",null,"+JSON.stringify(n.filters)+",false)":"("+t+")"}return e?t:"("+t+")"}function P(t,e,n,s){F(t,1,function(){e.appendChild(t)},n,s)}function H(t,e,n,s){F(t,1,function(){W(t,e)},n,s)}function $(t,e,n){F(t,-1,function(){q(t)},e,n)}function F(t,e,n,s,i){var r=t.__v_trans;if(!r||!r.hooks&&!Qn||!s._isCompiled||s.$parent&&!s.$parent._isCompiled)return n(),void(i&&i());var o=e>0?"enter":"leave";r[o](n,i)}function U(e){if("string"==typeof e){var n=e;e=document.querySelector(e),e||"production"!==t.env.NODE_ENV&&Ns("Cannot find element: "+n)}return e}function V(t){if(!t)return!1;var e=t.ownerDocument.documentElement,n=t.parentNode;return e===t||e===n||!(!n||1!==n.nodeType||!e.contains(n))}function j(t,e){var n=t.getAttribute(e);return null!==n&&t.removeAttribute(e),n}function B(t,e){var n=j(t,":"+e);return null===n&&(n=j(t,"v-bind:"+e)),n}function Y(t,e){return t.hasAttribute(e)||t.hasAttribute(":"+e)||t.hasAttribute("v-bind:"+e)}function W(t,e){e.parentNode.insertBefore(t,e)}function G(t,e){e.nextSibling?W(t,e.nextSibling):e.parentNode.appendChild(t)}function q(t){t.parentNode.removeChild(t)}function z(t,e){e.firstChild?W(t,e.firstChild):e.appendChild(t)}function K(t,e){var n=t.parentNode;n&&n.replaceChild(e,t)}function J(t,e,n,s){t.addEventListener(e,n,s)}function X(t,e,n){t.removeEventListener(e,n)}function Z(t){var e=t.className;return"object"==typeof e&&(e=e.baseVal||""),e}function Q(t,e){Gn&&!/svg$/.test(t.namespaceURI)?t.className=e:t.setAttribute("class",e)}function tt(t,e){if(t.classList)t.classList.add(e);else{var n=" "+Z(t)+" ";n.indexOf(" "+e+" ")<0&&Q(t,(n+e).trim())}}function et(t,e){if(t.classList)t.classList.remove(e);else{for(var n=" "+Z(t)+" ",s=" "+e+" ";n.indexOf(s)>=0;)n=n.replace(s," ");Q(t,n.trim())}t.className||t.removeAttribute("class")}function nt(t,e){var n,s;if(rt(t)&&ct(t.content)&&(t=t.content),t.hasChildNodes())for(st(t),s=e?document.createDocumentFragment():document.createElement("div");n=t.firstChild;)s.appendChild(n);return s}function st(t){for(var e;e=t.firstChild,it(e);)t.removeChild(e);for(;e=t.lastChild,it(e);)t.removeChild(e)}function it(t){return t&&(3===t.nodeType&&!t.data.trim()||8===t.nodeType)}function rt(t){return t.tagName&&"template"===t.tagName.toLowerCase()}function ot(t,e){var n=Ds.debug?document.createComment(t):document.createTextNode(e?" ":"");return n.__v_anchor=!0,n}function at(t){if(t.hasAttributes())for(var e=t.attributes,n=0,s=e.length;n<s;n++){var i=e[n].name;if(Ms.test(i))return d(i.replace(Ms,""))}}function lt(t,e,n){for(var s;t!==e;)s=t.nextSibling,n(t),t=s;n(e)}function ht(t,e,n,s,i){function r(){if(a++,o&&a>=l.length){for(var t=0;t<l.length;t++)s.appendChild(l[t]);i&&i()}}var o=!1,a=0,l=[];lt(t,e,function(t){t===e&&(o=!0),l.push(t),$(t,n,r)})}function ct(t){return t&&11===t.nodeType}function ut(t){if(t.outerHTML)return t.outerHTML;var e=document.createElement("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML}function dt(e,n){var s=e.tagName.toLowerCase(),i=e.hasAttributes();if(Ps.test(s)||Hs.test(s)){if(i)return pt(e,n)}else{if(Ct(n,"components",s))return{id:s};var r=i&&pt(e,n);if(r)return r;if("production"!==t.env.NODE_ENV){var o=n._componentNameMap&&n._componentNameMap[s];o?Ns("Unknown custom element: <"+s+"> - did you mean <"+o+">? HTML is case-insensitive, remember to use kebab-case in templates."):$s(e,s)&&Ns("Unknown custom element: <"+s+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.')}}}function pt(t,e){
var n=t.getAttribute("is");if(null!=n){if(Ct(e,"components",n))return t.removeAttribute("is"),{id:n}}else if(n=B(t,"is"),null!=n)return{id:n,dynamic:!0}}function ft(t,e){var n,i,o;for(n in e)i=t[n],o=e[n],r(t,n)?y(i)&&y(o)&&ft(i,o):s(t,n,o);return t}function _t(t,e){var n=Object.create(t||null);return e?g(n,gt(e)):n}function mt(e){if(e.components){var n,s=e.components=gt(e.components),i=Object.keys(s);if("production"!==t.env.NODE_ENV)var r=e._componentNameMap={};for(var o=0,a=i.length;o<a;o++){var l=i[o];Ps.test(l)||Hs.test(l)?"production"!==t.env.NODE_ENV&&Ns("Do not use built-in or reserved HTML elements as component id: "+l):("production"!==t.env.NODE_ENV&&(r[l.replace(/-/g,"").toLowerCase()]=f(l)),n=s[l],C(n)&&(s[l]=An.extend(n)))}}}function vt(t){var e,n,s=t.props;if(Un(s))for(t.props={},e=s.length;e--;)n=s[e],"string"==typeof n?t.props[n]=null:n.name&&(t.props[n.name]=n);else if(C(s)){var i=Object.keys(s);for(e=i.length;e--;)n=s[i[e]],"function"==typeof n&&(s[i[e]]={type:n})}}function gt(e){if(Un(e)){for(var n,s={},i=e.length;i--;){n=e[i];var r="function"==typeof n?n.options&&n.options.name||n.id:n.name||n.id;r?s[r]=n:"production"!==t.env.NODE_ENV&&Ns('Array-syntax assets must provide a "name" or "id" field.')}return s}return e}function yt(e,n,s){function i(t){var i=Fs[t]||Us;a[t]=i(e[t],n[t],s,t)}mt(n),vt(n),"production"!==t.env.NODE_ENV&&n.propsData&&!s&&Ns("propsData can only be used as an instantiation option.");var o,a={};if(n["extends"]&&(e="function"==typeof n["extends"]?yt(e,n["extends"].options,s):yt(e,n["extends"],s)),n.mixins)for(var l=0,h=n.mixins.length;l<h;l++){var c=n.mixins[l],u=c.prototype instanceof An?c.options:c;e=yt(e,u,s)}for(o in e)i(o);for(o in n)r(e,o)||i(o);return a}function Ct(e,n,s,i){if("string"==typeof s){var r,o=e[n],a=o[s]||o[r=d(s)]||o[r.charAt(0).toUpperCase()+r.slice(1)];return"production"!==t.env.NODE_ENV&&i&&!a&&Ns("Failed to resolve "+n.slice(0,-1)+": "+s,e),a}}function bt(){this.id=Vs++,this.subs=[]}function Et(t){Ws=!1,t(),Ws=!0}function wt(t){if(this.value=t,this.dep=new bt,b(t,"__ob__",this),Un(t)){var e=Vn?St:Lt;e(t,Bs,Ys),this.observeArray(t)}else this.walk(t)}function St(t,e){t.__proto__=e}function Lt(t,e,n){for(var s=0,i=n.length;s<i;s++){var r=n[s];b(t,r,e[r])}}function Tt(t,e){if(t&&"object"==typeof t){var n;return r(t,"__ob__")&&t.__ob__ instanceof wt?n=t.__ob__:Ws&&(Un(t)||C(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new wt(t)),n&&e&&n.addVm(e),n}}function At(t,e,n){var s=new bt,i=Object.getOwnPropertyDescriptor(t,e);if(!i||i.configurable!==!1){var r=i&&i.get,o=i&&i.set,a=Tt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=r?r.call(t):n;if(bt.target&&(s.depend(),a&&a.dep.depend(),Un(e)))for(var i,o=0,l=e.length;o<l;o++)i=e[o],i&&i.__ob__&&i.__ob__.dep.depend();return e},set:function(e){var i=r?r.call(t):n;e!==i&&(o?o.call(t,e):n=e,a=Tt(e),s.notify())}})}}function It(t){t.prototype._init=function(t){t=t||{},this.$el=null,this.$parent=t.parent,this.$root=this.$parent?this.$parent.$root:this,this.$children=[],this.$refs={},this.$els={},this._watchers=[],this._directives=[],this._uid=qs++,this._isVue=!0,this._events={},this._eventsCount={},this._isFragment=!1,this._fragment=this._fragmentStart=this._fragmentEnd=null,this._isCompiled=this._isDestroyed=this._isReady=this._isAttached=this._isBeingDestroyed=this._vForRemoving=!1,this._unlinkFn=null,this._context=t._context||this.$parent,this._scope=t._scope,this._frag=t._frag,this._frag&&this._frag.children.push(this),this.$parent&&this.$parent.$children.push(this),t=this.$options=yt(this.constructor.options,t,this),this._updateRef(),this._data={},this._callHook("init"),this._initState(),this._initEvents(),this._callHook("created"),t.el&&this.$mount(t.el)}}function kt(t){if(void 0===t)return"eof";var e=t.charCodeAt(0);switch(e){case 91:case 93:case 46:case 34:case 39:case 48:return t;case 95:case 36:return"ident";case 32:case 9:case 10:case 13:case 160:case 65279:case 8232:case 8233:return"ws"}return e>=97&&e<=122||e>=65&&e<=90?"ident":e>=49&&e<=57?"number":"else"}function Ot(t){var e=t.trim();return("0"!==t.charAt(0)||!isNaN(t))&&(o(e)?u(e):"*"+e)}function Dt(t){function e(){var e=t[c+1];if(u===ii&&"'"===e||u===ri&&'"'===e)return c++,s="\\"+e,p[Ks](),!0}var n,s,i,r,o,a,l,h=[],c=-1,u=Qs,d=0,p=[];for(p[Js]=function(){void 0!==i&&(h.push(i),i=void 0)},p[Ks]=function(){void 0===i?i=s:i+=s},p[Xs]=function(){p[Ks](),d++},p[Zs]=function(){if(d>0)d--,u=si,p[Ks]();else{if(d=0,i=Ot(i),i===!1)return!1;p[Js]()}};null!=u;)if(c++,n=t[c],"\\"!==n||!e()){if(r=kt(n),l=li[u],o=l[r]||l["else"]||ai,o===ai)return;if(u=o[0],a=p[o[1]],a&&(s=o[2],s=void 0===s?n:s,a()===!1))return;if(u===oi)return h.raw=t,h}}function Nt(t){var e=zs.get(t);return e||(e=Dt(t),e&&zs.put(t,e)),e}function Rt(t,e){return jt(e).get(t)}function xt(e,n,i){var r=e;if("string"==typeof n&&(n=Dt(n)),!n||!y(e))return!1;for(var o,a,l=0,h=n.length;l<h;l++)o=e,a=n[l],"*"===a.charAt(0)&&(a=jt(a.slice(1)).get.call(r,r)),l<h-1?(e=e[a],y(e)||(e={},"production"!==t.env.NODE_ENV&&o._isVue&&hi(n,o),s(o,a,e))):Un(e)?e.$set(a,i):a in e?e[a]=i:("production"!==t.env.NODE_ENV&&e._isVue&&hi(n,e),s(e,a,i));return!0}function Mt(){}function Pt(t,e){var n=wi.length;return wi[n]=e?t.replace(vi,"\\n"):t,'"'+n+'"'}function Ht(t){var e=t.charAt(0),n=t.slice(1);return pi.test(n)?t:(n=n.indexOf('"')>-1?n.replace(yi,$t):n,e+"scope."+n)}function $t(t,e){return wi[e]}function Ft(e){_i.test(e)&&"production"!==t.env.NODE_ENV&&Ns("Avoid using reserved keywords in expression: "+e),wi.length=0;var n=e.replace(gi,Pt).replace(mi,"");return n=(" "+n).replace(bi,Ht).replace(yi,$t),Ut(n)}function Ut(e){try{return new Function("scope","return "+e+";")}catch(n){return"production"!==t.env.NODE_ENV&&Ns(n.toString().match(/unsafe-eval|CSP/)?"It seems you are using the default build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. Use the CSP-compliant build instead: http://vuejs.org/guide/installation.html#CSP-compliant-build":"Invalid expression. Generated function body: "+e),Mt}}function Vt(e){var n=Nt(e);return n?function(t,e){xt(t,n,e)}:void("production"!==t.env.NODE_ENV&&Ns("Invalid setter expression: "+e))}function jt(t,e){t=t.trim();var n=ui.get(t);if(n)return e&&!n.set&&(n.set=Vt(n.exp)),n;var s={exp:t};return s.get=Bt(t)&&t.indexOf("[")<0?Ut("scope."+t):Ft(t),e&&(s.set=Vt(t)),ui.put(t,s),s}function Bt(t){return Ci.test(t)&&!Ei.test(t)&&"Math."!==t.slice(0,5)}function Yt(){Li.length=0,Ti.length=0,Ai={},Ii={},ki=!1}function Wt(){for(var t=!0;t;)t=!1,Gt(Li),Gt(Ti),Li.length?t=!0:(Bn&&Ds.devtools&&Bn.emit("flush"),Yt())}function Gt(e){for(var n=0;n<e.length;n++){var s=e[n],i=s.id;if(Ai[i]=null,s.run(),"production"!==t.env.NODE_ENV&&null!=Ai[i]&&(Ii[i]=(Ii[i]||0)+1,Ii[i]>Ds._maxUpdateCount)){Ns('You may have an infinite update loop for watcher with expression "'+s.expression+'"',s.vm);break}}e.length=0}function qt(t){var e=t.id;if(null==Ai[e]){var n=t.user?Ti:Li;Ai[e]=n.length,n.push(t),ki||(ki=!0,is(Wt))}}function zt(t,e,n,s){s&&g(this,s);var i="function"==typeof e;if(this.vm=t,t._watchers.push(this),this.expression=e,this.cb=n,this.id=++Oi,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new rs,this.newDepIds=new rs,this.prevError=null,i)this.getter=e,this.setter=void 0;else{var r=jt(e,this.twoWay);this.getter=r.get,this.setter=r.set}this.value=this.lazy?void 0:this.get(),this.queued=this.shallow=!1}function Kt(t,e){var n=void 0,s=void 0;e||(e=Di,e.clear());var i=Un(t),r=y(t);if((i||r)&&Object.isExtensible(t)){if(t.__ob__){var o=t.__ob__.dep.id;if(e.has(o))return;e.add(o)}if(i)for(n=t.length;n--;)Kt(t[n],e);else if(r)for(s=Object.keys(t),n=s.length;n--;)Kt(t[s[n]],e)}}function Jt(t){return rt(t)&&ct(t.content)}function Xt(t,e){var n=e?t:t.trim(),s=Ri.get(n);if(s)return s;var i=document.createDocumentFragment(),r=t.match(Pi),o=Hi.test(t),a=$i.test(t);if(r||o||a){var l=r&&r[1],h=Mi[l]||Mi.efault,c=h[0],u=h[1],d=h[2],p=document.createElement("div");for(p.innerHTML=u+t+d;c--;)p=p.lastChild;for(var f;f=p.firstChild;)i.appendChild(f)}else i.appendChild(document.createTextNode(t));return e||st(i),Ri.put(n,i),i}function Zt(t){if(Jt(t))return Xt(t.innerHTML);if("SCRIPT"===t.tagName)return Xt(t.textContent);for(var e,n=Qt(t),s=document.createDocumentFragment();e=n.firstChild;)s.appendChild(e);return st(s),s}function Qt(t){if(!t.querySelectorAll)return t.cloneNode();var e,n,s,i=t.cloneNode(!0);if(Fi){var r=i;if(Jt(t)&&(t=t.content,r=i.content),n=t.querySelectorAll("template"),n.length)for(s=r.querySelectorAll("template"),e=s.length;e--;)s[e].parentNode.replaceChild(Qt(n[e]),s[e])}if(Ui)if("TEXTAREA"===t.tagName)i.value=t.value;else if(n=t.querySelectorAll("textarea"),n.length)for(s=i.querySelectorAll("textarea"),e=s.length;e--;)s[e].value=n[e].value;return i}function te(t,e,n){var s,i;return ct(t)?(st(t),e?Qt(t):t):("string"==typeof t?n||"#"!==t.charAt(0)?i=Xt(t,n):(i=xi.get(t),i||(s=document.getElementById(t.slice(1)),s&&(i=Zt(s),xi.put(t,i)))):t.nodeType&&(i=Zt(t)),i&&e?Qt(i):i)}function ee(t,e,n,s,i,r){this.children=[],this.childFrags=[],this.vm=e,this.scope=i,this.inserted=!1,this.parentFrag=r,r&&r.childFrags.push(this),this.unlink=t(e,n,s,i,this);var o=this.single=1===n.childNodes.length&&!n.childNodes[0].__v_anchor;o?(this.node=n.childNodes[0],this.before=ne,this.remove=se):(this.node=ot("fragment-start"),this.end=ot("fragment-end"),this.frag=n,z(this.node,n),n.appendChild(this.end),this.before=ie,this.remove=re),this.node.__v_frag=this}function ne(t,e){this.inserted=!0;var n=e!==!1?H:W;n(this.node,t,this.vm),V(this.node)&&this.callHook(oe)}function se(){this.inserted=!1;var t=V(this.node),e=this;this.beforeRemove(),$(this.node,this.vm,function(){t&&e.callHook(ae),e.destroy()})}function ie(t,e){this.inserted=!0;var n=this.vm,s=e!==!1?H:W;lt(this.node,this.end,function(e){s(e,t,n)}),V(this.node)&&this.callHook(oe)}function re(){this.inserted=!1;var t=this,e=V(this.node);this.beforeRemove(),ht(this.node,this.end,this.vm,this.frag,function(){e&&t.callHook(ae),t.destroy()})}function oe(t){!t._isAttached&&V(t.$el)&&t._callHook("attached")}function ae(t){t._isAttached&&!V(t.$el)&&t._callHook("detached")}function le(t,e){this.vm=t;var n,s="string"==typeof e;s||rt(e)&&!e.hasAttribute("v-if")?n=te(e,!0):(n=document.createDocumentFragment(),n.appendChild(e)),this.template=n;var i,r=t.constructor.cid;if(r>0){var o=r+(s?e:ut(e));i=Bi.get(o),i||(i=Fe(n,t.$options,!0),Bi.put(o,i))}else i=Fe(n,t.$options,!0);this.linker=i}function he(t,e,n){var s=t.node.previousSibling;if(s){for(t=s.__v_frag;!(t&&t.forId===n&&t.inserted||s===e);){if(s=s.previousSibling,!s)return;t=s.__v_frag}return t}}function ce(t){var e=t.node;if(t.end)for(;!e.__vue__&&e!==t.end&&e.nextSibling;)e=e.nextSibling;return e.__vue__}function ue(t){for(var e=-1,n=new Array(Math.floor(t));++e<t;)n[e]=e;return n}function de(t,e,n,s){return s?"$index"===s?t:s.charAt(0).match(/\w/)?Rt(n,s):n[s]:e||n}function pe(t,e,n){for(var s,i,r,o=e?[]:null,a=0,l=t.options.length;a<l;a++)if(s=t.options[a],r=n?s.hasAttribute("selected"):s.selected){if(i=s.hasOwnProperty("_value")?s._value:s.value,!e)return i;o.push(i)}return o}function fe(t,e){for(var n=t.length;n--;)if(L(t[n],e))return n;return-1}function _e(t,e){var n=e.map(function(t){var e=t.charCodeAt(0);return e>47&&e<58?parseInt(t,10):1===t.length&&(e=t.toUpperCase().charCodeAt(0),e>64&&e<91)?e:cr[t]});return n=[].concat.apply([],n),function(e){if(n.indexOf(e.keyCode)>-1)return t.call(this,e)}}function me(t){return function(e){return e.stopPropagation(),t.call(this,e)}}function ve(t){return function(e){return e.preventDefault(),t.call(this,e)}}function ge(t){return function(e){if(e.target===e.currentTarget)return t.call(this,e)}}function ye(t){if(_r[t])return _r[t];var e=Ce(t);return _r[t]=_r[e]=e,e}function Ce(t){t=f(t);var e=d(t),n=e.charAt(0).toUpperCase()+e.slice(1);mr||(mr=document.createElement("div"));var s,i=dr.length;if("filter"!==e&&e in mr.style)return{kebab:t,camel:e};for(;i--;)if(s=pr[i]+n,s in mr.style)return{kebab:dr[i]+t,camel:s}}function be(t){var e=[];if(Un(t))for(var n=0,s=t.length;n<s;n++){var i=t[n];if(i)if("string"==typeof i)e.push(i);else for(var r in i)i[r]&&e.push(r)}else if(y(t))for(var o in t)t[o]&&e.push(o);return e}function Ee(t,e,n){if(e=e.trim(),e.indexOf(" ")===-1)return void n(t,e);for(var s=e.split(/\s+/),i=0,r=s.length;i<r;i++)n(t,s[i])}function we(t,e,n){function s(){++r>=i?n():t[r].call(e,s)}var i=t.length,r=0;t[0].call(e,s)}function Se(e,n,s){for(var i,r,a,l,h,c,u,p=[],_=Object.keys(n),m=_.length;m--;)if(r=_[m],i=n[r]||Nr,"production"===t.env.NODE_ENV||"$data"!==r)if(h=d(r),Rr.test(h)){if(u={name:r,path:h,options:i,mode:Dr.ONE_WAY,raw:null},a=f(r),null===(l=B(e,a))&&(null!==(l=B(e,a+".sync"))?u.mode=Dr.TWO_WAY:null!==(l=B(e,a+".once"))&&(u.mode=Dr.ONE_TIME)),null!==l)u.raw=l,c=k(l),l=c.expression,u.filters=c.filters,o(l)&&!c.filters?u.optimizedLiteral=!0:(u.dynamic=!0,"production"===t.env.NODE_ENV||u.mode!==Dr.TWO_WAY||xr.test(l)||(u.mode=Dr.ONE_WAY,Ns("Cannot bind two-way prop with non-settable parent path: "+l,s))),u.parentPath=l,"production"!==t.env.NODE_ENV&&i.twoWay&&u.mode!==Dr.TWO_WAY&&Ns('Prop "'+r+'" expects a two-way binding type.',s);else if(null!==(l=j(e,a)))u.raw=l;else if("production"!==t.env.NODE_ENV){var v=h.toLowerCase();l=/[A-Z\-]/.test(r)&&(e.getAttribute(v)||e.getAttribute(":"+v)||e.getAttribute("v-bind:"+v)||e.getAttribute(":"+v+".once")||e.getAttribute("v-bind:"+v+".once")||e.getAttribute(":"+v+".sync")||e.getAttribute("v-bind:"+v+".sync")),l?Ns("Possible usage error for prop `"+v+"` - did you mean `"+a+"`? HTML is case-insensitive, remember to use kebab-case for props in templates.",s):i.required&&Ns("Missing required prop: "+r,s)}p.push(u)}else"production"!==t.env.NODE_ENV&&Ns('Invalid prop key: "'+r+'". Prop keys must be valid identifiers.',s);else Ns("Do not use $data as prop.",s);return Le(p)}function Le(t){return function(e,n){e._props={};for(var s,i,o,a,l,d=e.$options.propsData,p=t.length;p--;)if(s=t[p],l=s.raw,i=s.path,o=s.options,e._props[i]=s,d&&r(d,i)&&Ae(e,s,d[i]),null===l)Ae(e,s,void 0);else if(s.dynamic)s.mode===Dr.ONE_TIME?(a=(n||e._context||e).$get(s.parentPath),Ae(e,s,a)):e._context?e._bindDir({name:"prop",def:Pr,prop:s},null,null,n):Ae(e,s,e.$get(s.parentPath));else if(s.optimizedLiteral){var _=u(l);a=_===l?c(h(l)):_,Ae(e,s,a)}else a=o.type===Boolean&&(""===l||l===f(s.name))||l,Ae(e,s,a)}}function Te(t,e,n,s){var i=e.dynamic&&Bt(e.parentPath),r=n;void 0===r&&(r=ke(t,e)),r=De(e,r,t);var o=r!==n;Oe(e,r,t)||(r=void 0),i&&!o?Et(function(){s(r)}):s(r)}function Ae(t,e,n){Te(t,e,n,function(n){At(t,e.path,n)})}function Ie(t,e,n){Te(t,e,n,function(n){t[e.path]=n})}function ke(e,n){var s=n.options;if(!r(s,"default"))return s.type!==Boolean&&void 0;var i=s["default"];return y(i)&&"production"!==t.env.NODE_ENV&&Ns('Invalid default value for prop "'+n.name+'": Props with type Object/Array must use a factory function to return the default value.',e),"function"==typeof i&&s.type!==Function?i.call(e):i}function Oe(e,n,s){if(!e.options.required&&(null===e.raw||null==n))return!0;var i=e.options,r=i.type,o=!r,a=[];if(r){Un(r)||(r=[r]);for(var l=0;l<r.length&&!o;l++){var h=Ne(n,r[l]);a.push(h.expectedType),o=h.valid}}if(!o)return"production"!==t.env.NODE_ENV&&Ns('Invalid prop: type check failed for prop "'+e.name+'". Expected '+a.map(Re).join(", ")+", got "+xe(n)+".",s),!1;var c=i.validator;return!(c&&!c(n))||("production"!==t.env.NODE_ENV&&Ns('Invalid prop: custom validator check failed for prop "'+e.name+'".',s),!1)}function De(e,n,s){var i=e.options.coerce;return i?"function"==typeof i?i(n):("production"!==t.env.NODE_ENV&&Ns('Invalid coerce for prop "'+e.name+'": expected function, got '+typeof i+".",s),n):n}function Ne(t,e){var n,s;return e===String?(s="string",n=typeof t===s):e===Number?(s="number",n=typeof t===s):e===Boolean?(s="boolean",n=typeof t===s):e===Function?(s="function",n=typeof t===s):e===Object?(s="object",n=C(t)):e===Array?(s="array",n=Un(t)):n=t instanceof e,{valid:n,expectedType:s}}function Re(t){return t?t.charAt(0).toUpperCase()+t.slice(1):"custom type"}function xe(t){return Object.prototype.toString.call(t).slice(8,-1)}function Me(t){Hr.push(t),$r||($r=!0,is(Pe))}function Pe(){for(var t=document.documentElement.offsetHeight,e=0;e<Hr.length;e++)Hr[e]();return Hr=[],$r=!1,t}function He(e,n,s,i){this.id=n,this.el=e,this.enterClass=s&&s.enterClass||n+"-enter",this.leaveClass=s&&s.leaveClass||n+"-leave",this.hooks=s,this.vm=i,this.pendingCssEvent=this.pendingCssCb=this.cancel=this.pendingJsCb=this.op=this.cb=null,this.justEntered=!1,this.entered=this.left=!1,this.typeCache={},this.type=s&&s.type,"production"!==t.env.NODE_ENV&&this.type&&this.type!==Fr&&this.type!==Ur&&Ns('invalid CSS transition type for transition="'+this.id+'": '+this.type,i);var r=this;["enterNextTick","enterDone","leaveNextTick","leaveDone"].forEach(function(t){r[t]=m(r[t],r)})}function $e(t){if(/svg$/.test(t.namespaceURI)){var e=t.getBoundingClientRect();return!(e.width||e.height)}return!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)}function Fe(t,e,n){var s=n||!e._asComponent?Ge(t,e):null,i=s&&s.terminal||cn(t)||!t.hasChildNodes()?null:Ze(t.childNodes,e);return function(t,e,n,r,o){var a=v(e.childNodes),l=Ue(function(){s&&s(t,e,n,r,o),i&&i(t,a,n,r,o)},t);return je(t,l)}}function Ue(e,n){"production"===t.env.NODE_ENV&&(n._directives=[]);var s=n._directives.length;e();var i=n._directives.slice(s);i.sort(Ve);for(var r=0,o=i.length;r<o;r++)i[r]._bind();return i}function Ve(t,e){return t=t.descriptor.def.priority||Qr,e=e.descriptor.def.priority||Qr,t>e?-1:t===e?0:1}function je(t,e,n,s){function i(i){Be(t,e,i),n&&s&&Be(n,s)}return i.dirs=e,i}function Be(e,n,s){for(var i=n.length;i--;)n[i]._teardown(),"production"===t.env.NODE_ENV||s||e._directives.$remove(n[i])}function Ye(t,e,n,s){var i=Se(e,n,t),r=Ue(function(){i(t,s)},t);return je(t,r)}function We(e,n,s){var i,r,o=n._containerAttrs,a=n._replacerAttrs;if(11!==e.nodeType)n._asComponent?(o&&s&&(i=on(o,s)),a&&(r=on(a,n))):r=on(e.attributes,n);else if("production"!==t.env.NODE_ENV&&o){var l=o.filter(function(t){return t.name.indexOf("_v-")<0&&!Kr.test(t.name)&&"slot"!==t.name}).map(function(t){return'"'+t.name+'"'});if(l.length){var h=l.length>1;Ns("Attribute"+(h?"s ":" ")+l.join(", ")+(h?" are":" is")+" ignored on component <"+n.el.tagName.toLowerCase()+"> because the component is a fragment instance: http://vuejs.org/guide/components.html#Fragment-Instance")}}return n._containerAttrs=n._replacerAttrs=null,function(t,e,n){var s,o=t._context;o&&i&&(s=Ue(function(){i(o,e,null,n)},o));var a=Ue(function(){r&&r(t,e)},t);return je(t,a,o,s)}}function Ge(t,e){var n=t.nodeType;return 1!==n||cn(t)?3===n&&t.data.trim()?ze(t,e):null:qe(t,e)}function qe(t,e){if("TEXTAREA"===t.tagName){var n=N(t.value);n&&(t.setAttribute(":value",R(n)),t.value="")}var s,i=t.hasAttributes(),r=i&&v(t.attributes);return i&&(s=nn(t,r,e)),s||(s=tn(t,e)),s||(s=en(t,e)),!s&&i&&(s=on(r,e)),s}function ze(t,e){if(t._skip)return Ke;var n=N(t.wholeText);if(!n)return null;for(var s=t.nextSibling;s&&3===s.nodeType;)s._skip=!0,s=s.nextSibling;for(var i,r,o=document.createDocumentFragment(),a=0,l=n.length;a<l;a++)r=n[a],i=r.tag?Je(r,e):document.createTextNode(r.value),o.appendChild(i);return Xe(n,o,e)}function Ke(t,e){q(e)}function Je(t,e){function n(e){if(!t.descriptor){var n=k(t.value);t.descriptor={name:e,def:Ir[e],expression:n.expression,filters:n.filters}}}var s;return t.oneTime?s=document.createTextNode(t.value):t.html?(s=document.createComment("v-html"),n("html")):(s=document.createTextNode(" "),n("text")),s}function Xe(t,e){return function(n,s,i,r){for(var o,a,h,c=e.cloneNode(!0),u=v(c.childNodes),d=0,p=t.length;d<p;d++)o=t[d],a=o.value,o.tag&&(h=u[d],o.oneTime?(a=(r||n).$eval(a),o.html?K(h,te(a,!0)):h.data=l(a)):n._bindDir(o.descriptor,h,i,r));K(s,c)}}function Ze(t,e){for(var n,s,i,r=[],o=0,a=t.length;o<a;o++)i=t[o],n=Ge(i,e),s=n&&n.terminal||"SCRIPT"===i.tagName||!i.hasChildNodes()?null:Ze(i.childNodes,e),r.push(n,s);return r.length?Qe(r):null}function Qe(t){return function(e,n,s,i,r){for(var o,a,l,h=0,c=0,u=t.length;h<u;c++){o=n[c],a=t[h++],l=t[h++];var d=v(o.childNodes);a&&a(e,o,s,i,r),l&&l(e,d,s,i,r)}}}function tn(t,e){var n=t.tagName.toLowerCase();if(!Ps.test(n)){var s=Ct(e,"elementDirectives",n);return s?rn(t,n,"",e,s):void 0}}function en(t,e){var n=dt(t,e);if(n){var s=at(t),i={name:"component",ref:s,expression:n.id,def:qr.component,modifiers:{literal:!n.dynamic}},r=function(t,e,n,r,o){s&&At((r||t).$refs,s,null),t._bindDir(i,e,n,r,o)};return r.terminal=!0,r}}function nn(t,e,n){if(null!==j(t,"v-pre"))return sn;if(t.hasAttribute("v-else")){var s=t.previousElementSibling;if(s&&s.hasAttribute("v-if"))return sn}for(var i,r,o,a,l,h,c,u,d,p,f=0,_=e.length;f<_;f++)i=e[f],r=i.name.replace(Xr,""),(l=r.match(Jr))&&(d=Ct(n,"directives",l[1]),d&&d.terminal&&(!p||(d.priority||to)>p.priority)&&(p=d,c=i.name,a=an(i.name),o=i.value,h=l[1],u=l[2]));return p?rn(t,h,o,n,p,c,u,a):void 0}function sn(){}function rn(t,e,n,s,i,r,o,a){var l=k(n),h={name:e,arg:o,expression:l.expression,filters:l.filters,raw:n,attr:r,modifiers:a,def:i};"for"!==e&&"router-view"!==e||(h.ref=at(t));var c=function(t,e,n,s,i){h.ref&&At((s||t).$refs,h.ref,null),t._bindDir(h,e,n,s,i)};return c.terminal=!0,c}function on(e,n){function s(t,e,n){var s=n&&hn(n),i=!s&&k(o);m.push({name:t,attr:a,raw:l,def:e,arg:c,modifiers:u,expression:i&&i.expression,filters:i&&i.filters,interp:n,hasOneTime:s})}for(var i,r,o,a,l,h,c,u,d,p,f,_=e.length,m=[];_--;)if(i=e[_],r=a=i.name,o=l=i.value,p=N(o),c=null,u=an(r),r=r.replace(Xr,""),p)o=R(p),c=r,s("bind",Ir.bind,p),"production"!==t.env.NODE_ENV&&"class"===r&&Array.prototype.some.call(e,function(t){return":class"===t.name||"v-bind:class"===t.name})&&Ns('class="'+l+'": Do not mix mustache interpolation and v-bind for "class" on the same element. Use one or the other.',n);else if(Zr.test(r))u.literal=!zr.test(r),s("transition",qr.transition);else if(Kr.test(r))c=r.replace(Kr,""),s("on",Ir.on);else if(zr.test(r))h=r.replace(zr,""),"style"===h||"class"===h?s(h,qr[h]):(c=h,s("bind",Ir.bind));else if(f=r.match(Jr)){if(h=f[1],c=f[2],"else"===h)continue;d=Ct(n,"directives",h,!0),d&&s(h,d)}if(m.length)return ln(m)}function an(t){var e=Object.create(null),n=t.match(Xr);if(n)for(var s=n.length;s--;)e[n[s].slice(1)]=!0;return e}function ln(t){return function(e,n,s,i,r){for(var o=t.length;o--;)e._bindDir(t[o],n,s,i,r)}}function hn(t){for(var e=t.length;e--;)if(t[e].oneTime)return!0}function cn(t){return"SCRIPT"===t.tagName&&(!t.hasAttribute("type")||"text/javascript"===t.getAttribute("type"))}function un(t,e){return e&&(e._containerAttrs=pn(t)),rt(t)&&(t=te(t)),e&&(e._asComponent&&!e.template&&(e.template="<slot></slot>"),e.template&&(e._content=nt(t),t=dn(t,e))),ct(t)&&(z(ot("v-start",!0),t),t.appendChild(ot("v-end",!0))),t}function dn(e,n){var s=n.template,i=te(s,!0);if(i){var r=i.firstChild,o=r.tagName&&r.tagName.toLowerCase();return n.replace?(e===document.body&&"production"!==t.env.NODE_ENV&&Ns("You are mounting an instance with a template to <body>. This will replace <body> entirely. You should probably use `replace: false` here."),i.childNodes.length>1||1!==r.nodeType||"component"===o||Ct(n,"components",o)||Y(r,"is")||Ct(n,"elementDirectives",o)||r.hasAttribute("v-for")||r.hasAttribute("v-if")?i:(n._replacerAttrs=pn(r),fn(e,r),r)):(e.appendChild(i),e)}"production"!==t.env.NODE_ENV&&Ns("Invalid template option: "+s)}function pn(t){if(1===t.nodeType&&t.hasAttributes())return v(t.attributes)}function fn(t,e){for(var n,s,i=t.attributes,r=i.length;r--;)n=i[r].name,s=i[r].value,e.hasAttribute(n)||eo.test(n)?"class"===n&&!N(s)&&(s=s.trim())&&s.split(/\s+/).forEach(function(t){tt(e,t)}):e.setAttribute(n,s)}function _n(e,n){if(n){for(var s,i,r=e._slotContents=Object.create(null),o=0,a=n.children.length;o<a;o++)s=n.children[o],(i=s.getAttribute("slot"))&&(r[i]||(r[i]=[])).push(s),"production"!==t.env.NODE_ENV&&B(s,"slot")&&Ns('The "slot" attribute must be static.',e.$parent);for(i in r)r[i]=mn(r[i],n);if(n.hasChildNodes()){var l=n.childNodes;if(1===l.length&&3===l[0].nodeType&&!l[0].data.trim())return;r["default"]=mn(n.childNodes,n)}}}function mn(t,e){var n=document.createDocumentFragment();t=v(t);for(var s=0,i=t.length;s<i;s++){var r=t[s];!rt(r)||r.hasAttribute("v-if")||r.hasAttribute("v-for")||(e.removeChild(r),r=te(r,!0)),n.appendChild(r)}return n}function vn(e){function n(){}function s(t,e){var n=new zt(e,t,null,{lazy:!0});return function(){return n.dirty&&n.evaluate(),bt.target&&n.depend(),n.value}}Object.defineProperty(e.prototype,"$data",{get:function(){return this._data},set:function(t){t!==this._data&&this._setData(t)}}),e.prototype._initState=function(){this._initProps(),this._initMeta(),this._initMethods(),this._initData(),this._initComputed()},e.prototype._initProps=function(){var e=this.$options,n=e.el,s=e.props;s&&!n&&"production"!==t.env.NODE_ENV&&Ns("Props will not be compiled if no `el` option is provided at instantiation.",this),n=e.el=U(n),this._propsUnlinkFn=n&&1===n.nodeType&&s?Ye(this,n,s,this._scope):null},e.prototype._initData=function(){var e=this.$options.data,n=this._data=e?e():{};C(n)||(n={},"production"!==t.env.NODE_ENV&&Ns("data functions should return an object.",this));var s,i,o=this._props,a=Object.keys(n);for(s=a.length;s--;)i=a[s],o&&r(o,i)?"production"!==t.env.NODE_ENV&&Ns('Data field "'+i+'" is already defined as a prop. To provide default value for a prop, use the "default" prop option; if you want to pass prop values to an instantiation call, use the "propsData" option.',this):this._proxy(i);Tt(n,this)},e.prototype._setData=function(t){t=t||{};var e=this._data;this._data=t;var n,s,i;for(n=Object.keys(e),i=n.length;i--;)s=n[i],s in t||this._unproxy(s);for(n=Object.keys(t),i=n.length;i--;)s=n[i],r(this,s)||this._proxy(s);e.__ob__.removeVm(this),Tt(t,this),this._digest()},e.prototype._proxy=function(t){if(!a(t)){var e=this;Object.defineProperty(e,t,{configurable:!0,enumerable:!0,get:function(){return e._data[t]},set:function(n){e._data[t]=n}})}},e.prototype._unproxy=function(t){a(t)||delete this[t]},e.prototype._digest=function(){for(var t=0,e=this._watchers.length;t<e;t++)this._watchers[t].update(!0)},e.prototype._initComputed=function(){var t=this.$options.computed;if(t)for(var e in t){var i=t[e],r={enumerable:!0,configurable:!0};"function"==typeof i?(r.get=s(i,this),r.set=n):(r.get=i.get?i.cache!==!1?s(i.get,this):m(i.get,this):n,r.set=i.set?m(i.set,this):n),Object.defineProperty(this,e,r)}},e.prototype._initMethods=function(){var t=this.$options.methods;if(t)for(var e in t)this[e]=m(t[e],this)},e.prototype._initMeta=function(){var t=this.$options._meta;if(t)for(var e in t)At(this,e,t[e])}}function gn(e){function n(t,e){for(var n,s,i,r=e.attributes,o=0,a=r.length;o<a;o++)n=r[o].name,so.test(n)&&(n=n.replace(so,""),s=r[o].value,Bt(s)&&(s+=".apply(this, $arguments)"),i=(t._scope||t._context).$eval(s,!0),i._fromParent=!0,t.$on(n.replace(so),i))}function s(t,e,n){if(n){var s,r,o,a;for(r in n)if(s=n[r],Un(s))for(o=0,a=s.length;o<a;o++)i(t,e,r,s[o]);else i(t,e,r,s)}}function i(e,n,s,r,o){var a=typeof r;if("function"===a)e[n](s,r,o);else if("string"===a){var l=e.$options.methods,h=l&&l[r];h?e[n](s,h,o):"production"!==t.env.NODE_ENV&&Ns('Unknown method: "'+r+'" when registering callback for '+n+': "'+s+'".',e)}else r&&"object"===a&&i(e,n,s,r.handler,r)}function r(){this._isAttached||(this._isAttached=!0,this.$children.forEach(o))}function o(t){!t._isAttached&&V(t.$el)&&t._callHook("attached")}function a(){this._isAttached&&(this._isAttached=!1,this.$children.forEach(l))}function l(t){t._isAttached&&!V(t.$el)&&t._callHook("detached")}e.prototype._initEvents=function(){var t=this.$options;t._asComponent&&n(this,t.el),s(this,"$on",t.events),s(this,"$watch",t.watch)},e.prototype._initDOMHooks=function(){this.$on("hook:attached",r),this.$on("hook:detached",a)},e.prototype._callHook=function(t){this.$emit("pre-hook:"+t);var e=this.$options[t];if(e)for(var n=0,s=e.length;n<s;n++)e[n].call(this);this.$emit("hook:"+t)}}function yn(){}function Cn(e,n,s,i,r,o){this.vm=n,this.el=s,this.descriptor=e,this.name=e.name,this.expression=e.expression,this.arg=e.arg,this.modifiers=e.modifiers,this.filters=e.filters,this.literal=this.modifiers&&this.modifiers.literal,this._locked=!1,this._bound=!1,this._listeners=null,this._host=i,this._scope=r,this._frag=o,"production"!==t.env.NODE_ENV&&this.el&&(this.el._vue_directives=this.el._vue_directives||[],this.el._vue_directives.push(this))}function bn(t){t.prototype._updateRef=function(t){var e=this.$options._ref;if(e){var n=(this._scope||this._context).$refs;t?n[e]===this&&(n[e]=null):n[e]=this}},t.prototype._compile=function(t){var e=this.$options,n=t;if(t=un(t,e),this._initElement(t),1!==t.nodeType||null===j(t,"v-pre")){var s=this._context&&this._context.$options,i=We(t,e,s);_n(this,e._content);var r,o=this.constructor;e._linkerCachable&&(r=o.linker,r||(r=o.linker=Fe(t,e)));var a=i(this,t,this._scope),l=r?r(this,t):Fe(t,e)(this,t);this._unlinkFn=function(){a(),l(!0)},e.replace&&K(n,t),this._isCompiled=!0,this._callHook("compiled")}},t.prototype._initElement=function(t){ct(t)?(this._isFragment=!0,this.$el=this._fragmentStart=t.firstChild,this._fragmentEnd=t.lastChild,3===this._fragmentStart.nodeType&&(this._fragmentStart.data=this._fragmentEnd.data=""),this._fragment=t):this.$el=t,this.$el.__vue__=this,this._callHook("beforeCompile")},t.prototype._bindDir=function(t,e,n,s,i){this._directives.push(new Cn(t,this,e,n,s,i))},t.prototype._destroy=function(t,e){if(this._isBeingDestroyed)return void(e||this._cleanup());var n,s,i=this,r=function(){!n||s||e||i._cleanup()};t&&this.$el&&(s=!0,this.$remove(function(){s=!1,r()})),this._callHook("beforeDestroy"),this._isBeingDestroyed=!0;var o,a=this.$parent;for(a&&!a._isBeingDestroyed&&(a.$children.$remove(this),this._updateRef(!0)),o=this.$children.length;o--;)this.$children[o].$destroy();for(this._propsUnlinkFn&&this._propsUnlinkFn(),this._unlinkFn&&this._unlinkFn(),o=this._watchers.length;o--;)this._watchers[o].teardown();this.$el&&(this.$el.__vue__=null),n=!0,r()},t.prototype._cleanup=function(){this._isDestroyed||(this._frag&&this._frag.children.$remove(this),this._data&&this._data.__ob__&&this._data.__ob__.removeVm(this),this.$el=this.$parent=this.$root=this.$children=this._watchers=this._context=this._scope=this._directives=null,this._isDestroyed=!0,this._callHook("destroyed"),this.$off())}}function En(e){e.prototype._applyFilters=function(t,e,n,s){var i,r,o,a,l,h,c,u,d;for(h=0,c=n.length;h<c;h++)if(i=n[s?c-h-1:h],r=Ct(this.$options,"filters",i.name,!0),r&&(r=s?r.write:r.read||r,"function"==typeof r)){if(o=s?[t,e]:[t],l=s?2:1,i.args)for(u=0,d=i.args.length;u<d;u++)a=i.args[u],o[u+l]=a.dynamic?this.$get(a.value):a.value;t=r.apply(this,o)}return t},e.prototype._resolveComponent=function(n,s){var i;if(i="function"==typeof n?n:Ct(this.$options,"components",n,!0))if(i.options)s(i);else if(i.resolved)s(i.resolved);else if(i.requested)i.pendingCallbacks.push(s);else{i.requested=!0;var r=i.pendingCallbacks=[s];i.call(this,function(t){C(t)&&(t=e.extend(t)),i.resolved=t;for(var n=0,s=r.length;n<s;n++)r[n](t)},function(e){"production"!==t.env.NODE_ENV&&Ns("Failed to resolve async component"+("string"==typeof n?": "+n:"")+". "+(e?"\nReason: "+e:""))})}}}function wn(t){function e(t){return JSON.parse(JSON.stringify(t))}t.prototype.$get=function(t,e){var n=jt(t);if(n){if(e){var s=this;return function(){s.$arguments=v(arguments);var t=n.get.call(s,s);return s.$arguments=null,t}}try{return n.get.call(this,this)}catch(i){}}},t.prototype.$set=function(t,e){var n=jt(t,!0);n&&n.set&&n.set.call(this,this,e)},t.prototype.$delete=function(t){i(this._data,t)},t.prototype.$watch=function(t,e,n){var s,i=this;"string"==typeof t&&(s=k(t),t=s.expression);var r=new zt(i,t,e,{deep:n&&n.deep,sync:n&&n.sync,filters:s&&s.filters,user:!n||n.user!==!1});return n&&n.immediate&&e.call(i,r.value),function(){
r.teardown()}},t.prototype.$eval=function(t,e){if(io.test(t)){var n=k(t),s=this.$get(n.expression,e);return n.filters?this._applyFilters(s,null,n.filters):s}return this.$get(t,e)},t.prototype.$interpolate=function(t){var e=N(t),n=this;return e?1===e.length?n.$eval(e[0].value)+"":e.map(function(t){return t.tag?n.$eval(t.value):t.value}).join(""):t},t.prototype.$log=function(t){var n=t?Rt(this._data,t):this._data;if(n&&(n=e(n)),!t){var s;for(s in this.$options.computed)n[s]=e(this[s]);if(this._props)for(s in this._props)n[s]=e(this[s])}console.log(n)}}function Sn(t){function e(t,e,s,i,r,o){e=n(e);var a=!V(e),l=i===!1||a?r:o,h=!a&&!t._isAttached&&!V(t.$el);return t._isFragment?(lt(t._fragmentStart,t._fragmentEnd,function(n){l(n,e,t)}),s&&s()):l(t.$el,e,t,s),h&&t._callHook("attached"),t}function n(t){return"string"==typeof t?document.querySelector(t):t}function s(t,e,n,s){e.appendChild(t),s&&s()}function i(t,e,n,s){W(t,e),s&&s()}function r(t,e,n){q(t),n&&n()}t.prototype.$nextTick=function(t){is(t,this)},t.prototype.$appendTo=function(t,n,i){return e(this,t,n,i,s,P)},t.prototype.$prependTo=function(t,e,s){return t=n(t),t.hasChildNodes()?this.$before(t.firstChild,e,s):this.$appendTo(t,e,s),this},t.prototype.$before=function(t,n,s){return e(this,t,n,s,i,H)},t.prototype.$after=function(t,e,s){return t=n(t),t.nextSibling?this.$before(t.nextSibling,e,s):this.$appendTo(t.parentNode,e,s),this},t.prototype.$remove=function(t,e){if(!this.$el.parentNode)return t&&t();var n=this._isAttached&&V(this.$el);n||(e=!1);var s=this,i=function(){n&&s._callHook("detached"),t&&t()};if(this._isFragment)ht(this._fragmentStart,this._fragmentEnd,this,this._fragment,i);else{var o=e===!1?r:$;o(this.$el,this,i)}return this}}function Ln(t){function e(t,e,s){var i=t.$parent;if(i&&s&&!n.test(e))for(;i;)i._eventsCount[e]=(i._eventsCount[e]||0)+s,i=i.$parent}t.prototype.$on=function(t,n){return(this._events[t]||(this._events[t]=[])).push(n),e(this,t,1),this},t.prototype.$once=function(t,e){function n(){s.$off(t,n),e.apply(this,arguments)}var s=this;return n.fn=e,this.$on(t,n),this},t.prototype.$off=function(t,n){var s;if(!arguments.length){if(this.$parent)for(t in this._events)s=this._events[t],s&&e(this,t,-s.length);return this._events={},this}if(s=this._events[t],!s)return this;if(1===arguments.length)return e(this,t,-s.length),this._events[t]=null,this;for(var i,r=s.length;r--;)if(i=s[r],i===n||i.fn===n){e(this,t,-1),s.splice(r,1);break}return this},t.prototype.$emit=function(t){var e="string"==typeof t;t=e?t:t.name;var n=this._events[t],s=e||!n;if(n){n=n.length>1?v(n):n;var i=e&&n.some(function(t){return t._fromParent});i&&(s=!1);for(var r=v(arguments,1),o=0,a=n.length;o<a;o++){var l=n[o],h=l.apply(this,r);h!==!0||i&&!l._fromParent||(s=!0)}}return s},t.prototype.$broadcast=function(t){var e="string"==typeof t;if(t=e?t:t.name,this._eventsCount[t]){var n=this.$children,s=v(arguments);e&&(s[0]={name:t,source:this});for(var i=0,r=n.length;i<r;i++){var o=n[i],a=o.$emit.apply(o,s);a&&o.$broadcast.apply(o,s)}return this}},t.prototype.$dispatch=function(t){var e=this.$emit.apply(this,arguments);if(e){var n=this.$parent,s=v(arguments);for(s[0]={name:t,source:this};n;)e=n.$emit.apply(n,s),n=e?n.$parent:null;return this}};var n=/^hook:/}function Tn(e){function n(){this._isAttached=!0,this._isReady=!0,this._callHook("ready")}e.prototype.$mount=function(e){return this._isCompiled?void("production"!==t.env.NODE_ENV&&Ns("$mount() should be called only once.",this)):(e=U(e),e||(e=document.createElement("div")),this._compile(e),this._initDOMHooks(),V(this.$el)?(this._callHook("attached"),n.call(this)):this.$once("hook:attached",n),this)},e.prototype.$destroy=function(t,e){this._destroy(t,e)},e.prototype.$compile=function(t,e,n,s){return Fe(t,this.$options,!0)(this,t,e,n,s)}}function An(t){this._init(t)}function In(t,e,n){return n=n?parseInt(n,10):0,e=h(e),"number"==typeof e?t.slice(n,n+e):t}function kn(t,e,n){if(t=lo(t),null==e)return t;if("function"==typeof e)return t.filter(e);e=(""+e).toLowerCase();for(var s,i,r,o,a="in"===n?3:2,l=Array.prototype.concat.apply([],v(arguments,a)),h=[],c=0,u=t.length;c<u;c++)if(s=t[c],r=s&&s.$value||s,o=l.length){for(;o--;)if(i=l[o],"$key"===i&&Dn(s.$key,e)||Dn(Rt(r,i),e)){h.push(s);break}}else Dn(s,e)&&h.push(s);return h}function On(t){function e(t,e,n){var i=s[n];return i&&("$key"!==i&&(y(t)&&"$value"in t&&(t=t.$value),y(e)&&"$value"in e&&(e=e.$value)),t=y(t)?Rt(t,i):t,e=y(e)?Rt(e,i):e),t===e?0:t>e?r:-r}var n=null,s=void 0;t=lo(t);var i=v(arguments,1),r=i[i.length-1];"number"==typeof r?(r=r<0?-1:1,i=i.length>1?i.slice(0,-1):i):r=1;var o=i[0];return o?("function"==typeof o?n=function(t,e){return o(t,e)*r}:(s=Array.prototype.concat.apply([],i),n=function(t,i,r){return r=r||0,r>=s.length-1?e(t,i,r):e(t,i,r)||n(t,i,r+1)}),t.slice().sort(n)):t}function Dn(t,e){var n;if(C(t)){var s=Object.keys(t);for(n=s.length;n--;)if(Dn(t[s[n]],e))return!0}else if(Un(t)){for(n=t.length;n--;)if(Dn(t[n],e))return!0}else if(null!=t)return t.toString().toLowerCase().indexOf(e)>-1}function Nn(e){function n(t){return new Function("return function "+_(t)+" (options) { this._init(options) }")()}e.options={directives:Ir,elementDirectives:ao,filters:co,transitions:{},components:{},partials:{},replace:!0},e.util=Gs,e.config=Ds,e.set=s,e["delete"]=i,e.nextTick=is,e.compiler=no,e.FragmentFactory=le,e.internalDirectives=qr,e.parsers={path:ci,text:Is,template:Vi,directive:Es,expression:Si},e.cid=0;var r=1;e.extend=function(e){e=e||{};var s=this,i=0===s.cid;if(i&&e._Ctor)return e._Ctor;var o=e.name||s.options.name;"production"!==t.env.NODE_ENV&&(/^[a-zA-Z][\w-]*$/.test(o)||(Ns('Invalid component name: "'+o+'". Component names can only contain alphanumeric characaters and the hyphen.'),o=null));var a=n(o||"VueComponent");return a.prototype=Object.create(s.prototype),a.prototype.constructor=a,a.cid=r++,a.options=yt(s.options,e),a["super"]=s,a.extend=s.extend,Ds._assetTypes.forEach(function(t){a[t]=s[t]}),o&&(a.options.components[o]=a),i&&(e._Ctor=a),a},e.use=function(t){if(!t.installed){var e=v(arguments,1);return e.unshift(this),"function"==typeof t.install?t.install.apply(t,e):t.apply(null,e),t.installed=!0,this}},e.mixin=function(t){e.options=yt(e.options,t)},Ds._assetTypes.forEach(function(n){e[n]=function(s,i){return i?("production"!==t.env.NODE_ENV&&"component"===n&&(Ps.test(s)||Hs.test(s))&&Ns("Do not use built-in or reserved HTML elements as component id: "+s),"component"===n&&C(i)&&(i.name||(i.name=s),i=e.extend(i)),this.options[n+"s"][s]=i,i):this.options[n+"s"][s]}}),g(e.transition,xs)}var Rn=Object.prototype.hasOwnProperty,xn=/^\s?(true|false|-?[\d\.]+|'[^']*'|"[^"]*")\s?$/,Mn=/-(\w)/g,Pn=/([a-z\d])([A-Z])/g,Hn=/(?:^|[-_\/])(\w)/g,$n=Object.prototype.toString,Fn="[object Object]",Un=Array.isArray,Vn="__proto__"in{},jn="undefined"!=typeof window&&"[object Object]"!==Object.prototype.toString.call(window),Bn=jn&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__,Yn=jn&&window.navigator.userAgent.toLowerCase(),Wn=Yn&&Yn.indexOf("trident")>0,Gn=Yn&&Yn.indexOf("msie 9.0")>0,qn=Yn&&Yn.indexOf("android")>0,zn=Yn&&/(iphone|ipad|ipod|ios)/i.test(Yn),Kn=zn&&Yn.match(/os ([\d_]+)/),Jn=Kn&&Kn[1].split("_"),Xn=Jn&&Number(Jn[0])>=9&&Number(Jn[1])>=3&&!window.indexedDB,Zn=void 0,Qn=void 0,ts=void 0,es=void 0;if(jn&&!Gn){var ns=void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend,ss=void 0===window.onanimationend&&void 0!==window.onwebkitanimationend;Zn=ns?"WebkitTransition":"transition",Qn=ns?"webkitTransitionEnd":"transitionend",ts=ss?"WebkitAnimation":"animation",es=ss?"webkitAnimationEnd":"animationend"}var is=function(){function t(){i=!1;var t=s.slice(0);s=[];for(var e=0;e<t.length;e++)t[e]()}var e,s=[],i=!1;if("undefined"==typeof MutationObserver||Xn){var r=jn?window:"undefined"!=typeof n?n:{};e=r.setImmediate||setTimeout}else{var o=1,a=new MutationObserver(t),l=document.createTextNode(o);a.observe(l,{characterData:!0}),e=function(){o=(o+1)%2,l.data=o}}return function(n,r){var o=r?function(){n.call(r)}:n;s.push(o),i||(i=!0,e(t,0))}}(),rs=void 0;"undefined"!=typeof Set&&Set.toString().match(/native code/)?rs=Set:(rs=function(){this.set=Object.create(null)},rs.prototype.has=function(t){return void 0!==this.set[t]},rs.prototype.add=function(t){this.set[t]=1},rs.prototype.clear=function(){this.set=Object.create(null)});var os=T.prototype;os.put=function(t,e){var n,s=this.get(t,!0);return s||(this.size===this.limit&&(n=this.shift()),s={key:t},this._keymap[t]=s,this.tail?(this.tail.newer=s,s.older=this.tail):this.head=s,this.tail=s,this.size++),s.value=e,n},os.shift=function(){var t=this.head;return t&&(this.head=this.head.newer,this.head.older=void 0,t.newer=t.older=void 0,this._keymap[t.key]=void 0,this.size--),t},os.get=function(t,e){var n=this._keymap[t];if(void 0!==n)return n===this.tail?e?n:n.value:(n.newer&&(n===this.head&&(this.head=n.newer),n.newer.older=n.older),n.older&&(n.older.newer=n.newer),n.newer=void 0,n.older=this.tail,this.tail&&(this.tail.newer=n),this.tail=n,e?n:n.value)};var as,ls,hs,cs,us,ds,ps,fs,_s,ms,vs,gs,ys=new T(1e3),Cs=/[^\s'"]+|'[^']*'|"[^"]*"/g,bs=/^in$|^-?\d+/,Es=Object.freeze({parseDirective:k}),ws=/[-.*+?^${}()|[\]\/\\]/g,Ss=void 0,Ls=void 0,Ts=void 0,As=/[^|]\|[^|]/,Is=Object.freeze({compileRegex:D,parseText:N,tokensToExp:R}),ks=["{{","}}"],Os=["{{{","}}}"],Ds=Object.defineProperties({debug:!1,silent:!1,async:!0,warnExpressionErrors:!0,devtools:"production"!==t.env.NODE_ENV,_delimitersChanged:!0,_assetTypes:["component","directive","elementDirective","filter","transition","partial"],_propBindingModes:{ONE_WAY:0,TWO_WAY:1,ONE_TIME:2},_maxUpdateCount:100},{delimiters:{get:function(){return ks},set:function(t){ks=t,D()},configurable:!0,enumerable:!0},unsafeDelimiters:{get:function(){return Os},set:function(t){Os=t,D()},configurable:!0,enumerable:!0}}),Ns=void 0,Rs=void 0;"production"!==t.env.NODE_ENV&&!function(){var t="undefined"!=typeof console;Ns=function(e,n){t&&!Ds.silent&&console.error("[Vue warn]: "+e+(n?Rs(n):""))},Rs=function(t){var e=t._isVue?t.$options.name:t.name;return e?" (found in component: <"+f(e)+">)":""}}();var xs=Object.freeze({appendWithTransition:P,beforeWithTransition:H,removeWithTransition:$,applyTransition:F}),Ms=/^v-ref:/,Ps=/^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i,Hs=/^(slot|partial|component)$/i,$s=void 0;"production"!==t.env.NODE_ENV&&($s=function(t,e){return e.indexOf("-")>-1?t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:/HTMLUnknownElement/.test(t.toString())&&!/^(data|time|rtc|rb|details|dialog|summary)$/.test(e)});var Fs=Ds.optionMergeStrategies=Object.create(null);Fs.data=function(e,n,s){return s?e||n?function(){var t="function"==typeof n?n.call(s):n,i="function"==typeof e?e.call(s):void 0;return t?ft(t,i):i}:void 0:n?"function"!=typeof n?("production"!==t.env.NODE_ENV&&Ns('The "data" option should be a function that returns a per-instance value in component definitions.',s),e):e?function(){return ft(n.call(this),e.call(this))}:n:e},Fs.el=function(e,n,s){if(!s&&n&&"function"!=typeof n)return void("production"!==t.env.NODE_ENV&&Ns('The "el" option should be a function that returns a per-instance value in component definitions.',s));var i=n||e;return s&&"function"==typeof i?i.call(s):i},Fs.init=Fs.created=Fs.ready=Fs.attached=Fs.detached=Fs.beforeCompile=Fs.compiled=Fs.beforeDestroy=Fs.destroyed=Fs.activate=function(t,e){return e?t?t.concat(e):Un(e)?e:[e]:t},Ds._assetTypes.forEach(function(t){Fs[t+"s"]=_t}),Fs.watch=Fs.events=function(t,e){if(!e)return t;if(!t)return e;var n={};g(n,t);for(var s in e){var i=n[s],r=e[s];i&&!Un(i)&&(i=[i]),n[s]=i?i.concat(r):[r]}return n},Fs.props=Fs.methods=Fs.computed=function(t,e){if(!e)return t;if(!t)return e;var n=Object.create(null);return g(n,t),g(n,e),n};var Us=function(t,e){return void 0===e?t:e},Vs=0;bt.target=null,bt.prototype.addSub=function(t){this.subs.push(t)},bt.prototype.removeSub=function(t){this.subs.$remove(t)},bt.prototype.depend=function(){bt.target.addDep(this)},bt.prototype.notify=function(){for(var t=v(this.subs),e=0,n=t.length;e<n;e++)t[e].update()};var js=Array.prototype,Bs=Object.create(js);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=js[t];b(Bs,t,function(){for(var n=arguments.length,s=new Array(n);n--;)s[n]=arguments[n];var i,r=e.apply(this,s),o=this.__ob__;switch(t){case"push":i=s;break;case"unshift":i=s;break;case"splice":i=s.slice(2)}return i&&o.observeArray(i),o.dep.notify(),r})}),b(js,"$set",function(t,e){return t>=this.length&&(this.length=Number(t)+1),this.splice(t,1,e)[0]}),b(js,"$remove",function(t){if(this.length){var e=w(this,t);return e>-1?this.splice(e,1):void 0}});var Ys=Object.getOwnPropertyNames(Bs),Ws=!0;wt.prototype.walk=function(t){for(var e=Object.keys(t),n=0,s=e.length;n<s;n++)this.convert(e[n],t[e[n]])},wt.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)Tt(t[e])},wt.prototype.convert=function(t,e){At(this.value,t,e)},wt.prototype.addVm=function(t){(this.vms||(this.vms=[])).push(t)},wt.prototype.removeVm=function(t){this.vms.$remove(t)};var Gs=Object.freeze({defineReactive:At,set:s,del:i,hasOwn:r,isLiteral:o,isReserved:a,_toString:l,toNumber:h,toBoolean:c,stripQuotes:u,camelize:d,hyphenate:f,classify:_,bind:m,toArray:v,extend:g,isObject:y,isPlainObject:C,def:b,debounce:E,indexOf:w,cancellable:S,looseEqual:L,isArray:Un,hasProto:Vn,inBrowser:jn,devtools:Bn,isIE:Wn,isIE9:Gn,isAndroid:qn,isIos:zn,iosVersionMatch:Kn,iosVersion:Jn,hasMutationObserverBug:Xn,get transitionProp(){return Zn},get transitionEndEvent(){return Qn},get animationProp(){return ts},get animationEndEvent(){return es},nextTick:is,get _Set(){return rs},query:U,inDoc:V,getAttr:j,getBindAttr:B,hasBindAttr:Y,before:W,after:G,remove:q,prepend:z,replace:K,on:J,off:X,setClass:Q,addClass:tt,removeClass:et,extractContent:nt,trimNode:st,isTemplate:rt,createAnchor:ot,findRef:at,mapNodeRange:lt,removeNodeRange:ht,isFragment:ct,getOuterHTML:ut,mergeOptions:yt,resolveAsset:Ct,checkComponentAttr:dt,commonTagRE:Ps,reservedTagRE:Hs,get warn(){return Ns}}),qs=0,zs=new T(1e3),Ks=0,Js=1,Xs=2,Zs=3,Qs=0,ti=1,ei=2,ni=3,si=4,ii=5,ri=6,oi=7,ai=8,li=[];li[Qs]={ws:[Qs],ident:[ni,Ks],"[":[si],eof:[oi]},li[ti]={ws:[ti],".":[ei],"[":[si],eof:[oi]},li[ei]={ws:[ei],ident:[ni,Ks]},li[ni]={ident:[ni,Ks],0:[ni,Ks],number:[ni,Ks],ws:[ti,Js],".":[ei,Js],"[":[si,Js],eof:[oi,Js]},li[si]={"'":[ii,Ks],'"':[ri,Ks],"[":[si,Xs],"]":[ti,Zs],eof:ai,"else":[si,Ks]},li[ii]={"'":[si,Ks],eof:ai,"else":[ii,Ks]},li[ri]={'"':[si,Ks],eof:ai,"else":[ri,Ks]};var hi;"production"!==t.env.NODE_ENV&&(hi=function(t,e){Ns('You are setting a non-existent path "'+t.raw+'" on a vm instance. Consider pre-initializing the property with the "data" option for more reliable reactivity and better performance.',e)});var ci=Object.freeze({parsePath:Nt,getPath:Rt,setPath:xt}),ui=new T(1e3),di="Math,Date,this,true,false,null,undefined,Infinity,NaN,isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,parseInt,parseFloat",pi=new RegExp("^("+di.replace(/,/g,"\\b|")+"\\b)"),fi="break,case,class,catch,const,continue,debugger,default,delete,do,else,export,extends,finally,for,function,if,import,in,instanceof,let,return,super,switch,throw,try,var,while,with,yield,enum,await,implements,package,protected,static,interface,private,public",_i=new RegExp("^("+fi.replace(/,/g,"\\b|")+"\\b)"),mi=/\s/g,vi=/\n/g,gi=/[\{,]\s*[\w\$_]+\s*:|('(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`)|new |typeof |void /g,yi=/"(\d+)"/g,Ci=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['.*?'\]|\[".*?"\]|\[\d+\]|\[[A-Za-z_$][\w$]*\])*$/,bi=/[^\w$\.](?:[A-Za-z_$][\w$]*)/g,Ei=/^(?:true|false|null|undefined|Infinity|NaN)$/,wi=[],Si=Object.freeze({parseExpression:jt,isSimplePath:Bt}),Li=[],Ti=[],Ai={},Ii={},ki=!1,Oi=0;zt.prototype.get=function(){this.beforeGet();var e,n=this.scope||this.vm;try{e=this.getter.call(n,n)}catch(s){"production"!==t.env.NODE_ENV&&Ds.warnExpressionErrors&&Ns('Error when evaluating expression "'+this.expression+'": '+s.toString(),this.vm)}return this.deep&&Kt(e),this.preProcess&&(e=this.preProcess(e)),this.filters&&(e=n._applyFilters(e,null,this.filters,!1)),this.postProcess&&(e=this.postProcess(e)),this.afterGet(),e},zt.prototype.set=function(e){var n=this.scope||this.vm;this.filters&&(e=n._applyFilters(e,this.value,this.filters,!0));try{this.setter.call(n,n,e)}catch(s){"production"!==t.env.NODE_ENV&&Ds.warnExpressionErrors&&Ns('Error when evaluating setter "'+this.expression+'": '+s.toString(),this.vm)}var i=n.$forContext;if(i&&i.alias===this.expression){if(i.filters)return void("production"!==t.env.NODE_ENV&&Ns("It seems you are using two-way binding on a v-for alias ("+this.expression+"), and the v-for has filters. This will not work properly. Either remove the filters or use an array of objects and bind to object properties instead.",this.vm));i._withLock(function(){n.$key?i.rawValue[n.$key]=e:i.rawValue.$set(n.$index,e)})}},zt.prototype.beforeGet=function(){bt.target=this},zt.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},zt.prototype.afterGet=function(){bt.target=null;for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},zt.prototype.update=function(e){this.lazy?this.dirty=!0:this.sync||!Ds.async?this.run():(this.shallow=this.queued?!!e&&this.shallow:!!e,this.queued=!0,"production"!==t.env.NODE_ENV&&Ds.debug&&(this.prevError=new Error("[vue] async stack trace")),qt(this))},zt.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||(y(e)||this.deep)&&!this.shallow){var n=this.value;this.value=e;var s=this.prevError;if("production"!==t.env.NODE_ENV&&Ds.debug&&s){this.prevError=null;try{this.cb.call(this.vm,e,n)}catch(i){throw is(function(){throw s},0),i}}else this.cb.call(this.vm,e,n)}this.queued=this.shallow=!1}},zt.prototype.evaluate=function(){var t=bt.target;this.value=this.get(),this.dirty=!1,bt.target=t},zt.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},zt.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||this.vm._vForRemoving||this.vm._watchers.$remove(this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1,this.vm=this.cb=this.value=null}};var Di=new rs,Ni={bind:function(){this.attr=3===this.el.nodeType?"data":"textContent"},update:function(t){this.el[this.attr]=l(t)}},Ri=new T(1e3),xi=new T(1e3),Mi={efault:[0,"",""],legend:[1,"<fieldset>","</fieldset>"],tr:[2,"<table><tbody>","</tbody></table>"],col:[2,"<table><tbody></tbody><colgroup>","</colgroup></table>"]};Mi.td=Mi.th=[3,"<table><tbody><tr>","</tr></tbody></table>"],Mi.option=Mi.optgroup=[1,'<select multiple="multiple">',"</select>"],Mi.thead=Mi.tbody=Mi.colgroup=Mi.caption=Mi.tfoot=[1,"<table>","</table>"],Mi.g=Mi.defs=Mi.symbol=Mi.use=Mi.image=Mi.text=Mi.circle=Mi.ellipse=Mi.line=Mi.path=Mi.polygon=Mi.polyline=Mi.rect=[1,'<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:ev="http://www.w3.org/2001/xml-events"version="1.1">',"</svg>"];var Pi=/<([\w:-]+)/,Hi=/&#?\w+?;/,$i=/<!--/,Fi=function(){if(jn){var t=document.createElement("div");return t.innerHTML="<template>1</template>",!t.cloneNode(!0).firstChild.innerHTML}return!1}(),Ui=function(){if(jn){var t=document.createElement("textarea");return t.placeholder="t","t"===t.cloneNode(!0).value}return!1}(),Vi=Object.freeze({cloneNode:Qt,parseTemplate:te}),ji={bind:function(){8===this.el.nodeType&&(this.nodes=[],this.anchor=ot("v-html"),K(this.el,this.anchor))},update:function(t){t=l(t),this.nodes?this.swap(t):this.el.innerHTML=t},swap:function(t){for(var e=this.nodes.length;e--;)q(this.nodes[e]);var n=te(t,!0,!0);this.nodes=v(n.childNodes),W(n,this.anchor)}};ee.prototype.callHook=function(t){var e,n;for(e=0,n=this.childFrags.length;e<n;e++)this.childFrags[e].callHook(t);for(e=0,n=this.children.length;e<n;e++)t(this.children[e])},ee.prototype.beforeRemove=function(){var t,e;for(t=0,e=this.childFrags.length;t<e;t++)this.childFrags[t].beforeRemove(!1);for(t=0,e=this.children.length;t<e;t++)this.children[t].$destroy(!1,!0);var n=this.unlink.dirs;for(t=0,e=n.length;t<e;t++)n[t]._watcher&&n[t]._watcher.teardown()},ee.prototype.destroy=function(){this.parentFrag&&this.parentFrag.childFrags.$remove(this),this.node.__v_frag=null,this.unlink()};var Bi=new T(5e3);le.prototype.create=function(t,e,n){var s=Qt(this.template);return new ee(this.linker,this.vm,s,t,e,n)};var Yi=700,Wi=800,Gi=850,qi=1100,zi=1500,Ki=1500,Ji=1750,Xi=2100,Zi=2200,Qi=2300,tr=0,er={priority:Zi,terminal:!0,params:["track-by","stagger","enter-stagger","leave-stagger"],bind:function(){var e=this.expression.match(/(.*) (?:in|of) (.*)/);if(e){var n=e[1].match(/\((.*),(.*)\)/);n?(this.iterator=n[1].trim(),this.alias=n[2].trim()):this.alias=e[1].trim(),this.expression=e[2]}if(!this.alias)return void("production"!==t.env.NODE_ENV&&Ns('Invalid v-for expression "'+this.descriptor.raw+'": alias is required.',this.vm));this.id="__v-for__"+ ++tr;var s=this.el.tagName;this.isOption=("OPTION"===s||"OPTGROUP"===s)&&"SELECT"===this.el.parentNode.tagName,this.start=ot("v-for-start"),this.end=ot("v-for-end"),K(this.el,this.end),W(this.start,this.end),this.cache=Object.create(null),this.factory=new le(this.vm,this.el)},update:function(t){this.diff(t),this.updateRef(),this.updateModel()},diff:function(t){var e,n,s,i,o,a,l=t[0],h=this.fromObject=y(l)&&r(l,"$key")&&r(l,"$value"),c=this.params.trackBy,u=this.frags,d=this.frags=new Array(t.length),p=this.alias,f=this.iterator,_=this.start,m=this.end,v=V(_),g=!u;for(e=0,n=t.length;e<n;e++)l=t[e],i=h?l.$key:null,o=h?l.$value:l,a=!y(o),s=!g&&this.getCachedFrag(o,e,i),s?(s.reused=!0,s.scope.$index=e,i&&(s.scope.$key=i),f&&(s.scope[f]=null!==i?i:e),(c||h||a)&&Et(function(){s.scope[p]=o})):(s=this.create(o,p,e,i),s.fresh=!g),d[e]=s,g&&s.before(m);if(!g){var C=0,b=u.length-d.length;for(this.vm._vForRemoving=!0,e=0,n=u.length;e<n;e++)s=u[e],s.reused||(this.deleteCachedFrag(s),this.remove(s,C++,b,v));this.vm._vForRemoving=!1,C&&(this.vm._watchers=this.vm._watchers.filter(function(t){return t.active}));var E,w,S,L=0;for(e=0,n=d.length;e<n;e++)s=d[e],E=d[e-1],w=E?E.staggerCb?E.staggerAnchor:E.end||E.node:_,s.reused&&!s.staggerCb?(S=he(s,_,this.id),S===E||S&&he(S,_,this.id)===E||this.move(s,w)):this.insert(s,L++,w,v),s.reused=s.fresh=!1}},create:function(t,e,n,s){var i=this._host,r=this._scope||this.vm,o=Object.create(r);o.$refs=Object.create(r.$refs),o.$els=Object.create(r.$els),o.$parent=r,o.$forContext=this,Et(function(){At(o,e,t)}),At(o,"$index",n),s?At(o,"$key",s):o.$key&&b(o,"$key",null),this.iterator&&At(o,this.iterator,null!==s?s:n);var a=this.factory.create(i,o,this._frag);return a.forId=this.id,this.cacheFrag(t,a,n,s),a},updateRef:function(){var t=this.descriptor.ref;if(t){var e,n=(this._scope||this.vm).$refs;this.fromObject?(e={},this.frags.forEach(function(t){e[t.scope.$key]=ce(t)})):e=this.frags.map(ce),n[t]=e}},updateModel:function(){if(this.isOption){var t=this.start.parentNode,e=t&&t.__v_model;e&&e.forceUpdate()}},insert:function(t,e,n,s){t.staggerCb&&(t.staggerCb.cancel(),t.staggerCb=null);var i=this.getStagger(t,e,null,"enter");if(s&&i){var r=t.staggerAnchor;r||(r=t.staggerAnchor=ot("stagger-anchor"),r.__v_frag=t),G(r,n);var o=t.staggerCb=S(function(){t.staggerCb=null,t.before(r),q(r)});setTimeout(o,i)}else{var a=n.nextSibling;a||(G(this.end,n),a=this.end),t.before(a)}},remove:function(t,e,n,s){if(t.staggerCb)return t.staggerCb.cancel(),void(t.staggerCb=null);var i=this.getStagger(t,e,n,"leave");if(s&&i){var r=t.staggerCb=S(function(){t.staggerCb=null,t.remove()});setTimeout(r,i)}else t.remove()},move:function(t,e){e.nextSibling||this.end.parentNode.appendChild(this.end),t.before(e.nextSibling,!1)},cacheFrag:function(e,n,s,i){var o,a=this.params.trackBy,l=this.cache,h=!y(e);i||a||h?(o=de(s,i,e,a),l[o]?"$index"!==a&&"production"!==t.env.NODE_ENV&&this.warnDuplicate(e):l[o]=n):(o=this.id,r(e,o)?null===e[o]?e[o]=n:"production"!==t.env.NODE_ENV&&this.warnDuplicate(e):Object.isExtensible(e)?b(e,o,n):"production"!==t.env.NODE_ENV&&Ns("Frozen v-for objects cannot be automatically tracked, make sure to provide a track-by key.")),n.raw=e},getCachedFrag:function(e,n,s){var i,r=this.params.trackBy,o=!y(e);if(s||r||o){var a=de(n,s,e,r);i=this.cache[a]}else i=e[this.id];return i&&(i.reused||i.fresh)&&"production"!==t.env.NODE_ENV&&this.warnDuplicate(e),i},deleteCachedFrag:function(t){var e=t.raw,n=this.params.trackBy,s=t.scope,i=s.$index,o=r(s,"$key")&&s.$key,a=!y(e);if(n||o||a){var l=de(i,o,e,n);this.cache[l]=null}else e[this.id]=null,t.raw=null},getStagger:function(t,e,n,s){s+="Stagger";var i=t.node.__v_trans,r=i&&i.hooks,o=r&&(r[s]||r.stagger);return o?o.call(t,e,n):e*parseInt(this.params[s]||this.params.stagger,10)},_preProcess:function(t){return this.rawValue=t,t},_postProcess:function(t){if(Un(t))return t;if(C(t)){for(var e,n=Object.keys(t),s=n.length,i=new Array(s);s--;)e=n[s],i[s]={$key:e,$value:t[e]};return i}return"number"!=typeof t||isNaN(t)||(t=ue(t)),t||[]},unbind:function(){if(this.descriptor.ref&&((this._scope||this.vm).$refs[this.descriptor.ref]=null),this.frags)for(var t,e=this.frags.length;e--;)t=this.frags[e],this.deleteCachedFrag(t),t.destroy()}};"production"!==t.env.NODE_ENV&&(er.warnDuplicate=function(t){Ns('Duplicate value found in v-for="'+this.descriptor.raw+'": '+JSON.stringify(t)+'. Use track-by="$index" if you are expecting duplicate values.',this.vm)});var nr={priority:Xi,terminal:!0,bind:function(){var e=this.el;if(e.__vue__)"production"!==t.env.NODE_ENV&&Ns('v-if="'+this.expression+'" cannot be used on an instance root element.',this.vm),this.invalid=!0;else{var n=e.nextElementSibling;n&&null!==j(n,"v-else")&&(q(n),this.elseEl=n),this.anchor=ot("v-if"),K(e,this.anchor)}},update:function(t){this.invalid||(t?this.frag||this.insert():this.remove())},insert:function(){this.elseFrag&&(this.elseFrag.remove(),this.elseFrag=null),this.factory||(this.factory=new le(this.vm,this.el)),this.frag=this.factory.create(this._host,this._scope,this._frag),this.frag.before(this.anchor)},remove:function(){this.frag&&(this.frag.remove(),this.frag=null),this.elseEl&&!this.elseFrag&&(this.elseFactory||(this.elseFactory=new le(this.elseEl._context||this.vm,this.elseEl)),this.elseFrag=this.elseFactory.create(this._host,this._scope,this._frag),this.elseFrag.before(this.anchor))},unbind:function(){this.frag&&this.frag.destroy(),this.elseFrag&&this.elseFrag.destroy()}},sr={bind:function(){var t=this.el.nextElementSibling;t&&null!==j(t,"v-else")&&(this.elseEl=t)},update:function(t){this.apply(this.el,t),this.elseEl&&this.apply(this.elseEl,!t)},apply:function(t,e){function n(){t.style.display=e?"":"none"}V(t)?F(t,e?1:-1,n,this.vm):n()}},ir={bind:function(){var t=this,e=this.el,n="range"===e.type,s=this.params.lazy,i=this.params.number,r=this.params.debounce,o=!1;if(qn||n||(this.on("compositionstart",function(){o=!0}),this.on("compositionend",function(){o=!1,s||t.listener()})),this.focused=!1,n||s||(this.on("focus",function(){t.focused=!0}),this.on("blur",function(){t.focused=!1,t._frag&&!t._frag.inserted||t.rawListener()})),this.listener=this.rawListener=function(){if(!o&&t._bound){var s=i||n?h(e.value):e.value;t.set(s),is(function(){t._bound&&!t.focused&&t.update(t._watcher.value)})}},r&&(this.listener=E(this.listener,r)),this.hasjQuery="function"==typeof jQuery,this.hasjQuery){var a=jQuery.fn.on?"on":"bind";jQuery(e)[a]("change",this.rawListener),s||jQuery(e)[a]("input",this.listener)}else this.on("change",this.rawListener),s||this.on("input",this.listener);!s&&Gn&&(this.on("cut",function(){is(t.listener)}),this.on("keyup",function(e){46!==e.keyCode&&8!==e.keyCode||t.listener()})),(e.hasAttribute("value")||"TEXTAREA"===e.tagName&&e.value.trim())&&(this.afterBind=this.listener)},update:function(t){t=l(t),t!==this.el.value&&(this.el.value=t)},unbind:function(){var t=this.el;if(this.hasjQuery){var e=jQuery.fn.off?"off":"unbind";jQuery(t)[e]("change",this.listener),jQuery(t)[e]("input",this.listener)}}},rr={bind:function(){var t=this,e=this.el;this.getValue=function(){if(e.hasOwnProperty("_value"))return e._value;var n=e.value;return t.params.number&&(n=h(n)),n},this.listener=function(){t.set(t.getValue())},this.on("change",this.listener),e.hasAttribute("checked")&&(this.afterBind=this.listener)},update:function(t){this.el.checked=L(t,this.getValue())}},or={bind:function(){var t=this,e=this,n=this.el;this.forceUpdate=function(){e._watcher&&e.update(e._watcher.get())};var s=this.multiple=n.hasAttribute("multiple");this.listener=function(){var t=pe(n,s);t=e.params.number?Un(t)?t.map(h):h(t):t,e.set(t)},this.on("change",this.listener);var i=pe(n,s,!0);(s&&i.length||!s&&null!==i)&&(this.afterBind=this.listener),this.vm.$on("hook:attached",function(){is(t.forceUpdate)}),V(n)||is(this.forceUpdate)},update:function(t){var e=this.el;e.selectedIndex=-1;for(var n,s,i=this.multiple&&Un(t),r=e.options,o=r.length;o--;)n=r[o],s=n.hasOwnProperty("_value")?n._value:n.value,n.selected=i?fe(t,s)>-1:L(t,s)},unbind:function(){this.vm.$off("hook:attached",this.forceUpdate)}},ar={bind:function(){function t(){var t=n.checked;return t&&n.hasOwnProperty("_trueValue")?n._trueValue:!t&&n.hasOwnProperty("_falseValue")?n._falseValue:t}var e=this,n=this.el;this.getValue=function(){return n.hasOwnProperty("_value")?n._value:e.params.number?h(n.value):n.value},this.listener=function(){var s=e._watcher.value;if(Un(s)){var i=e.getValue();n.checked?w(s,i)<0&&s.push(i):s.$remove(i)}else e.set(t())},this.on("change",this.listener),n.hasAttribute("checked")&&(this.afterBind=this.listener)},update:function(t){var e=this.el;Un(t)?e.checked=w(t,this.getValue())>-1:e.hasOwnProperty("_trueValue")?e.checked=L(t,e._trueValue):e.checked=!!t}},lr={text:ir,radio:rr,select:or,checkbox:ar},hr={priority:Wi,twoWay:!0,handlers:lr,params:["lazy","number","debounce"],bind:function(){this.checkFilters(),this.hasRead&&!this.hasWrite&&"production"!==t.env.NODE_ENV&&Ns('It seems you are using a read-only filter with v-model="'+this.descriptor.raw+'". You might want to use a two-way filter to ensure correct behavior.',this.vm);var e,n=this.el,s=n.tagName;if("INPUT"===s)e=lr[n.type]||lr.text;else if("SELECT"===s)e=lr.select;else{if("TEXTAREA"!==s)return void("production"!==t.env.NODE_ENV&&Ns("v-model does not support element type: "+s,this.vm));e=lr.text}n.__v_model=this,e.bind.call(this),this.update=e.update,this._unbind=e.unbind},checkFilters:function(){var t=this.filters;if(t)for(var e=t.length;e--;){var n=Ct(this.vm.$options,"filters",t[e].name);("function"==typeof n||n.read)&&(this.hasRead=!0),n.write&&(this.hasWrite=!0)}},unbind:function(){this.el.__v_model=null,this._unbind&&this._unbind()}},cr={esc:27,tab:9,enter:13,space:32,"delete":[8,46],up:38,left:37,right:39,down:40},ur={priority:Yi,acceptStatement:!0,keyCodes:cr,bind:function(){if("IFRAME"===this.el.tagName&&"load"!==this.arg){var t=this;this.iframeBind=function(){J(t.el.contentWindow,t.arg,t.handler,t.modifiers.capture)},this.on("load",this.iframeBind)}},update:function(e){if(this.descriptor.raw||(e=function(){}),"function"!=typeof e)return void("production"!==t.env.NODE_ENV&&Ns("v-on:"+this.arg+'="'+this.expression+'" expects a function value, got '+e,this.vm));this.modifiers.stop&&(e=me(e)),this.modifiers.prevent&&(e=ve(e)),this.modifiers.self&&(e=ge(e));var n=Object.keys(this.modifiers).filter(function(t){return"stop"!==t&&"prevent"!==t&&"self"!==t&&"capture"!==t});n.length&&(e=_e(e,n)),this.reset(),this.handler=e,this.iframeBind?this.iframeBind():J(this.el,this.arg,this.handler,this.modifiers.capture)},reset:function(){var t=this.iframeBind?this.el.contentWindow:this.el;
this.handler&&X(t,this.arg,this.handler)},unbind:function(){this.reset()}},dr=["-webkit-","-moz-","-ms-"],pr=["Webkit","Moz","ms"],fr=/!important;?$/,_r=Object.create(null),mr=null,vr={deep:!0,update:function(t){"string"==typeof t?this.el.style.cssText=t:Un(t)?this.handleObject(t.reduce(g,{})):this.handleObject(t||{})},handleObject:function(t){var e,n,s=this.cache||(this.cache={});for(e in s)e in t||(this.handleSingle(e,null),delete s[e]);for(e in t)n=t[e],n!==s[e]&&(s[e]=n,this.handleSingle(e,n))},handleSingle:function(e,n){if(e=ye(e))if(null!=n&&(n+=""),n){var s=fr.test(n)?"important":"";s?("production"!==t.env.NODE_ENV&&Ns("It's probably a bad idea to use !important with inline rules. This feature will be deprecated in a future version of Vue."),n=n.replace(fr,"").trim(),this.el.style.setProperty(e.kebab,n,s)):this.el.style[e.camel]=n}else this.el.style[e.camel]=""}},gr="http://www.w3.org/1999/xlink",yr=/^xlink:/,Cr=/^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/,br=/^(?:value|checked|selected|muted)$/,Er=/^(?:draggable|contenteditable|spellcheck)$/,wr={value:"_value","true-value":"_trueValue","false-value":"_falseValue"},Sr={priority:Gi,bind:function(){var e=this.arg,n=this.el.tagName;e||(this.deep=!0);var s=this.descriptor,i=s.interp;if(i&&(s.hasOneTime&&(this.expression=R(i,this._scope||this.vm)),(Cr.test(e)||"name"===e&&("PARTIAL"===n||"SLOT"===n))&&("production"!==t.env.NODE_ENV&&Ns(e+'="'+s.raw+'": attribute interpolation is not allowed in Vue.js directives and special attributes.',this.vm),this.el.removeAttribute(e),this.invalid=!0),"production"!==t.env.NODE_ENV)){var r=e+'="'+s.raw+'": ';"src"===e&&Ns(r+'interpolation in "src" attribute will cause a 404 request. Use v-bind:src instead.',this.vm),"style"===e&&Ns(r+'interpolation in "style" attribute will cause the attribute to be discarded in Internet Explorer. Use v-bind:style instead.',this.vm)}},update:function(t){if(!this.invalid){var e=this.arg;this.arg?this.handleSingle(e,t):this.handleObject(t||{})}},handleObject:vr.handleObject,handleSingle:function(t,e){var n=this.el,s=this.descriptor.interp;if(this.modifiers.camel&&(t=d(t)),!s&&br.test(t)&&t in n){var i="value"===t&&null==e?"":e;n[t]!==i&&(n[t]=i)}var r=wr[t];if(!s&&r){n[r]=e;var o=n.__v_model;o&&o.listener()}return"value"===t&&"TEXTAREA"===n.tagName?void n.removeAttribute(t):void(Er.test(t)?n.setAttribute(t,e?"true":"false"):null!=e&&e!==!1?"class"===t?(n.__v_trans&&(e+=" "+n.__v_trans.id+"-transition"),Q(n,e)):yr.test(t)?n.setAttributeNS(gr,t,e===!0?"":e):n.setAttribute(t,e===!0?"":e):n.removeAttribute(t))}},Lr={priority:zi,bind:function(){if(this.arg){var t=this.id=d(this.arg),e=(this._scope||this.vm).$els;r(e,t)?e[t]=this.el:At(e,t,this.el)}},unbind:function(){var t=(this._scope||this.vm).$els;t[this.id]===this.el&&(t[this.id]=null)}},Tr={bind:function(){"production"!==t.env.NODE_ENV&&Ns("v-ref:"+this.arg+" must be used on a child component. Found on <"+this.el.tagName.toLowerCase()+">.",this.vm)}},Ar={bind:function(){var t=this.el;this.vm.$once("pre-hook:compiled",function(){t.removeAttribute("v-cloak")})}},Ir={text:Ni,html:ji,"for":er,"if":nr,show:sr,model:hr,on:ur,bind:Sr,el:Lr,ref:Tr,cloak:Ar},kr={deep:!0,update:function(t){t?"string"==typeof t?this.setClass(t.trim().split(/\s+/)):this.setClass(be(t)):this.cleanup()},setClass:function(t){this.cleanup(t);for(var e=0,n=t.length;e<n;e++){var s=t[e];s&&Ee(this.el,s,tt)}this.prevKeys=t},cleanup:function(t){var e=this.prevKeys;if(e)for(var n=e.length;n--;){var s=e[n];(!t||t.indexOf(s)<0)&&Ee(this.el,s,et)}}},Or={priority:Ki,params:["keep-alive","transition-mode","inline-template"],bind:function(){this.el.__vue__?"production"!==t.env.NODE_ENV&&Ns('cannot mount component "'+this.expression+'" on already mounted element: '+this.el):(this.keepAlive=this.params.keepAlive,this.keepAlive&&(this.cache={}),this.params.inlineTemplate&&(this.inlineTemplate=nt(this.el,!0)),this.pendingComponentCb=this.Component=null,this.pendingRemovals=0,this.pendingRemovalCb=null,this.anchor=ot("v-component"),K(this.el,this.anchor),this.el.removeAttribute("is"),this.el.removeAttribute(":is"),this.descriptor.ref&&this.el.removeAttribute("v-ref:"+f(this.descriptor.ref)),this.literal&&this.setComponent(this.expression))},update:function(t){this.literal||this.setComponent(t)},setComponent:function(t,e){if(this.invalidatePending(),t){var n=this;this.resolveComponent(t,function(){n.mountComponent(e)})}else this.unbuild(!0),this.remove(this.childVM,e),this.childVM=null},resolveComponent:function(t,e){var n=this;this.pendingComponentCb=S(function(s){n.ComponentName=s.options.name||("string"==typeof t?t:null),n.Component=s,e()}),this.vm._resolveComponent(t,this.pendingComponentCb)},mountComponent:function(t){this.unbuild(!0);var e=this,n=this.Component.options.activate,s=this.getCached(),i=this.build();n&&!s?(this.waitingFor=i,we(n,i,function(){e.waitingFor===i&&(e.waitingFor=null,e.transition(i,t))})):(s&&i._updateRef(),this.transition(i,t))},invalidatePending:function(){this.pendingComponentCb&&(this.pendingComponentCb.cancel(),this.pendingComponentCb=null)},build:function(e){var n=this.getCached();if(n)return n;if(this.Component){var s={name:this.ComponentName,el:Qt(this.el),template:this.inlineTemplate,parent:this._host||this.vm,_linkerCachable:!this.inlineTemplate,_ref:this.descriptor.ref,_asComponent:!0,_isRouterView:this._isRouterView,_context:this.vm,_scope:this._scope,_frag:this._frag};e&&g(s,e);var i=new this.Component(s);return this.keepAlive&&(this.cache[this.Component.cid]=i),"production"!==t.env.NODE_ENV&&this.el.hasAttribute("transition")&&i._isFragment&&Ns("Transitions will not work on a fragment instance. Template: "+i.$options.template,i),i}},getCached:function(){return this.keepAlive&&this.cache[this.Component.cid]},unbuild:function(t){this.waitingFor&&(this.keepAlive||this.waitingFor.$destroy(),this.waitingFor=null);var e=this.childVM;return!e||this.keepAlive?void(e&&(e._inactive=!0,e._updateRef(!0))):void e.$destroy(!1,t)},remove:function(t,e){var n=this.keepAlive;if(t){this.pendingRemovals++,this.pendingRemovalCb=e;var s=this;t.$remove(function(){s.pendingRemovals--,n||t._cleanup(),!s.pendingRemovals&&s.pendingRemovalCb&&(s.pendingRemovalCb(),s.pendingRemovalCb=null)})}else e&&e()},transition:function(t,e){var n=this,s=this.childVM;switch(s&&(s._inactive=!0),t._inactive=!1,this.childVM=t,n.params.transitionMode){case"in-out":t.$before(n.anchor,function(){n.remove(s,e)});break;case"out-in":n.remove(s,function(){t.$before(n.anchor,e)});break;default:n.remove(s),t.$before(n.anchor,e)}},unbind:function(){if(this.invalidatePending(),this.unbuild(),this.cache){for(var t in this.cache)this.cache[t].$destroy();this.cache=null}}},Dr=Ds._propBindingModes,Nr={},Rr=/^[$_a-zA-Z]+[\w$]*$/,xr=/^[A-Za-z_$][\w$]*(\.[A-Za-z_$][\w$]*|\[[^\[\]]+\])*$/,Mr=Ds._propBindingModes,Pr={bind:function(){var t=this.vm,e=t._context,n=this.descriptor.prop,s=n.path,i=n.parentPath,r=n.mode===Mr.TWO_WAY,o=this.parentWatcher=new zt(e,i,function(e){Ie(t,n,e)},{twoWay:r,filters:n.filters,scope:this._scope});if(Ae(t,n,o.value),r){var a=this;t.$once("pre-hook:created",function(){a.childWatcher=new zt(t,s,function(t){o.set(t)},{sync:!0})})}},unbind:function(){this.parentWatcher.teardown(),this.childWatcher&&this.childWatcher.teardown()}},Hr=[],$r=!1,Fr="transition",Ur="animation",Vr=Zn+"Duration",jr=ts+"Duration",Br=jn&&window.requestAnimationFrame,Yr=Br?function(t){Br(function(){Br(t)})}:function(t){setTimeout(t,50)},Wr=He.prototype;Wr.enter=function(t,e){this.cancelPending(),this.callHook("beforeEnter"),this.cb=e,tt(this.el,this.enterClass),t(),this.entered=!1,this.callHookWithCb("enter"),this.entered||(this.cancel=this.hooks&&this.hooks.enterCancelled,Me(this.enterNextTick))},Wr.enterNextTick=function(){var t=this;this.justEntered=!0,Yr(function(){t.justEntered=!1});var e=this.enterDone,n=this.getCssTransitionType(this.enterClass);this.pendingJsCb?n===Fr&&et(this.el,this.enterClass):n===Fr?(et(this.el,this.enterClass),this.setupCssCb(Qn,e)):n===Ur?this.setupCssCb(es,e):e()},Wr.enterDone=function(){this.entered=!0,this.cancel=this.pendingJsCb=null,et(this.el,this.enterClass),this.callHook("afterEnter"),this.cb&&this.cb()},Wr.leave=function(t,e){this.cancelPending(),this.callHook("beforeLeave"),this.op=t,this.cb=e,tt(this.el,this.leaveClass),this.left=!1,this.callHookWithCb("leave"),this.left||(this.cancel=this.hooks&&this.hooks.leaveCancelled,this.op&&!this.pendingJsCb&&(this.justEntered?this.leaveDone():Me(this.leaveNextTick)))},Wr.leaveNextTick=function(){var t=this.getCssTransitionType(this.leaveClass);if(t){var e=t===Fr?Qn:es;this.setupCssCb(e,this.leaveDone)}else this.leaveDone()},Wr.leaveDone=function(){this.left=!0,this.cancel=this.pendingJsCb=null,this.op(),et(this.el,this.leaveClass),this.callHook("afterLeave"),this.cb&&this.cb(),this.op=null},Wr.cancelPending=function(){this.op=this.cb=null;var t=!1;this.pendingCssCb&&(t=!0,X(this.el,this.pendingCssEvent,this.pendingCssCb),this.pendingCssEvent=this.pendingCssCb=null),this.pendingJsCb&&(t=!0,this.pendingJsCb.cancel(),this.pendingJsCb=null),t&&(et(this.el,this.enterClass),et(this.el,this.leaveClass)),this.cancel&&(this.cancel.call(this.vm,this.el),this.cancel=null)},Wr.callHook=function(t){this.hooks&&this.hooks[t]&&this.hooks[t].call(this.vm,this.el)},Wr.callHookWithCb=function(t){var e=this.hooks&&this.hooks[t];e&&(e.length>1&&(this.pendingJsCb=S(this[t+"Done"])),e.call(this.vm,this.el,this.pendingJsCb))},Wr.getCssTransitionType=function(t){if(!(!Qn||document.hidden||this.hooks&&this.hooks.css===!1||$e(this.el))){var e=this.type||this.typeCache[t];if(e)return e;var n=this.el.style,s=window.getComputedStyle(this.el),i=n[Vr]||s[Vr];if(i&&"0s"!==i)e=Fr;else{var r=n[jr]||s[jr];r&&"0s"!==r&&(e=Ur)}return e&&(this.typeCache[t]=e),e}},Wr.setupCssCb=function(t,e){this.pendingCssEvent=t;var n=this,s=this.el,i=this.pendingCssCb=function(r){r.target===s&&(X(s,t,i),n.pendingCssEvent=n.pendingCssCb=null,!n.pendingJsCb&&e&&e())};J(s,t,i)};var Gr={priority:qi,update:function(t,e){var n=this.el,s=Ct(this.vm.$options,"transitions",t);t=t||"v",e=e||"v",n.__v_trans=new He(n,t,s,this.vm),et(n,e+"-transition"),tt(n,t+"-transition")}},qr={style:vr,"class":kr,component:Or,prop:Pr,transition:Gr},zr=/^v-bind:|^:/,Kr=/^v-on:|^@/,Jr=/^v-([^:]+)(?:$|:(.*)$)/,Xr=/\.[^\.]+/g,Zr=/^(v-bind:|:)?transition$/,Qr=1e3,to=2e3;sn.terminal=!0;var eo=/[^\w\-:\.]/,no=Object.freeze({compile:Fe,compileAndLinkProps:Ye,compileRoot:We,transclude:un,resolveSlots:_n}),so=/^v-on:|^@/;Cn.prototype._bind=function(){var t=this.name,e=this.descriptor;if(("cloak"!==t||this.vm._isCompiled)&&this.el&&this.el.removeAttribute){var n=e.attr||"v-"+t;this.el.removeAttribute(n)}var s=e.def;if("function"==typeof s?this.update=s:g(this,s),this._setupParams(),this.bind&&this.bind(),this._bound=!0,this.literal)this.update&&this.update(e.raw);else if((this.expression||this.modifiers)&&(this.update||this.twoWay)&&!this._checkStatement()){var i=this;this.update?this._update=function(t,e){i._locked||i.update(t,e)}:this._update=yn;var r=this._preProcess?m(this._preProcess,this):null,o=this._postProcess?m(this._postProcess,this):null,a=this._watcher=new zt(this.vm,this.expression,this._update,{filters:this.filters,twoWay:this.twoWay,deep:this.deep,preProcess:r,postProcess:o,scope:this._scope});this.afterBind?this.afterBind():this.update&&this.update(a.value)}},Cn.prototype._setupParams=function(){if(this.params){var t=this.params;this.params=Object.create(null);for(var e,n,s,i=t.length;i--;)e=f(t[i]),s=d(e),n=B(this.el,e),null!=n?this._setupParamWatcher(s,n):(n=j(this.el,e),null!=n&&(this.params[s]=""===n||n))}},Cn.prototype._setupParamWatcher=function(t,e){var n=this,s=!1,i=(this._scope||this.vm).$watch(e,function(e,i){if(n.params[t]=e,s){var r=n.paramWatchers&&n.paramWatchers[t];r&&r.call(n,e,i)}else s=!0},{immediate:!0,user:!1});(this._paramUnwatchFns||(this._paramUnwatchFns=[])).push(i)},Cn.prototype._checkStatement=function(){var t=this.expression;if(t&&this.acceptStatement&&!Bt(t)){var e=jt(t).get,n=this._scope||this.vm,s=function(t){n.$event=t,e.call(n,n),n.$event=null};return this.filters&&(s=n._applyFilters(s,null,this.filters)),this.update(s),!0}},Cn.prototype.set=function(e){this.twoWay?this._withLock(function(){this._watcher.set(e)}):"production"!==t.env.NODE_ENV&&Ns("Directive.set() can only be used inside twoWaydirectives.")},Cn.prototype._withLock=function(t){var e=this;e._locked=!0,t.call(e),is(function(){e._locked=!1})},Cn.prototype.on=function(t,e,n){J(this.el,t,e,n),(this._listeners||(this._listeners=[])).push([t,e])},Cn.prototype._teardown=function(){if(this._bound){this._bound=!1,this.unbind&&this.unbind(),this._watcher&&this._watcher.teardown();var e,n=this._listeners;if(n)for(e=n.length;e--;)X(this.el,n[e][0],n[e][1]);var s=this._paramUnwatchFns;if(s)for(e=s.length;e--;)s[e]();"production"!==t.env.NODE_ENV&&this.el&&this.el._vue_directives.$remove(this),this.vm=this.el=this._watcher=this._listeners=null}};var io=/[^|]\|[^|]/;It(An),vn(An),gn(An),bn(An),En(An),wn(An),Sn(An),Ln(An),Tn(An);var ro={priority:Qi,params:["name"],bind:function(){var t=this.params.name||"default",e=this.vm._slotContents&&this.vm._slotContents[t];e&&e.hasChildNodes()?this.compile(e.cloneNode(!0),this.vm._context,this.vm):this.fallback()},compile:function(t,e,n){if(t&&e){if(this.el.hasChildNodes()&&1===t.childNodes.length&&1===t.childNodes[0].nodeType&&t.childNodes[0].hasAttribute("v-if")){var s=document.createElement("template");s.setAttribute("v-else",""),s.innerHTML=this.el.innerHTML,s._context=this.vm,t.appendChild(s)}var i=n?n._scope:this._scope;this.unlink=e.$compile(t,n,i,this._frag)}t?K(this.el,t):q(this.el)},fallback:function(){this.compile(nt(this.el,!0),this.vm)},unbind:function(){this.unlink&&this.unlink()}},oo={priority:Ji,params:["name"],paramWatchers:{name:function(t){nr.remove.call(this),t&&this.insert(t)}},bind:function(){this.anchor=ot("v-partial"),K(this.el,this.anchor),this.insert(this.params.name)},insert:function(t){var e=Ct(this.vm.$options,"partials",t,!0);e&&(this.factory=new le(this.vm,e),nr.insert.call(this))},unbind:function(){this.frag&&this.frag.destroy()}},ao={slot:ro,partial:oo},lo=er._postProcess,ho=/(\d{3})(?=\d)/g,co={orderBy:On,filterBy:kn,limitBy:In,json:{read:function(t,e){return"string"==typeof t?t:JSON.stringify(t,null,arguments.length>1?e:2)},write:function(t){try{return JSON.parse(t)}catch(e){return t}}},capitalize:function(t){return t||0===t?(t=t.toString(),t.charAt(0).toUpperCase()+t.slice(1)):""},uppercase:function(t){return t||0===t?t.toString().toUpperCase():""},lowercase:function(t){return t||0===t?t.toString().toLowerCase():""},currency:function(t,e,n){if(t=parseFloat(t),!isFinite(t)||!t&&0!==t)return"";e=null!=e?e:"$",n=null!=n?n:2;var s=Math.abs(t).toFixed(n),i=n?s.slice(0,-1-n):s,r=i.length%3,o=r>0?i.slice(0,r)+(i.length>3?",":""):"",a=n?s.slice(-1-n):"",l=t<0?"-":"";return l+e+o+i.slice(r).replace(ho,"$1,")+a},pluralize:function(t){var e=v(arguments,1),n=e.length;if(n>1){var s=t%10-1;return s in e?e[s]:e[n-1]}return e[0]+(1===t?"":"s")},debounce:function(t,e){if(t)return e||(e=300),E(t,e)}};Nn(An),An.version="1.0.26",setTimeout(function(){Ds.devtools&&(Bn?Bn.emit("init",An):"production"!==t.env.NODE_ENV&&jn&&/Chrome\/\d+/.test(window.navigator.userAgent)&&console.log("Download the Vue Devtools for a better development experience:\nhttps://github.com/vuejs/vue-devtools"))},0),e.exports=An}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:4}],9:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]={data:function(){return{username:""}},methods:{login:function(){this.username.length>0&&(localStorage.setItem("username",this.username),this.$router.go({name:"lobby"}))}},ready:function(){this.$nextTick(function(){componentHandler.upgradeDom()}),this.$nextTick(function(){componentHandler.upgradeAllRegistered()})}},e.exports.__esModule&&(e.exports=e.exports["default"]),("function"==typeof e.exports?e.exports.options:e.exports).template='<div class="mdl-grid page-content"><div class="login-card mdl-card mdl-shadow--2dp mdl-cell mdl-cell--6-col"><div class="mdl-card__title"><h2 class="mdl-card__title-text">Welcome</h2></div><div class="mdl-card__supporting-text"><p>Choose a nickname and enter</p><form action="#"><div class="mdl-textfield mdl-js-textfield mdl-textfield--floating-label"><input class="mdl-textfield__input" id="sample3" type="text" v-model="username"/><label class="mdl-textfield__label" for="sample3">Nickname</label></div></form></div><div class="mdl-card__actions mdl-card--border"><a class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect" @click="login">Login</a></div><div class="mdl-card__menu"><button class="mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect"><i class="material-icons">share</i></button></div></div></div>',e.hot&&!function(){e.hot.accept();var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.data?n.update("_v-4889ea9c",e.exports,("function"==typeof e.exports?e.exports.options:e.exports).template):n.createRecord("_v-4889ea9c",e.exports))}()},{vue:8,"vue-hot-reload-api":5}],10:[function(t,e,n){"use strict";function s(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(n,"__esModule",{value:!0});var i=t("moment"),r=s(i);n["default"]={data:function(){return{host:{Host:localStorage.getItem("username"),Structure:"Single Game"},hostedMatches:[]}},methods:{createMatch:function(){this.host.Time_Created=(0,r["default"])().format("YYYY-MM-DDTHH:mm:ss"),this.$http.post(URL.API+"/1/mtg-games",this.host).then(function(t){var e=JSON.parse(t.body);socket.emit("created match","GameId_"+e.Id)})},startDuel:function(t,e){var n={Id:e,Opponents:localStorage.getItem("username")+"_DUELIST"};t||(n.Game_On=!0,this.$http.put(URL.API+"/1/mtg-games",n).then(function(t){var e=JSON.parse(t.body);socket.emit("joined match",e.Id)}))},isGameOn:function(t){return 1===t}},ready:function(){var t=this;this.$http.get(URL.API+"/1/mtg-games").then(function(e){var n=JSON.parse(e.body);n.forEach(function(e){e.Game_On=t.isGameOn(e.Game_On)}),t.hostedMatches=n},function(t){console.log(t.status)}),socket.on("create match",function(e){e.Game_On=t.isGameOn(e.Game_On),t.hostedMatches.push(e)}),socket.on("join match",function(e){var n=("GameId_"+e.Id,t.hostedMatches.map(function(t){return t.Id}).indexOf(e.Id));t.hostedMatches[n].Game_On=e.Game_On,t.hostedMatches[n].Opponents=e.Opponents}),socket.on("start match",function(e){t.$router.go({name:"match",params:{id:e}})}),this.$nextTick(function(){componentHandler.upgradeDom()}),this.$nextTick(function(){componentHandler.upgradeAllRegistered()})}},e.exports.__esModule&&(e.exports=e.exports["default"]),("function"==typeof e.exports?e.exports.options:e.exports).template='<div class="mdl-grid"><div class="mdl-cell mdl-cell--4-col mdl-cell--4-col-tablet mdl-cell--12-col-phone mdl-grid mdl-grid--no-spacing"><div class="host-match-card mdl-card mdl-shadow--2dp mdl-cell mdl-cell--12-col"><div class="mdl-card__title"><h2 class="mdl-card__title-text">Lobby</h2></div><div class="mdl-card__supporting-text"><p>Host a MTG match now!</p><label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="option-1"><input class="mdl-radio__button" id="option-1" type="radio" name="options" value="Single Game" checked="" v-model="host.Structure"/><span class="mdl-radio__label">Single Game</span></label><div class="mdl-layout-spacer"></div><label class="mdl-radio mdl-js-radio mdl-js-ripple-effect" for="option-2"><input class="mdl-radio__button" id="option-2" type="radio" name="options" value="BO3" v-model="host.Structure"/><span class="mdl-radio__label">Best of 3</span></label></div><div class="mdl-card__actions mdl-card--border"><a class="mdl-button mdl-button--colored mdl-js-button mdl-js-ripple-effect" @click="createMatch">Create Match</a></div><div class="mdl-card__menu"><button class="mdl-button mdl-button--icon mdl-js-button mdl-js-ripple-effect"><i class="material-icons">share</i></button></div></div><div class="space mdl-cell--1-col"></div></div><div class="mdl-cell mdl-cell--8-col mdl-cell--8-col-tablet mdl-cell--12-col-phone mdl-grid mdl-grid--no-spacing"><table class="list-matches mdl-data-table mdl-js-data-table mdl-shadow--2dp mdl-cell mdl-cell--12-col" v-if="hostedMatches.length"><thead><tr><th class="mdl-data-table__cell--non-numeric hide-mobile">Status</th><th class="mdl-data-table__cell--non-numeric">Players</th><th class="mdl-data-table__cell--non-numeric">Structure</th></tr></thead><tbody><template v-for="match in hostedMatches | filterBy \'false\' in \'Game_On\' | orderBy \'Time_Created\' -1"><tr v-remove-old-host="match.Time_Created" @click="startDuel(match.Game_On, match.Id)"><td class="mdl-data-table__cell--non-numeric hide-mobile"><div v-moment-ago="match.Time_Created"></div></td><td class="mdl-data-table__cell--non-numeric"> {{ match.Host }},<span style="color: #67FFB0; font-weight: 700" v-show="!match.Game_On"> (Open)</span><span v-show="match.Game_On"> {{ match.Opponents }}</span></td><td class="mdl-data-table__cell--non-numeric">{{ match.Structure }}</td></tr></template></tbody></table><div class="padding-vertical mdl-cell mdl-cell--12-col"></div><table class="list-matches mdl-data-table mdl-js-data-table mdl-shadow--2dp mdl-cell mdl-cell--12-col" v-if="hostedMatches.length"><thead><tr><th class="mdl-data-table__cell--non-numeric hide-mobile">Status</th><th class="mdl-data-table__cell--non-numeric">Players</th><th class="mdl-data-table__cell--non-numeric">Structure</th></tr></thead><tbody><tr v-for="matchOn in hostedMatches | filterBy \'true\' in \'Game_On\' | orderBy \'Time_Created\' -1"><td class="mdl-data-table__cell--non-numeric hide-mobile"><div v-moment-ago="matchOn.Time_Created"></div></td><td class="mdl-data-table__cell--non-numeric"> {{ matchOn.Host }}, {{ matchOn.Opponents }}</td><td class="mdl-data-table__cell--non-numeric">{{ matchOn.Structure }}</td></tr></tbody></table></div></div>',e.hot&&!function(){e.hot.accept();var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.data?n.update("_v-b495bfda",e.exports,("function"==typeof e.exports?e.exports.options:e.exports).template):n.createRecord("_v-b495bfda",e.exports))}()},{moment:3,vue:8,"vue-hot-reload-api":5}],11:[function(t,e,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n["default"]={data:function(){return{msg:"Match!"}},ready:function(){this.$nextTick(function(){componentHandler.upgradeDom()}),this.$nextTick(function(){componentHandler.upgradeAllRegistered()})}},e.exports.__esModule&&(e.exports=e.exports["default"]),("function"==typeof e.exports?e.exports.options:e.exports).template='<h1 class="red">{{ msg }}</h1>',e.hot&&!function(){e.hot.accept();var n=t("vue-hot-reload-api");n.install(t("vue"),!0),n.compatible&&(e.hot.data?n.update("_v-449e8e82",e.exports,("function"==typeof e.exports?e.exports.options:e.exports).template):n.createRecord("_v-449e8e82",e.exports))}()},{vue:8,"vue-hot-reload-api":5}],12:[function(t,e,n){"use strict";function s(t){return t&&t.__esModule?t:{"default":t}}var i=t("moment"),r=s(i),o=t("material-design-lite"),a=(s(o),t("vue")),l=s(a),h=t("vue-router"),c=s(h),u=t("vue-resource"),d=s(u),p=t("moment-range"),f=(s(p),t("./components/home.vue")),_=s(f),m=t("./components/lobby.vue"),v=s(m),g=t("./components/match.vue"),y=s(g);window.URL={SOCKET:"http://magictg-api.azurewebsites.net/socket.io/socket.io.js",API:"http://magictg-api.azurewebsites.net"},window.Vue=l["default"],l["default"].use(c["default"]),l["default"].use(d["default"]);var C=new c["default"]({history:!0,transitionOnLoad:!0,root:"/"});l["default"].directive("moment-ago",{update:function(t){var e=this;this.el.innerHTML=(0,r["default"])(t).utc().fromNow(),this.interval=setInterval(function(){e.el.innerHTML=(0,r["default"])(t).utc().fromNow()},6e4)},unbind:function(){clearInterval(this.interval)}}),l["default"].directive("remove-old-host",{update:function(t){function e(t){var e=(0,r["default"])(t),s=(0,r["default"])(e).add(1,"h"),i=(0,r["default"])(),o=r["default"].utc().range(e,s);i.within(o)?n.el.style.display="table-row":n.el.style.display="none"}var n=this;e(t),this.interval=setInterval(function(){e(t)},6e4)},unbind:function(){clearInterval(this.interval)}});var b=l["default"].extend({});C.map({"/":{component:_["default"]},"/lobby":{name:"lobby",component:v["default"]},"/match/:id":{name:"match",component:y["default"]}}),C.start(b,"#app")},{"./components/home.vue":9,"./components/lobby.vue":10,"./components/match.vue":11,"material-design-lite":1,moment:3,"moment-range":2,vue:8,"vue-resource":6,"vue-router":7}]},{},[12]);
//# sourceMappingURL=data:application/json;base64,
